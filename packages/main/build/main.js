"use strict";var vf=require("events"),wf=require("crypto"),_f=require("fs"),Tf=require("stream"),Af=require("url"),Sf=require("string_decoder"),$f=require("constants"),Cf=require("util"),bf=require("assert"),Of=require("path"),Nf=require("fs/promises"),If=require("os"),Rf=require("electron"),Df=require("child_process"),Pf=require("zlib"),Ff=require("http");function we(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}function xf(e,t){return t.forEach(function(n){n&&typeof n!="string"&&!Array.isArray(n)&&Object.keys(n).forEach(function(r){if(r!=="default"&&!(r in e)){var i=Object.getOwnPropertyDescriptor(n,r);Object.defineProperty(e,r,i.get?i:{enumerable:!0,get:function(){return n[r]}})}})}),Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}var ul=we(vf),Qr=we(wf),yt=we(_f),Zn=we(Tf),xt=we(Af),Lf=we(Sf),Uf=we($f),cl=we(Cf),fl=we(bf),oe=we(Of),kf=we(Nf),dl=we(If),nn=we(Rf),Zr=we(Df),hl=we(Pf),Mf=we(Ff),He=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Bf(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var gn={},te={},It={};Object.defineProperty(It,"__esModule",{value:!0});It.CancellationError=It.CancellationToken=void 0;const qf=ul.default;class Hf extends qf.EventEmitter{constructor(t){super(),this.parentCancelHandler=null,this._parent=null,this._cancelled=!1,t!=null&&(this.parent=t)}get cancelled(){return this._cancelled||this._parent!=null&&this._parent.cancelled}set parent(t){this.removeParentCancelHandler(),this._parent=t,this.parentCancelHandler=()=>this.cancel(),this._parent.onCancel(this.parentCancelHandler)}cancel(){this._cancelled=!0,this.emit("cancel")}onCancel(t){this.cancelled?t():this.once("cancel",t)}createPromise(t){if(this.cancelled)return Promise.reject(new ca);const n=()=>{if(r!=null)try{this.removeListener("cancel",r),r=null}catch{}};let r=null;return new Promise((i,a)=>{let o=null;if(r=()=>{try{o!=null&&(o(),o=null)}finally{a(new ca)}},this.cancelled){r();return}this.onCancel(r),t(i,a,s=>{o=s})}).then(i=>(n(),i)).catch(i=>{throw n(),i})}removeParentCancelHandler(){const t=this._parent;t!=null&&this.parentCancelHandler!=null&&(t.removeListener("cancel",this.parentCancelHandler),this.parentCancelHandler=null)}dispose(){try{this.removeParentCancelHandler()}finally{this.removeAllListeners(),this._parent=null}}}It.CancellationToken=Hf;class ca extends Error{constructor(){super("cancelled")}}It.CancellationError=ca;var J={},fa={exports:{}},rn=1e3,an=rn*60,on=an*60,Rt=on*24,jf=Rt*7,Gf=Rt*365.25,Vf=function(e,t){t=t||{};var n=typeof e;if(n==="string"&&e.length>0)return Yf(e);if(n==="number"&&isFinite(e))return t.long?Xf(e):Wf(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function Yf(e){if(e=String(e),!(e.length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!!t){var n=parseFloat(t[1]),r=(t[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"yrs":case"yr":case"y":return n*Gf;case"weeks":case"week":case"w":return n*jf;case"days":case"day":case"d":return n*Rt;case"hours":case"hour":case"hrs":case"hr":case"h":return n*on;case"minutes":case"minute":case"mins":case"min":case"m":return n*an;case"seconds":case"second":case"secs":case"sec":case"s":return n*rn;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}function Wf(e){var t=Math.abs(e);return t>=Rt?Math.round(e/Rt)+"d":t>=on?Math.round(e/on)+"h":t>=an?Math.round(e/an)+"m":t>=rn?Math.round(e/rn)+"s":e+"ms"}function Xf(e){var t=Math.abs(e);return t>=Rt?wr(e,t,Rt,"day"):t>=on?wr(e,t,on,"hour"):t>=an?wr(e,t,an,"minute"):t>=rn?wr(e,t,rn,"second"):e+" ms"}function wr(e,t,n,r){var i=t>=n*1.5;return Math.round(e/n)+" "+r+(i?"s":"")}function zf(e){n.debug=n,n.default=n,n.coerce=l,n.disable=a,n.enable=i,n.enabled=o,n.humanize=Vf,n.destroy=p,Object.keys(e).forEach(f=>{n[f]=e[f]}),n.names=[],n.skips=[],n.formatters={};function t(f){let c=0;for(let m=0;m<f.length;m++)c=(c<<5)-c+f.charCodeAt(m),c|=0;return n.colors[Math.abs(c)%n.colors.length]}n.selectColor=t;function n(f){let c,m=null,y,w;function A(...S){if(!A.enabled)return;const C=A,$=Number(new Date),L=$-(c||$);C.diff=L,C.prev=c,C.curr=$,c=$,S[0]=n.coerce(S[0]),typeof S[0]!="string"&&S.unshift("%O");let R=0;S[0]=S[0].replace(/%([a-zA-Z%])/g,(V,q)=>{if(V==="%%")return"%";R++;const ue=n.formatters[q];if(typeof ue=="function"){const g=S[R];V=ue.call(C,g),S.splice(R,1),R--}return V}),n.formatArgs.call(C,S),(C.log||n.log).apply(C,S)}return A.namespace=f,A.useColors=n.useColors(),A.color=n.selectColor(f),A.extend=r,A.destroy=n.destroy,Object.defineProperty(A,"enabled",{enumerable:!0,configurable:!1,get:()=>m!==null?m:(y!==n.namespaces&&(y=n.namespaces,w=n.enabled(f)),w),set:S=>{m=S}}),typeof n.init=="function"&&n.init(A),A}function r(f,c){const m=n(this.namespace+(typeof c>"u"?":":c)+f);return m.log=this.log,m}function i(f){n.save(f),n.namespaces=f,n.names=[],n.skips=[];let c;const m=(typeof f=="string"?f:"").split(/[\s,]+/),y=m.length;for(c=0;c<y;c++)!m[c]||(f=m[c].replace(/\*/g,".*?"),f[0]==="-"?n.skips.push(new RegExp("^"+f.slice(1)+"$")):n.names.push(new RegExp("^"+f+"$")))}function a(){const f=[...n.names.map(s),...n.skips.map(s).map(c=>"-"+c)].join(",");return n.enable(""),f}function o(f){if(f[f.length-1]==="*")return!0;let c,m;for(c=0,m=n.skips.length;c<m;c++)if(n.skips[c].test(f))return!1;for(c=0,m=n.names.length;c<m;c++)if(n.names[c].test(f))return!0;return!1}function s(f){return f.toString().substring(2,f.toString().length-2).replace(/\.\*\?$/,"*")}function l(f){return f instanceof Error?f.stack||f.message:f}function p(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return n.enable(n.load()),n}var Kf=zf;(function(e,t){t.formatArgs=r,t.save=i,t.load=a,t.useColors=n,t.storage=o(),t.destroy=(()=>{let l=!1;return()=>{l||(l=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function n(){return typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(l){if(l[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+l[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const p="color: "+this.color;l.splice(1,0,p,"color: inherit");let f=0,c=0;l[0].replace(/%[a-zA-Z%]/g,m=>{m!=="%%"&&(f++,m==="%c"&&(c=f))}),l.splice(c,0,p)}t.log=console.debug||console.log||(()=>{});function i(l){try{l?t.storage.setItem("debug",l):t.storage.removeItem("debug")}catch{}}function a(){let l;try{l=t.storage.getItem("debug")}catch{}return!l&&typeof process<"u"&&"env"in process&&(l={}.DEBUG),l}function o(){try{return localStorage}catch{}}e.exports=Kf(t);const{formatters:s}=e.exports;s.j=function(l){try{return JSON.stringify(l)}catch(p){return"[UnexpectedJSONParseError]: "+p.message}}})(fa,fa.exports);var er={};Object.defineProperty(er,"__esModule",{value:!0});er.ProgressCallbackTransform=void 0;const Jf=Zn.default;class Qf extends Jf.Transform{constructor(t,n,r){super(),this.total=t,this.cancellationToken=n,this.onProgress=r,this.start=Date.now(),this.transferred=0,this.delta=0,this.nextUpdate=this.start+1e3}_transform(t,n,r){if(this.cancellationToken.cancelled){r(new Error("cancelled"),null);return}this.transferred+=t.length,this.delta+=t.length;const i=Date.now();i>=this.nextUpdate&&this.transferred!==this.total&&(this.nextUpdate=i+1e3,this.onProgress({total:this.total,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.total*100,bytesPerSecond:Math.round(this.transferred/((i-this.start)/1e3))}),this.delta=0),r(null,t)}_flush(t){if(this.cancellationToken.cancelled){t(new Error("cancelled"));return}this.onProgress({total:this.total,delta:this.delta,transferred:this.total,percent:100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))}),this.delta=0,t(null)}}er.ProgressCallbackTransform=Qf;Object.defineProperty(J,"__esModule",{value:!0});J.safeStringifyJson=J.configureRequestOptions=J.safeGetHeader=J.DigestTransform=J.configureRequestUrl=J.configureRequestOptionsFromUrl=J.HttpExecutor=J.parseJson=J.HttpError=J.createHttpError=void 0;const Zf=Qr.default,ed=fa.exports,td=yt.default,nd=Zn.default,pl=xt.default,rd=It,vo=te,id=er,$n=ed.default("electron-builder");function da(e,t=null){return new Oa(e.statusCode||-1,`${e.statusCode} ${e.statusMessage}`+(t==null?"":`
`+JSON.stringify(t,null,"  "))+`
Headers: `+qr(e.headers),t)}J.createHttpError=da;const ad=new Map([[429,"Too many requests"],[400,"Bad request"],[403,"Forbidden"],[404,"Not found"],[405,"Method not allowed"],[406,"Not acceptable"],[408,"Request timeout"],[413,"Request entity too large"],[500,"Internal server error"],[502,"Bad gateway"],[503,"Service unavailable"],[504,"Gateway timeout"],[505,"HTTP version not supported"]]);class Oa extends Error{constructor(t,n=`HTTP error: ${ad.get(t)||t}`,r=null){super(n),this.statusCode=t,this.description=r,this.name="HttpError",this.code=`HTTP_ERROR_${t}`}isServerError(){return this.statusCode>=500&&this.statusCode<=599}}J.HttpError=Oa;function od(e){return e.then(t=>t==null||t.length===0?null:JSON.parse(t))}J.parseJson=od;class Mr{constructor(){this.maxRedirects=10}request(t,n=new rd.CancellationToken,r){Br(t);const i=r==null?void 0:JSON.stringify(r),a=i?Buffer.from(i):void 0;if(a!=null){$n(i);const{headers:o,...s}=t;t={method:"post",headers:{"Content-Type":"application/json","Content-Length":a.length,...o},...s}}return this.doApiRequest(t,n,o=>o.end(a))}doApiRequest(t,n,r,i=0){return $n.enabled&&$n(`Request: ${qr(t)}`),n.createPromise((a,o,s)=>{const l=this.createRequest(t,p=>{try{this.handleResponse(p,t,n,a,o,i,r)}catch(f){o(f)}});this.addErrorAndTimeoutHandlers(l,o),this.addRedirectHandlers(l,t,o,i,p=>{this.doApiRequest(p,n,r,i).then(a).catch(o)}),r(l,o),s(()=>l.abort())})}addRedirectHandlers(t,n,r,i,a){}addErrorAndTimeoutHandlers(t,n){this.addTimeOutHandler(t,n),t.on("error",n),t.on("aborted",()=>{n(new Error("Request has been aborted by the server"))})}handleResponse(t,n,r,i,a,o,s){var l;if($n.enabled&&$n(`Response: ${t.statusCode} ${t.statusMessage}, request options: ${qr(n)}`),t.statusCode===404){a(da(t,`method: ${n.method||"GET"} url: ${n.protocol||"https:"}//${n.hostname}${n.port?`:${n.port}`:""}${n.path}

Please double check that your authentication token is correct. Due to security reasons, actual status maybe not reported, but 404.
`));return}else if(t.statusCode===204){i();return}const p=(l=t.statusCode)!==null&&l!==void 0?l:0,f=p>=300&&p<400,c=Ct(t,"location");if(f&&c!=null){if(o>this.maxRedirects){a(this.createMaxRedirectError());return}this.doApiRequest(Mr.prepareRedirectUrlOptions(c,n),r,s,o).then(i).catch(a);return}t.setEncoding("utf8");let m="";t.on("error",a),t.on("data",y=>m+=y),t.on("end",()=>{try{if(t.statusCode!=null&&t.statusCode>=400){const y=Ct(t,"content-type"),w=y!=null&&(Array.isArray(y)?y.find(A=>A.includes("json"))!=null:y.includes("json"));a(da(t,`method: ${n.method||"GET"} url: ${n.protocol||"https:"}//${n.hostname}${n.port?`:${n.port}`:""}${n.path}

          Data:
          ${w?JSON.stringify(JSON.parse(m)):m}
          `))}else i(m.length===0?null:m)}catch(y){a(y)}})}async downloadToBuffer(t,n){return await n.cancellationToken.createPromise((r,i,a)=>{let o=null;const s={headers:n.headers||void 0,redirect:"manual"};Na(t,s),Br(s),this.doDownload(s,{destination:null,options:n,onCancel:a,callback:l=>{l==null?r(o):i(l)},responseHandler:(l,p)=>{const f=Ct(l,"content-length");let c=-1;if(f!=null){const m=parseInt(f,10);if(m>0){if(m>524288e3){p(new Error("Maximum allowed size is 500 MB"));return}o=Buffer.alloc(m),c=0}}l.on("data",m=>{if(c!==-1)m.copy(o,c),c+=m.length;else if(o==null)o=m;else{if(o.length>524288e3){p(new Error("Maximum allowed size is 500 MB"));return}o=Buffer.concat([o,m])}}),l.on("end",()=>{o!=null&&c!==-1&&c!==o.length?p(new Error(`Received data length ${c} is not equal to expected ${o.length}`)):p(null)})}},0)})}doDownload(t,n,r){const i=this.createRequest(t,a=>{if(a.statusCode>=400){n.callback(new Error(`Cannot download "${t.protocol||"https:"}//${t.hostname}${t.path}", status ${a.statusCode}: ${a.statusMessage}`));return}a.on("error",n.callback);const o=Ct(a,"location");if(o!=null){r<this.maxRedirects?this.doDownload(Mr.prepareRedirectUrlOptions(o,t),n,r++):n.callback(this.createMaxRedirectError());return}n.responseHandler==null?ld(n,a):n.responseHandler(a,n.callback)});this.addErrorAndTimeoutHandlers(i,n.callback),this.addRedirectHandlers(i,t,n.callback,r,a=>{this.doDownload(a,n,r++)}),i.end()}createMaxRedirectError(){return new Error(`Too many redirects (> ${this.maxRedirects})`)}addTimeOutHandler(t,n){t.on("socket",r=>{r.setTimeout(60*1e3,()=>{t.abort(),n(new Error("Request timed out"))})})}static prepareRedirectUrlOptions(t,n){const r=ml(t,{...n}),i=r.headers;if(i!=null&&i.authorization){const a=new pl.URL(t);(a.hostname.endsWith(".amazonaws.com")||a.searchParams.has("X-Amz-Credential"))&&delete i.authorization}return r}static retryOnServerError(t,n=3){for(let r=0;;r++)try{return t()}catch(i){if(r<n&&(i instanceof Oa&&i.isServerError()||i.code==="EPIPE"))continue;throw i}}}J.HttpExecutor=Mr;function ml(e,t){const n=Br(t);return Na(new pl.URL(e),n),n}J.configureRequestOptionsFromUrl=ml;function Na(e,t){t.protocol=e.protocol,t.hostname=e.hostname,e.port?t.port=e.port:t.port&&delete t.port,t.path=e.pathname+e.search}J.configureRequestUrl=Na;class ha extends nd.Transform{constructor(t,n="sha512",r="base64"){super(),this.expected=t,this.algorithm=n,this.encoding=r,this._actual=null,this.isValidateOnEnd=!0,this.digester=Zf.createHash(n)}get actual(){return this._actual}_transform(t,n,r){this.digester.update(t),r(null,t)}_flush(t){if(this._actual=this.digester.digest(this.encoding),this.isValidateOnEnd)try{this.validate()}catch(n){t(n);return}t(null)}validate(){if(this._actual==null)throw vo.newError("Not finished yet","ERR_STREAM_NOT_FINISHED");if(this._actual!==this.expected)throw vo.newError(`${this.algorithm} checksum mismatch, expected ${this.expected}, got ${this._actual}`,"ERR_CHECKSUM_MISMATCH");return null}}J.DigestTransform=ha;function sd(e,t,n){return e!=null&&t!=null&&e!==t?(n(new Error(`checksum mismatch: expected ${t} but got ${e} (X-Checksum-Sha2 header)`)),!1):!0}function Ct(e,t){const n=e.headers[t];return n==null?null:Array.isArray(n)?n.length===0?null:n[n.length-1]:n}J.safeGetHeader=Ct;function ld(e,t){if(!sd(Ct(t,"X-Checksum-Sha2"),e.options.sha2,e.callback))return;const n=[];if(e.options.onProgress!=null){const o=Ct(t,"content-length");o!=null&&n.push(new id.ProgressCallbackTransform(parseInt(o,10),e.options.cancellationToken,e.options.onProgress))}const r=e.options.sha512;r!=null?n.push(new ha(r,"sha512",r.length===128&&!r.includes("+")&&!r.includes("Z")&&!r.includes("=")?"hex":"base64")):e.options.sha2!=null&&n.push(new ha(e.options.sha2,"sha256","hex"));const i=td.createWriteStream(e.destination);n.push(i);let a=t;for(const o of n)o.on("error",s=>{e.options.cancellationToken.cancelled||e.callback(s)}),a=a.pipe(o);i.on("finish",()=>{i.close(e.callback)})}function Br(e,t,n){n!=null&&(e.method=n),e.headers={...e.headers};const r=e.headers;return t!=null&&(r.authorization=t.startsWith("Basic")||t.startsWith("Bearer")?t:`token ${t}`),r["User-Agent"]==null&&(r["User-Agent"]="electron-builder"),(n==null||n==="GET"||r["Cache-Control"]==null)&&(r["Cache-Control"]="no-cache"),e.protocol==null&&process.versions.electron!=null&&(e.protocol="https:"),e}J.configureRequestOptions=Br;function qr(e,t){return JSON.stringify(e,(n,r)=>n.endsWith("Authorization")||n.endsWith("authorization")||n.endsWith("Password")||n.endsWith("PASSWORD")||n.endsWith("Token")||n.includes("password")||n.includes("token")||t!=null&&t.has(n)?"<stripped sensitive data>":r,2)}J.safeStringifyJson=qr;var sn={};Object.defineProperty(sn,"__esModule",{value:!0});sn.getS3LikeProviderBaseUrl=sn.githubUrl=void 0;function ud(e,t="github.com"){return`${e.protocol||"https"}://${e.host||t}`}sn.githubUrl=ud;function cd(e){const t=e.provider;if(t==="s3")return fd(e);if(t==="spaces")return dd(e);throw new Error(`Not supported provider: ${t}`)}sn.getS3LikeProviderBaseUrl=cd;function fd(e){let t;if(e.endpoint!=null)t=`${e.endpoint}/${e.bucket}`;else if(e.bucket.includes(".")){if(e.region==null)throw new Error(`Bucket name "${e.bucket}" includes a dot, but S3 region is missing`);e.region==="us-east-1"?t=`https://s3.amazonaws.com/${e.bucket}`:t=`https://s3-${e.region}.amazonaws.com/${e.bucket}`}else e.region==="cn-north-1"?t=`https://${e.bucket}.s3.${e.region}.amazonaws.com.cn`:t=`https://${e.bucket}.s3.amazonaws.com`;return gl(t,e.path)}function gl(e,t){return t!=null&&t.length>0&&(t.startsWith("/")||(e+="/"),e+=t),e}function dd(e){if(e.name==null)throw new Error("name is missing");if(e.region==null)throw new Error("region is missing");return gl(`https://${e.name}.${e.region}.digitaloceanspaces.com`,e.path)}var ei={};Object.defineProperty(ei,"__esModule",{value:!0});ei.parseDn=void 0;function hd(e){let t=!1,n=null,r="",i=0;e=e.trim();const a=new Map;for(let o=0;o<=e.length;o++){if(o===e.length){n!==null&&a.set(n,r);break}const s=e[o];if(t){if(s==='"'){t=!1;continue}}else{if(s==='"'){t=!0;continue}if(s==="\\"){o++;const l=parseInt(e.slice(o,o+2),16);Number.isNaN(l)?r+=e[o]:(o++,r+=String.fromCharCode(l));continue}if(n===null&&s==="="){n=r,r="";continue}if(s===","||s===";"||s==="+"){n!==null&&a.set(n,r),n=null,r="";continue}}if(s===" "&&!t){if(r.length===0)continue;if(o>i){let l=o;for(;e[l]===" ";)l++;i=l}if(i>=e.length||e[i]===","||e[i]===";"||n===null&&e[i]==="="||n!==null&&e[i]==="+"){o=i-1;continue}}r+=s}return a}ei.parseDn=hd;var ln={};Object.defineProperty(ln,"__esModule",{value:!0});ln.nil=ln.UUID=void 0;const yl=Qr.default,El=te,pd="options.name must be either a string or a Buffer",wo=yl.randomBytes(16);wo[0]=wo[0]|1;const Fr={},x=[];for(let e=0;e<256;e++){const t=(e+256).toString(16).substr(1);Fr[t]=e,x[e]=t}class Dt{constructor(t){this.ascii=null,this.binary=null;const n=Dt.check(t);if(!n)throw new Error("not a UUID");this.version=n.version,n.format==="ascii"?this.ascii=t:this.binary=t}static v5(t,n){return md(t,"sha1",80,n)}toString(){return this.ascii==null&&(this.ascii=gd(this.binary)),this.ascii}inspect(){return`UUID v${this.version} ${this.toString()}`}static check(t,n=0){if(typeof t=="string")return t=t.toLowerCase(),/^[a-f0-9]{8}(-[a-f0-9]{4}){3}-([a-f0-9]{12})$/.test(t)?t==="00000000-0000-0000-0000-000000000000"?{version:void 0,variant:"nil",format:"ascii"}:{version:(Fr[t[14]+t[15]]&240)>>4,variant:_o((Fr[t[19]+t[20]]&224)>>5),format:"ascii"}:!1;if(Buffer.isBuffer(t)){if(t.length<n+16)return!1;let r=0;for(;r<16&&t[n+r]===0;r++);return r===16?{version:void 0,variant:"nil",format:"binary"}:{version:(t[n+6]&240)>>4,variant:_o((t[n+8]&224)>>5),format:"binary"}}throw El.newError("Unknown type of uuid","ERR_UNKNOWN_UUID_TYPE")}static parse(t){const n=Buffer.allocUnsafe(16);let r=0;for(let i=0;i<16;i++)n[i]=Fr[t[r++]+t[r++]],(i===3||i===5||i===7||i===9)&&(r+=1);return n}}ln.UUID=Dt;Dt.OID=Dt.parse("6ba7b812-9dad-11d1-80b4-00c04fd430c8");function _o(e){switch(e){case 0:case 1:case 3:return"ncs";case 4:case 5:return"rfc4122";case 6:return"microsoft";default:return"future"}}var xn;(function(e){e[e.ASCII=0]="ASCII",e[e.BINARY=1]="BINARY",e[e.OBJECT=2]="OBJECT"})(xn||(xn={}));function md(e,t,n,r,i=xn.ASCII){const a=yl.createHash(t);if(typeof e!="string"&&!Buffer.isBuffer(e))throw El.newError(pd,"ERR_INVALID_UUID_NAME");a.update(r),a.update(e);const s=a.digest();let l;switch(i){case xn.BINARY:s[6]=s[6]&15|n,s[8]=s[8]&63|128,l=s;break;case xn.OBJECT:s[6]=s[6]&15|n,s[8]=s[8]&63|128,l=new Dt(s);break;default:l=x[s[0]]+x[s[1]]+x[s[2]]+x[s[3]]+"-"+x[s[4]]+x[s[5]]+"-"+x[s[6]&15|n]+x[s[7]]+"-"+x[s[8]&63|128]+x[s[9]]+"-"+x[s[10]]+x[s[11]]+x[s[12]]+x[s[13]]+x[s[14]]+x[s[15]];break}return l}function gd(e){return x[e[0]]+x[e[1]]+x[e[2]]+x[e[3]]+"-"+x[e[4]]+x[e[5]]+"-"+x[e[6]]+x[e[7]]+"-"+x[e[8]]+x[e[9]]+"-"+x[e[10]]+x[e[11]]+x[e[12]]+x[e[13]]+x[e[14]]+x[e[15]]}ln.nil=new Dt("00000000-0000-0000-0000-000000000000");var un={},vl={};(function(e){(function(t){t.parser=function(d,u){return new r(d,u)},t.SAXParser=r,t.SAXStream=f,t.createStream=p,t.MAX_BUFFER_LENGTH=64*1024;var n=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];t.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"];function r(d,u){if(!(this instanceof r))return new r(d,u);var _=this;a(_),_.q=_.c="",_.bufferCheckPosition=t.MAX_BUFFER_LENGTH,_.opt=u||{},_.opt.lowercase=_.opt.lowercase||_.opt.lowercasetags,_.looseCase=_.opt.lowercase?"toLowerCase":"toUpperCase",_.tags=[],_.closed=_.closedRoot=_.sawRoot=!1,_.tag=_.error=null,_.strict=!!d,_.noscript=!!(d||_.opt.noscript),_.state=g.BEGIN,_.strictEntities=_.opt.strictEntities,_.ENTITIES=_.strictEntities?Object.create(t.XML_ENTITIES):Object.create(t.ENTITIES),_.attribList=[],_.opt.xmlns&&(_.ns=Object.create(A)),_.trackPosition=_.opt.position!==!1,_.trackPosition&&(_.position=_.line=_.column=0),P(_,"onready")}Object.create||(Object.create=function(d){function u(){}u.prototype=d;var _=new u;return _}),Object.keys||(Object.keys=function(d){var u=[];for(var _ in d)d.hasOwnProperty(_)&&u.push(_);return u});function i(d){for(var u=Math.max(t.MAX_BUFFER_LENGTH,10),_=0,v=0,U=n.length;v<U;v++){var z=d[n[v]].length;if(z>u)switch(n[v]){case"textNode":Y(d);break;case"cdata":I(d,"oncdata",d.cdata),d.cdata="";break;case"script":I(d,"onscript",d.script),d.script="";break;default:M(d,"Max buffer length exceeded: "+n[v])}_=Math.max(_,z)}var re=t.MAX_BUFFER_LENGTH-_;d.bufferCheckPosition=re+d.position}function a(d){for(var u=0,_=n.length;u<_;u++)d[n[u]]=""}function o(d){Y(d),d.cdata!==""&&(I(d,"oncdata",d.cdata),d.cdata=""),d.script!==""&&(I(d,"onscript",d.script),d.script="")}r.prototype={end:function(){j(this)},write:ur,resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){o(this)}};var s;try{s=require("stream").Stream}catch{s=function(){}}var l=t.EVENTS.filter(function(d){return d!=="error"&&d!=="end"});function p(d,u){return new f(d,u)}function f(d,u){if(!(this instanceof f))return new f(d,u);s.apply(this),this._parser=new r(d,u),this.writable=!0,this.readable=!0;var _=this;this._parser.onend=function(){_.emit("end")},this._parser.onerror=function(v){_.emit("error",v),_._parser.error=null},this._decoder=null,l.forEach(function(v){Object.defineProperty(_,"on"+v,{get:function(){return _._parser["on"+v]},set:function(U){if(!U)return _.removeAllListeners(v),_._parser["on"+v]=U,U;_.on(v,U)},enumerable:!0,configurable:!1})})}f.prototype=Object.create(s.prototype,{constructor:{value:f}}),f.prototype.write=function(d){if(typeof Buffer=="function"&&typeof Buffer.isBuffer=="function"&&Buffer.isBuffer(d)){if(!this._decoder){var u=Lf.default.StringDecoder;this._decoder=new u("utf8")}d=this._decoder.write(d)}return this._parser.write(d.toString()),this.emit("data",d),!0},f.prototype.end=function(d){return d&&d.length&&this.write(d),this._parser.end(),!0},f.prototype.on=function(d,u){var _=this;return!_._parser["on"+d]&&l.indexOf(d)!==-1&&(_._parser["on"+d]=function(){var v=arguments.length===1?[arguments[0]]:Array.apply(null,arguments);v.splice(0,0,d),_.emit.apply(_,v)}),s.prototype.on.call(_,d,u)};var c="[CDATA[",m="DOCTYPE",y="http://www.w3.org/XML/1998/namespace",w="http://www.w3.org/2000/xmlns/",A={xml:y,xmlns:w},S=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,C=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,$=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,L=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function R(d){return d===" "||d===`
`||d==="\r"||d==="	"}function se(d){return d==='"'||d==="'"}function V(d){return d===">"||R(d)}function q(d,u){return d.test(u)}function ue(d,u){return!q(d,u)}var g=0;t.STATE={BEGIN:g++,BEGIN_WHITESPACE:g++,TEXT:g++,TEXT_ENTITY:g++,OPEN_WAKA:g++,SGML_DECL:g++,SGML_DECL_QUOTED:g++,DOCTYPE:g++,DOCTYPE_QUOTED:g++,DOCTYPE_DTD:g++,DOCTYPE_DTD_QUOTED:g++,COMMENT_STARTING:g++,COMMENT:g++,COMMENT_ENDING:g++,COMMENT_ENDED:g++,CDATA:g++,CDATA_ENDING:g++,CDATA_ENDING_2:g++,PROC_INST:g++,PROC_INST_BODY:g++,PROC_INST_ENDING:g++,OPEN_TAG:g++,OPEN_TAG_SLASH:g++,ATTRIB:g++,ATTRIB_NAME:g++,ATTRIB_NAME_SAW_WHITE:g++,ATTRIB_VALUE:g++,ATTRIB_VALUE_QUOTED:g++,ATTRIB_VALUE_CLOSED:g++,ATTRIB_VALUE_UNQUOTED:g++,ATTRIB_VALUE_ENTITY_Q:g++,ATTRIB_VALUE_ENTITY_U:g++,CLOSE_TAG:g++,CLOSE_TAG_SAW_WHITE:g++,SCRIPT:g++,SCRIPT_ENDING:g++},t.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},t.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(t.ENTITIES).forEach(function(d){var u=t.ENTITIES[d],_=typeof u=="number"?String.fromCharCode(u):u;t.ENTITIES[d]=_});for(var F in t.STATE)t.STATE[t.STATE[F]]=F;g=t.STATE;function P(d,u,_){d[u]&&d[u](_)}function I(d,u,_){d.textNode&&Y(d),P(d,u,_)}function Y(d){d.textNode=X(d.opt,d.textNode),d.textNode&&P(d,"ontext",d.textNode),d.textNode=""}function X(d,u){return d.trim&&(u=u.trim()),d.normalize&&(u=u.replace(/\s+/g," ")),u}function M(d,u){return Y(d),d.trackPosition&&(u+=`
Line: `+d.line+`
Column: `+d.column+`
Char: `+d.c),u=new Error(u),d.error=u,P(d,"onerror",u),d}function j(d){return d.sawRoot&&!d.closedRoot&&O(d,"Unclosed root tag"),d.state!==g.BEGIN&&d.state!==g.BEGIN_WHITESPACE&&d.state!==g.TEXT&&M(d,"Unexpected end"),Y(d),d.c="",d.closed=!0,P(d,"onend"),r.call(d,d.strict,d.opt),d}function O(d,u){if(typeof d!="object"||!(d instanceof r))throw new Error("bad call to strictFail");d.strict&&M(d,u)}function ne(d){d.strict||(d.tagName=d.tagName[d.looseCase]());var u=d.tags[d.tags.length-1]||d,_=d.tag={name:d.tagName,attributes:{}};d.opt.xmlns&&(_.ns=u.ns),d.attribList.length=0,I(d,"onopentagstart",_)}function B(d,u){var _=d.indexOf(":"),v=_<0?["",d]:d.split(":"),U=v[0],z=v[1];return u&&d==="xmlns"&&(U="xmlns",z=""),{prefix:U,local:z}}function Mt(d){if(d.strict||(d.attribName=d.attribName[d.looseCase]()),d.attribList.indexOf(d.attribName)!==-1||d.tag.attributes.hasOwnProperty(d.attribName)){d.attribName=d.attribValue="";return}if(d.opt.xmlns){var u=B(d.attribName,!0),_=u.prefix,v=u.local;if(_==="xmlns")if(v==="xml"&&d.attribValue!==y)O(d,"xml: prefix must be bound to "+y+`
Actual: `+d.attribValue);else if(v==="xmlns"&&d.attribValue!==w)O(d,"xmlns: prefix must be bound to "+w+`
Actual: `+d.attribValue);else{var U=d.tag,z=d.tags[d.tags.length-1]||d;U.ns===z.ns&&(U.ns=Object.create(z.ns)),U.ns[v]=d.attribValue}d.attribList.push([d.attribName,d.attribValue])}else d.tag.attributes[d.attribName]=d.attribValue,I(d,"onattribute",{name:d.attribName,value:d.attribValue});d.attribName=d.attribValue=""}function ze(d,u){if(d.opt.xmlns){var _=d.tag,v=B(d.tagName);_.prefix=v.prefix,_.local=v.local,_.uri=_.ns[v.prefix]||"",_.prefix&&!_.uri&&(O(d,"Unbound namespace prefix: "+JSON.stringify(d.tagName)),_.uri=v.prefix);var U=d.tags[d.tags.length-1]||d;_.ns&&U.ns!==_.ns&&Object.keys(_.ns).forEach(function(fr){I(d,"onopennamespace",{prefix:fr,uri:_.ns[fr]})});for(var z=0,re=d.attribList.length;z<re;z++){var he=d.attribList[z],Fe=he[0],rt=he[1],le=B(Fe,!0),Ue=le.prefix,Ci=le.local,cr=Ue===""?"":_.ns[Ue]||"",wn={name:Fe,value:rt,prefix:Ue,local:Ci,uri:cr};Ue&&Ue!=="xmlns"&&!cr&&(O(d,"Unbound namespace prefix: "+JSON.stringify(Ue)),wn.uri=Ue),d.tag.attributes[Fe]=wn,I(d,"onattribute",wn)}d.attribList.length=0}d.tag.isSelfClosing=!!u,d.sawRoot=!0,d.tags.push(d.tag),I(d,"onopentag",d.tag),u||(!d.noscript&&d.tagName.toLowerCase()==="script"?d.state=g.SCRIPT:d.state=g.TEXT,d.tag=null,d.tagName=""),d.attribName=d.attribValue="",d.attribList.length=0}function vn(d){if(!d.tagName){O(d,"Weird empty close tag."),d.textNode+="</>",d.state=g.TEXT;return}if(d.script){if(d.tagName!=="script"){d.script+="</"+d.tagName+">",d.tagName="",d.state=g.SCRIPT;return}I(d,"onscript",d.script),d.script=""}var u=d.tags.length,_=d.tagName;d.strict||(_=_[d.looseCase]());for(var v=_;u--;){var U=d.tags[u];if(U.name!==v)O(d,"Unexpected close tag");else break}if(u<0){O(d,"Unmatched closing tag: "+d.tagName),d.textNode+="</"+d.tagName+">",d.state=g.TEXT;return}d.tagName=_;for(var z=d.tags.length;z-- >u;){var re=d.tag=d.tags.pop();d.tagName=d.tag.name,I(d,"onclosetag",d.tagName);var he={};for(var Fe in re.ns)he[Fe]=re.ns[Fe];var rt=d.tags[d.tags.length-1]||d;d.opt.xmlns&&re.ns!==rt.ns&&Object.keys(re.ns).forEach(function(le){var Ue=re.ns[le];I(d,"onclosenamespace",{prefix:le,uri:Ue})})}u===0&&(d.closedRoot=!0),d.tagName=d.attribValue=d.attribName="",d.attribList.length=0,d.state=g.TEXT}function $i(d){var u=d.entity,_=u.toLowerCase(),v,U="";return d.ENTITIES[u]?d.ENTITIES[u]:d.ENTITIES[_]?d.ENTITIES[_]:(u=_,u.charAt(0)==="#"&&(u.charAt(1)==="x"?(u=u.slice(2),v=parseInt(u,16),U=v.toString(16)):(u=u.slice(1),v=parseInt(u,10),U=v.toString(10))),u=u.replace(/^0+/,""),isNaN(v)||U.toLowerCase()!==u?(O(d,"Invalid character entity"),"&"+d.entity+";"):String.fromCodePoint(v))}function lr(d,u){u==="<"?(d.state=g.OPEN_WAKA,d.startTagPosition=d.position):R(u)||(O(d,"Non-whitespace before first tag."),d.textNode=u,d.state=g.TEXT)}function H(d,u){var _="";return u<d.length&&(_=d.charAt(u)),_}function ur(d){var u=this;if(this.error)throw this.error;if(u.closed)return M(u,"Cannot write after close. Assign an onready handler.");if(d===null)return j(u);typeof d=="object"&&(d=d.toString());for(var _=0,v="";v=H(d,_++),u.c=v,!!v;)switch(u.trackPosition&&(u.position++,v===`
`?(u.line++,u.column=0):u.column++),u.state){case g.BEGIN:if(u.state=g.BEGIN_WHITESPACE,v==="\uFEFF")continue;lr(u,v);continue;case g.BEGIN_WHITESPACE:lr(u,v);continue;case g.TEXT:if(u.sawRoot&&!u.closedRoot){for(var U=_-1;v&&v!=="<"&&v!=="&";)v=H(d,_++),v&&u.trackPosition&&(u.position++,v===`
`?(u.line++,u.column=0):u.column++);u.textNode+=d.substring(U,_-1)}v==="<"&&!(u.sawRoot&&u.closedRoot&&!u.strict)?(u.state=g.OPEN_WAKA,u.startTagPosition=u.position):(!R(v)&&(!u.sawRoot||u.closedRoot)&&O(u,"Text data outside of root node."),v==="&"?u.state=g.TEXT_ENTITY:u.textNode+=v);continue;case g.SCRIPT:v==="<"?u.state=g.SCRIPT_ENDING:u.script+=v;continue;case g.SCRIPT_ENDING:v==="/"?u.state=g.CLOSE_TAG:(u.script+="<"+v,u.state=g.SCRIPT);continue;case g.OPEN_WAKA:if(v==="!")u.state=g.SGML_DECL,u.sgmlDecl="";else if(!R(v))if(q(S,v))u.state=g.OPEN_TAG,u.tagName=v;else if(v==="/")u.state=g.CLOSE_TAG,u.tagName="";else if(v==="?")u.state=g.PROC_INST,u.procInstName=u.procInstBody="";else{if(O(u,"Unencoded <"),u.startTagPosition+1<u.position){var z=u.position-u.startTagPosition;v=new Array(z).join(" ")+v}u.textNode+="<"+v,u.state=g.TEXT}continue;case g.SGML_DECL:(u.sgmlDecl+v).toUpperCase()===c?(I(u,"onopencdata"),u.state=g.CDATA,u.sgmlDecl="",u.cdata=""):u.sgmlDecl+v==="--"?(u.state=g.COMMENT,u.comment="",u.sgmlDecl=""):(u.sgmlDecl+v).toUpperCase()===m?(u.state=g.DOCTYPE,(u.doctype||u.sawRoot)&&O(u,"Inappropriately located doctype declaration"),u.doctype="",u.sgmlDecl=""):v===">"?(I(u,"onsgmldeclaration",u.sgmlDecl),u.sgmlDecl="",u.state=g.TEXT):(se(v)&&(u.state=g.SGML_DECL_QUOTED),u.sgmlDecl+=v);continue;case g.SGML_DECL_QUOTED:v===u.q&&(u.state=g.SGML_DECL,u.q=""),u.sgmlDecl+=v;continue;case g.DOCTYPE:v===">"?(u.state=g.TEXT,I(u,"ondoctype",u.doctype),u.doctype=!0):(u.doctype+=v,v==="["?u.state=g.DOCTYPE_DTD:se(v)&&(u.state=g.DOCTYPE_QUOTED,u.q=v));continue;case g.DOCTYPE_QUOTED:u.doctype+=v,v===u.q&&(u.q="",u.state=g.DOCTYPE);continue;case g.DOCTYPE_DTD:u.doctype+=v,v==="]"?u.state=g.DOCTYPE:se(v)&&(u.state=g.DOCTYPE_DTD_QUOTED,u.q=v);continue;case g.DOCTYPE_DTD_QUOTED:u.doctype+=v,v===u.q&&(u.state=g.DOCTYPE_DTD,u.q="");continue;case g.COMMENT:v==="-"?u.state=g.COMMENT_ENDING:u.comment+=v;continue;case g.COMMENT_ENDING:v==="-"?(u.state=g.COMMENT_ENDED,u.comment=X(u.opt,u.comment),u.comment&&I(u,"oncomment",u.comment),u.comment=""):(u.comment+="-"+v,u.state=g.COMMENT);continue;case g.COMMENT_ENDED:v!==">"?(O(u,"Malformed comment"),u.comment+="--"+v,u.state=g.COMMENT):u.state=g.TEXT;continue;case g.CDATA:v==="]"?u.state=g.CDATA_ENDING:u.cdata+=v;continue;case g.CDATA_ENDING:v==="]"?u.state=g.CDATA_ENDING_2:(u.cdata+="]"+v,u.state=g.CDATA);continue;case g.CDATA_ENDING_2:v===">"?(u.cdata&&I(u,"oncdata",u.cdata),I(u,"onclosecdata"),u.cdata="",u.state=g.TEXT):v==="]"?u.cdata+="]":(u.cdata+="]]"+v,u.state=g.CDATA);continue;case g.PROC_INST:v==="?"?u.state=g.PROC_INST_ENDING:R(v)?u.state=g.PROC_INST_BODY:u.procInstName+=v;continue;case g.PROC_INST_BODY:if(!u.procInstBody&&R(v))continue;v==="?"?u.state=g.PROC_INST_ENDING:u.procInstBody+=v;continue;case g.PROC_INST_ENDING:v===">"?(I(u,"onprocessinginstruction",{name:u.procInstName,body:u.procInstBody}),u.procInstName=u.procInstBody="",u.state=g.TEXT):(u.procInstBody+="?"+v,u.state=g.PROC_INST_BODY);continue;case g.OPEN_TAG:q(C,v)?u.tagName+=v:(ne(u),v===">"?ze(u):v==="/"?u.state=g.OPEN_TAG_SLASH:(R(v)||O(u,"Invalid character in tag name"),u.state=g.ATTRIB));continue;case g.OPEN_TAG_SLASH:v===">"?(ze(u,!0),vn(u)):(O(u,"Forward-slash in opening tag not followed by >"),u.state=g.ATTRIB);continue;case g.ATTRIB:if(R(v))continue;v===">"?ze(u):v==="/"?u.state=g.OPEN_TAG_SLASH:q(S,v)?(u.attribName=v,u.attribValue="",u.state=g.ATTRIB_NAME):O(u,"Invalid attribute name");continue;case g.ATTRIB_NAME:v==="="?u.state=g.ATTRIB_VALUE:v===">"?(O(u,"Attribute without value"),u.attribValue=u.attribName,Mt(u),ze(u)):R(v)?u.state=g.ATTRIB_NAME_SAW_WHITE:q(C,v)?u.attribName+=v:O(u,"Invalid attribute name");continue;case g.ATTRIB_NAME_SAW_WHITE:if(v==="=")u.state=g.ATTRIB_VALUE;else{if(R(v))continue;O(u,"Attribute without value"),u.tag.attributes[u.attribName]="",u.attribValue="",I(u,"onattribute",{name:u.attribName,value:""}),u.attribName="",v===">"?ze(u):q(S,v)?(u.attribName=v,u.state=g.ATTRIB_NAME):(O(u,"Invalid attribute name"),u.state=g.ATTRIB)}continue;case g.ATTRIB_VALUE:if(R(v))continue;se(v)?(u.q=v,u.state=g.ATTRIB_VALUE_QUOTED):(O(u,"Unquoted attribute value"),u.state=g.ATTRIB_VALUE_UNQUOTED,u.attribValue=v);continue;case g.ATTRIB_VALUE_QUOTED:if(v!==u.q){v==="&"?u.state=g.ATTRIB_VALUE_ENTITY_Q:u.attribValue+=v;continue}Mt(u),u.q="",u.state=g.ATTRIB_VALUE_CLOSED;continue;case g.ATTRIB_VALUE_CLOSED:R(v)?u.state=g.ATTRIB:v===">"?ze(u):v==="/"?u.state=g.OPEN_TAG_SLASH:q(S,v)?(O(u,"No whitespace between attributes"),u.attribName=v,u.attribValue="",u.state=g.ATTRIB_NAME):O(u,"Invalid attribute name");continue;case g.ATTRIB_VALUE_UNQUOTED:if(!V(v)){v==="&"?u.state=g.ATTRIB_VALUE_ENTITY_U:u.attribValue+=v;continue}Mt(u),v===">"?ze(u):u.state=g.ATTRIB;continue;case g.CLOSE_TAG:if(u.tagName)v===">"?vn(u):q(C,v)?u.tagName+=v:u.script?(u.script+="</"+u.tagName,u.tagName="",u.state=g.SCRIPT):(R(v)||O(u,"Invalid tagname in closing tag"),u.state=g.CLOSE_TAG_SAW_WHITE);else{if(R(v))continue;ue(S,v)?u.script?(u.script+="</"+v,u.state=g.SCRIPT):O(u,"Invalid tagname in closing tag."):u.tagName=v}continue;case g.CLOSE_TAG_SAW_WHITE:if(R(v))continue;v===">"?vn(u):O(u,"Invalid characters in closing tag");continue;case g.TEXT_ENTITY:case g.ATTRIB_VALUE_ENTITY_Q:case g.ATTRIB_VALUE_ENTITY_U:var re,he;switch(u.state){case g.TEXT_ENTITY:re=g.TEXT,he="textNode";break;case g.ATTRIB_VALUE_ENTITY_Q:re=g.ATTRIB_VALUE_QUOTED,he="attribValue";break;case g.ATTRIB_VALUE_ENTITY_U:re=g.ATTRIB_VALUE_UNQUOTED,he="attribValue";break}v===";"?(u[he]+=$i(u),u.entity="",u.state=re):q(u.entity.length?L:$,v)?u.entity+=v:(O(u,"Invalid character in entity name"),u[he]+="&"+u.entity+v,u.entity="",u.state=re);continue;default:throw new Error(u,"Unknown state: "+u.state)}return u.position>=u.bufferCheckPosition&&i(u),u}/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */String.fromCodePoint||function(){var d=String.fromCharCode,u=Math.floor,_=function(){var v=16384,U=[],z,re,he=-1,Fe=arguments.length;if(!Fe)return"";for(var rt="";++he<Fe;){var le=Number(arguments[he]);if(!isFinite(le)||le<0||le>1114111||u(le)!==le)throw RangeError("Invalid code point: "+le);le<=65535?U.push(le):(le-=65536,z=(le>>10)+55296,re=le%1024+56320,U.push(z,re)),(he+1===Fe||U.length>v)&&(rt+=d.apply(null,U),U.length=0)}return rt};Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:_,configurable:!0,writable:!0}):String.fromCodePoint=_}()})(e)})(vl);Object.defineProperty(un,"__esModule",{value:!0});un.parseXml=un.XElement=void 0;const yd=vl,_r=te;class wl{constructor(t){if(this.name=t,this.value="",this.attributes=null,this.isCData=!1,this.elements=null,!t)throw _r.newError("Element name cannot be empty","ERR_XML_ELEMENT_NAME_EMPTY");if(!vd(t))throw _r.newError(`Invalid element name: ${t}`,"ERR_XML_ELEMENT_INVALID_NAME")}attribute(t){const n=this.attributes===null?null:this.attributes[t];if(n==null)throw _r.newError(`No attribute "${t}"`,"ERR_XML_MISSED_ATTRIBUTE");return n}removeAttribute(t){this.attributes!==null&&delete this.attributes[t]}element(t,n=!1,r=null){const i=this.elementOrNull(t,n);if(i===null)throw _r.newError(r||`No element "${t}"`,"ERR_XML_MISSED_ELEMENT");return i}elementOrNull(t,n=!1){if(this.elements===null)return null;for(const r of this.elements)if(To(r,t,n))return r;return null}getElements(t,n=!1){return this.elements===null?[]:this.elements.filter(r=>To(r,t,n))}elementValueOrEmpty(t,n=!1){const r=this.elementOrNull(t,n);return r===null?"":r.value}}un.XElement=wl;const Ed=new RegExp(/^[A-Za-z_][:A-Za-z0-9_-]*$/i);function vd(e){return Ed.test(e)}function To(e,t,n){const r=e.name;return r===t||n===!0&&r.length===t.length&&r.toLowerCase()===t.toLowerCase()}function wd(e){let t=null;const n=yd.parser(!0,{}),r=[];return n.onopentag=i=>{const a=new wl(i.name);if(a.attributes=i.attributes,t===null)t=a;else{const o=r[r.length-1];o.elements==null&&(o.elements=[]),o.elements.push(a)}r.push(a)},n.onclosetag=()=>{r.pop()},n.ontext=i=>{r.length>0&&(r[r.length-1].value=i)},n.oncdata=i=>{const a=r[r.length-1];a.value=i,a.isCData=!0},n.onerror=i=>{throw i},n.write(e),t}un.parseXml=wd;(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.newError=e.asArray=e.CURRENT_APP_PACKAGE_FILE_NAME=e.CURRENT_APP_INSTALLER_FILE_NAME=e.XElement=e.parseXml=e.ProgressCallbackTransform=e.UUID=e.parseDn=e.githubUrl=e.getS3LikeProviderBaseUrl=e.configureRequestUrl=e.parseJson=e.safeStringifyJson=e.configureRequestOptionsFromUrl=e.configureRequestOptions=e.safeGetHeader=e.DigestTransform=e.HttpExecutor=e.createHttpError=e.HttpError=e.CancellationError=e.CancellationToken=void 0;var t=It;Object.defineProperty(e,"CancellationToken",{enumerable:!0,get:function(){return t.CancellationToken}}),Object.defineProperty(e,"CancellationError",{enumerable:!0,get:function(){return t.CancellationError}});var n=J;Object.defineProperty(e,"HttpError",{enumerable:!0,get:function(){return n.HttpError}}),Object.defineProperty(e,"createHttpError",{enumerable:!0,get:function(){return n.createHttpError}}),Object.defineProperty(e,"HttpExecutor",{enumerable:!0,get:function(){return n.HttpExecutor}}),Object.defineProperty(e,"DigestTransform",{enumerable:!0,get:function(){return n.DigestTransform}}),Object.defineProperty(e,"safeGetHeader",{enumerable:!0,get:function(){return n.safeGetHeader}}),Object.defineProperty(e,"configureRequestOptions",{enumerable:!0,get:function(){return n.configureRequestOptions}}),Object.defineProperty(e,"configureRequestOptionsFromUrl",{enumerable:!0,get:function(){return n.configureRequestOptionsFromUrl}}),Object.defineProperty(e,"safeStringifyJson",{enumerable:!0,get:function(){return n.safeStringifyJson}}),Object.defineProperty(e,"parseJson",{enumerable:!0,get:function(){return n.parseJson}}),Object.defineProperty(e,"configureRequestUrl",{enumerable:!0,get:function(){return n.configureRequestUrl}});var r=sn;Object.defineProperty(e,"getS3LikeProviderBaseUrl",{enumerable:!0,get:function(){return r.getS3LikeProviderBaseUrl}}),Object.defineProperty(e,"githubUrl",{enumerable:!0,get:function(){return r.githubUrl}});var i=ei;Object.defineProperty(e,"parseDn",{enumerable:!0,get:function(){return i.parseDn}});var a=ln;Object.defineProperty(e,"UUID",{enumerable:!0,get:function(){return a.UUID}});var o=er;Object.defineProperty(e,"ProgressCallbackTransform",{enumerable:!0,get:function(){return o.ProgressCallbackTransform}});var s=un;Object.defineProperty(e,"parseXml",{enumerable:!0,get:function(){return s.parseXml}}),Object.defineProperty(e,"XElement",{enumerable:!0,get:function(){return s.XElement}}),e.CURRENT_APP_INSTALLER_FILE_NAME="installer.exe",e.CURRENT_APP_PACKAGE_FILE_NAME="package.7z";function l(f){return f==null?[]:Array.isArray(f)?f:[f]}e.asArray=l;function p(f,c){const m=new Error(f);return m.code=c,m}e.newError=p})(te);var ht={},Lt={},$e={};$e.fromCallback=function(e){return Object.defineProperty(function(...t){if(typeof t[t.length-1]=="function")e.apply(this,t);else return new Promise((n,r)=>{e.call(this,...t,(i,a)=>i!=null?r(i):n(a))})},"name",{value:e.name})};$e.fromPromise=function(e){return Object.defineProperty(function(...t){const n=t[t.length-1];if(typeof n!="function")return e.apply(this,t);e.apply(this,t.slice(0,-1)).then(r=>n(null,r),n)},"name",{value:e.name})};var st=Uf.default,_d=process.cwd,xr=null,Td={}.GRACEFUL_FS_PLATFORM||process.platform;process.cwd=function(){return xr||(xr=_d.call(process)),xr};try{process.cwd()}catch{}if(typeof process.chdir=="function"){var Ao=process.chdir;process.chdir=function(e){xr=null,Ao.call(process,e)},Object.setPrototypeOf&&Object.setPrototypeOf(process.chdir,Ao)}var Ad=Sd;function Sd(e){st.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&t(e),e.lutimes||n(e),e.chown=a(e.chown),e.fchown=a(e.fchown),e.lchown=a(e.lchown),e.chmod=r(e.chmod),e.fchmod=r(e.fchmod),e.lchmod=r(e.lchmod),e.chownSync=o(e.chownSync),e.fchownSync=o(e.fchownSync),e.lchownSync=o(e.lchownSync),e.chmodSync=i(e.chmodSync),e.fchmodSync=i(e.fchmodSync),e.lchmodSync=i(e.lchmodSync),e.stat=s(e.stat),e.fstat=s(e.fstat),e.lstat=s(e.lstat),e.statSync=l(e.statSync),e.fstatSync=l(e.fstatSync),e.lstatSync=l(e.lstatSync),e.chmod&&!e.lchmod&&(e.lchmod=function(f,c,m){m&&process.nextTick(m)},e.lchmodSync=function(){}),e.chown&&!e.lchown&&(e.lchown=function(f,c,m,y){y&&process.nextTick(y)},e.lchownSync=function(){}),Td==="win32"&&(e.rename=typeof e.rename!="function"?e.rename:function(f){function c(m,y,w){var A=Date.now(),S=0;f(m,y,function C($){if($&&($.code==="EACCES"||$.code==="EPERM")&&Date.now()-A<6e4){setTimeout(function(){e.stat(y,function(L,R){L&&L.code==="ENOENT"?f(m,y,C):w($)})},S),S<100&&(S+=10);return}w&&w($)})}return Object.setPrototypeOf&&Object.setPrototypeOf(c,f),c}(e.rename)),e.read=typeof e.read!="function"?e.read:function(f){function c(m,y,w,A,S,C){var $;if(C&&typeof C=="function"){var L=0;$=function(R,se,V){if(R&&R.code==="EAGAIN"&&L<10)return L++,f.call(e,m,y,w,A,S,$);C.apply(this,arguments)}}return f.call(e,m,y,w,A,S,$)}return Object.setPrototypeOf&&Object.setPrototypeOf(c,f),c}(e.read),e.readSync=typeof e.readSync!="function"?e.readSync:function(f){return function(c,m,y,w,A){for(var S=0;;)try{return f.call(e,c,m,y,w,A)}catch(C){if(C.code==="EAGAIN"&&S<10){S++;continue}throw C}}}(e.readSync);function t(f){f.lchmod=function(c,m,y){f.open(c,st.O_WRONLY|st.O_SYMLINK,m,function(w,A){if(w){y&&y(w);return}f.fchmod(A,m,function(S){f.close(A,function(C){y&&y(S||C)})})})},f.lchmodSync=function(c,m){var y=f.openSync(c,st.O_WRONLY|st.O_SYMLINK,m),w=!0,A;try{A=f.fchmodSync(y,m),w=!1}finally{if(w)try{f.closeSync(y)}catch{}else f.closeSync(y)}return A}}function n(f){st.hasOwnProperty("O_SYMLINK")&&f.futimes?(f.lutimes=function(c,m,y,w){f.open(c,st.O_SYMLINK,function(A,S){if(A){w&&w(A);return}f.futimes(S,m,y,function(C){f.close(S,function($){w&&w(C||$)})})})},f.lutimesSync=function(c,m,y){var w=f.openSync(c,st.O_SYMLINK),A,S=!0;try{A=f.futimesSync(w,m,y),S=!1}finally{if(S)try{f.closeSync(w)}catch{}else f.closeSync(w)}return A}):f.futimes&&(f.lutimes=function(c,m,y,w){w&&process.nextTick(w)},f.lutimesSync=function(){})}function r(f){return f&&function(c,m,y){return f.call(e,c,m,function(w){p(w)&&(w=null),y&&y.apply(this,arguments)})}}function i(f){return f&&function(c,m){try{return f.call(e,c,m)}catch(y){if(!p(y))throw y}}}function a(f){return f&&function(c,m,y,w){return f.call(e,c,m,y,function(A){p(A)&&(A=null),w&&w.apply(this,arguments)})}}function o(f){return f&&function(c,m,y){try{return f.call(e,c,m,y)}catch(w){if(!p(w))throw w}}}function s(f){return f&&function(c,m,y){typeof m=="function"&&(y=m,m=null);function w(A,S){S&&(S.uid<0&&(S.uid+=4294967296),S.gid<0&&(S.gid+=4294967296)),y&&y.apply(this,arguments)}return m?f.call(e,c,m,w):f.call(e,c,w)}}function l(f){return f&&function(c,m){var y=m?f.call(e,c,m):f.call(e,c);return y&&(y.uid<0&&(y.uid+=4294967296),y.gid<0&&(y.gid+=4294967296)),y}}function p(f){if(!f||f.code==="ENOSYS")return!0;var c=!process.getuid||process.getuid()!==0;return!!(c&&(f.code==="EINVAL"||f.code==="EPERM"))}}var So=Zn.default.Stream,$d=Cd;function Cd(e){return{ReadStream:t,WriteStream:n};function t(r,i){if(!(this instanceof t))return new t(r,i);So.call(this);var a=this;this.path=r,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=64*1024,i=i||{};for(var o=Object.keys(i),s=0,l=o.length;s<l;s++){var p=o[s];this[p]=i[p]}if(this.encoding&&this.setEncoding(this.encoding),this.start!==void 0){if(typeof this.start!="number")throw TypeError("start must be a Number");if(this.end===void 0)this.end=1/0;else if(typeof this.end!="number")throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}if(this.fd!==null){process.nextTick(function(){a._read()});return}e.open(this.path,this.flags,this.mode,function(f,c){if(f){a.emit("error",f),a.readable=!1;return}a.fd=c,a.emit("open",c),a._read()})}function n(r,i){if(!(this instanceof n))return new n(r,i);So.call(this),this.path=r,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,i=i||{};for(var a=Object.keys(i),o=0,s=a.length;o<s;o++){var l=a[o];this[l]=i[l]}if(this.start!==void 0){if(typeof this.start!="number")throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],this.fd===null&&(this._open=e.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}var bd=Nd,Od=Object.getPrototypeOf||function(e){return e.__proto__};function Nd(e){if(e===null||typeof e!="object")return e;if(e instanceof Object)var t={__proto__:Od(e)};else var t=Object.create(null);return Object.getOwnPropertyNames(e).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}),t}var Q=yt.default,Id=Ad,Rd=$d,Dd=bd,Tr=cl.default,me,Hr;typeof Symbol=="function"&&typeof Symbol.for=="function"?(me=Symbol.for("graceful-fs.queue"),Hr=Symbol.for("graceful-fs.previous")):(me="___graceful-fs.queue",Hr="___graceful-fs.previous");function Pd(){}function _l(e,t){Object.defineProperty(e,me,{get:function(){return t}})}var Ot=Pd;Tr.debuglog?Ot=Tr.debuglog("gfs4"):/\bgfs4\b/i.test({}.NODE_DEBUG||"")&&(Ot=function(){var e=Tr.format.apply(Tr,arguments);e="GFS4: "+e.split(/\n/).join(`
GFS4: `),console.error(e)});if(!Q[me]){var Fd=He[me]||[];_l(Q,Fd),Q.close=function(e){function t(n,r){return e.call(Q,n,function(i){i||$o(),typeof r=="function"&&r.apply(this,arguments)})}return Object.defineProperty(t,Hr,{value:e}),t}(Q.close),Q.closeSync=function(e){function t(n){e.apply(Q,arguments),$o()}return Object.defineProperty(t,Hr,{value:e}),t}(Q.closeSync),/\bgfs4\b/i.test({}.NODE_DEBUG||"")&&process.on("exit",function(){Ot(Q[me]),fl.default.equal(Q[me].length,0)})}He[me]||_l(He,Q[me]);var De=Ia(Dd(Q));({}).TEST_GRACEFUL_FS_GLOBAL_PATCH&&!Q.__patched&&(De=Ia(Q),Q.__patched=!0);function Ia(e){Id(e),e.gracefulify=Ia,e.createReadStream=se,e.createWriteStream=V;var t=e.readFile;e.readFile=n;function n(g,F,P){return typeof F=="function"&&(P=F,F=null),I(g,F,P);function I(Y,X,M,j){return t(Y,X,function(O){O&&(O.code==="EMFILE"||O.code==="ENFILE")?qt([I,[Y,X,M],O,j||Date.now(),Date.now()]):typeof M=="function"&&M.apply(this,arguments)})}}var r=e.writeFile;e.writeFile=i;function i(g,F,P,I){return typeof P=="function"&&(I=P,P=null),Y(g,F,P,I);function Y(X,M,j,O,ne){return r(X,M,j,function(B){B&&(B.code==="EMFILE"||B.code==="ENFILE")?qt([Y,[X,M,j,O],B,ne||Date.now(),Date.now()]):typeof O=="function"&&O.apply(this,arguments)})}}var a=e.appendFile;a&&(e.appendFile=o);function o(g,F,P,I){return typeof P=="function"&&(I=P,P=null),Y(g,F,P,I);function Y(X,M,j,O,ne){return a(X,M,j,function(B){B&&(B.code==="EMFILE"||B.code==="ENFILE")?qt([Y,[X,M,j,O],B,ne||Date.now(),Date.now()]):typeof O=="function"&&O.apply(this,arguments)})}}var s=e.copyFile;s&&(e.copyFile=l);function l(g,F,P,I){return typeof P=="function"&&(I=P,P=0),Y(g,F,P,I);function Y(X,M,j,O,ne){return s(X,M,j,function(B){B&&(B.code==="EMFILE"||B.code==="ENFILE")?qt([Y,[X,M,j,O],B,ne||Date.now(),Date.now()]):typeof O=="function"&&O.apply(this,arguments)})}}var p=e.readdir;e.readdir=c;var f=/^v[0-5]\./;function c(g,F,P){typeof F=="function"&&(P=F,F=null);var I=f.test(process.version)?function(M,j,O,ne){return p(M,Y(M,j,O,ne))}:function(M,j,O,ne){return p(M,j,Y(M,j,O,ne))};return I(g,F,P);function Y(X,M,j,O){return function(ne,B){ne&&(ne.code==="EMFILE"||ne.code==="ENFILE")?qt([I,[X,M,j],ne,O||Date.now(),Date.now()]):(B&&B.sort&&B.sort(),typeof j=="function"&&j.call(this,ne,B))}}}if(process.version.substr(0,4)==="v0.8"){var m=Rd(e);C=m.ReadStream,L=m.WriteStream}var y=e.ReadStream;y&&(C.prototype=Object.create(y.prototype),C.prototype.open=$);var w=e.WriteStream;w&&(L.prototype=Object.create(w.prototype),L.prototype.open=R),Object.defineProperty(e,"ReadStream",{get:function(){return C},set:function(g){C=g},enumerable:!0,configurable:!0}),Object.defineProperty(e,"WriteStream",{get:function(){return L},set:function(g){L=g},enumerable:!0,configurable:!0});var A=C;Object.defineProperty(e,"FileReadStream",{get:function(){return A},set:function(g){A=g},enumerable:!0,configurable:!0});var S=L;Object.defineProperty(e,"FileWriteStream",{get:function(){return S},set:function(g){S=g},enumerable:!0,configurable:!0});function C(g,F){return this instanceof C?(y.apply(this,arguments),this):C.apply(Object.create(C.prototype),arguments)}function $(){var g=this;ue(g.path,g.flags,g.mode,function(F,P){F?(g.autoClose&&g.destroy(),g.emit("error",F)):(g.fd=P,g.emit("open",P),g.read())})}function L(g,F){return this instanceof L?(w.apply(this,arguments),this):L.apply(Object.create(L.prototype),arguments)}function R(){var g=this;ue(g.path,g.flags,g.mode,function(F,P){F?(g.destroy(),g.emit("error",F)):(g.fd=P,g.emit("open",P))})}function se(g,F){return new e.ReadStream(g,F)}function V(g,F){return new e.WriteStream(g,F)}var q=e.open;e.open=ue;function ue(g,F,P,I){return typeof P=="function"&&(I=P,P=null),Y(g,F,P,I);function Y(X,M,j,O,ne){return q(X,M,j,function(B,Mt){B&&(B.code==="EMFILE"||B.code==="ENFILE")?qt([Y,[X,M,j,O],B,ne||Date.now(),Date.now()]):typeof O=="function"&&O.apply(this,arguments)})}}return e}function qt(e){Ot("ENQUEUE",e[0].name,e[1]),Q[me].push(e),Ra()}var Ar;function $o(){for(var e=Date.now(),t=0;t<Q[me].length;++t)Q[me][t].length>2&&(Q[me][t][3]=e,Q[me][t][4]=e);Ra()}function Ra(){if(clearTimeout(Ar),Ar=void 0,Q[me].length!==0){var e=Q[me].shift(),t=e[0],n=e[1],r=e[2],i=e[3],a=e[4];if(i===void 0)Ot("RETRY",t.name,n),t.apply(null,n);else if(Date.now()-i>=6e4){Ot("TIMEOUT",t.name,n);var o=n.pop();typeof o=="function"&&o.call(null,r)}else{var s=Date.now()-a,l=Math.max(a-i,1),p=Math.min(l*1.2,100);s>=p?(Ot("RETRY",t.name,n),t.apply(null,n.concat([i]))):Q[me].push(e)}Ar===void 0&&(Ar=setTimeout(Ra,0))}}(function(e){const t=$e.fromCallback,n=De,r=["access","appendFile","chmod","chown","close","copyFile","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","opendir","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","utimes","writeFile"].filter(i=>typeof n[i]=="function");Object.assign(e,n),r.forEach(i=>{e[i]=t(n[i])}),e.exists=function(i,a){return typeof a=="function"?n.exists(i,a):new Promise(o=>n.exists(i,o))},e.read=function(i,a,o,s,l,p){return typeof p=="function"?n.read(i,a,o,s,l,p):new Promise((f,c)=>{n.read(i,a,o,s,l,(m,y,w)=>{if(m)return c(m);f({bytesRead:y,buffer:w})})})},e.write=function(i,a,...o){return typeof o[o.length-1]=="function"?n.write(i,a,...o):new Promise((s,l)=>{n.write(i,a,...o,(p,f,c)=>{if(p)return l(p);s({bytesWritten:f,buffer:c})})})},typeof n.writev=="function"&&(e.writev=function(i,a,...o){return typeof o[o.length-1]=="function"?n.writev(i,a,...o):new Promise((s,l)=>{n.writev(i,a,...o,(p,f,c)=>{if(p)return l(p);s({bytesWritten:f,buffers:c})})})}),typeof n.realpath.native=="function"?e.realpath.native=t(n.realpath.native):process.emitWarning("fs.realpath.native is not a function. Is fs being monkey-patched?","Warning","fs-extra-WARN0003")})(Lt);var Da={},Tl={};const xd=oe.default;Tl.checkPath=function(t){if(process.platform==="win32"&&/[<>:"|?*]/.test(t.replace(xd.parse(t).root,""))){const r=new Error(`Path contains invalid characters: ${t}`);throw r.code="EINVAL",r}};const Al=Lt,{checkPath:Sl}=Tl,$l=e=>{const t={mode:511};return typeof e=="number"?e:{...t,...e}.mode};Da.makeDir=async(e,t)=>(Sl(e),Al.mkdir(e,{mode:$l(t),recursive:!0}));Da.makeDirSync=(e,t)=>(Sl(e),Al.mkdirSync(e,{mode:$l(t),recursive:!0}));const Ld=$e.fromPromise,{makeDir:Ud,makeDirSync:Fi}=Da,xi=Ld(Ud);var Xe={mkdirs:xi,mkdirsSync:Fi,mkdirp:xi,mkdirpSync:Fi,ensureDir:xi,ensureDirSync:Fi};const kd=$e.fromPromise,Cl=Lt;function Md(e){return Cl.access(e).then(()=>!0).catch(()=>!1)}var Ut={pathExists:kd(Md),pathExistsSync:Cl.existsSync};const en=De;function Bd(e,t,n,r){en.open(e,"r+",(i,a)=>{if(i)return r(i);en.futimes(a,t,n,o=>{en.close(a,s=>{r&&r(o||s)})})})}function qd(e,t,n){const r=en.openSync(e,"r+");return en.futimesSync(r,t,n),en.closeSync(r)}var bl={utimesMillis:Bd,utimesMillisSync:qd};const cn=Lt,de=oe.default,Hd=cl.default;function jd(e,t,n){const r=n.dereference?i=>cn.stat(i,{bigint:!0}):i=>cn.lstat(i,{bigint:!0});return Promise.all([r(e),r(t).catch(i=>{if(i.code==="ENOENT")return null;throw i})]).then(([i,a])=>({srcStat:i,destStat:a}))}function Gd(e,t,n){let r;const i=n.dereference?o=>cn.statSync(o,{bigint:!0}):o=>cn.lstatSync(o,{bigint:!0}),a=i(e);try{r=i(t)}catch(o){if(o.code==="ENOENT")return{srcStat:a,destStat:null};throw o}return{srcStat:a,destStat:r}}function Vd(e,t,n,r,i){Hd.callbackify(jd)(e,t,r,(a,o)=>{if(a)return i(a);const{srcStat:s,destStat:l}=o;if(l){if(tr(s,l)){const p=de.basename(e),f=de.basename(t);return n==="move"&&p!==f&&p.toLowerCase()===f.toLowerCase()?i(null,{srcStat:s,destStat:l,isChangingCase:!0}):i(new Error("Source and destination must not be the same."))}if(s.isDirectory()&&!l.isDirectory())return i(new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`));if(!s.isDirectory()&&l.isDirectory())return i(new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`))}return s.isDirectory()&&Pa(e,t)?i(new Error(ti(e,t,n))):i(null,{srcStat:s,destStat:l})})}function Yd(e,t,n,r){const{srcStat:i,destStat:a}=Gd(e,t,r);if(a){if(tr(i,a)){const o=de.basename(e),s=de.basename(t);if(n==="move"&&o!==s&&o.toLowerCase()===s.toLowerCase())return{srcStat:i,destStat:a,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(i.isDirectory()&&!a.isDirectory())throw new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`);if(!i.isDirectory()&&a.isDirectory())throw new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`)}if(i.isDirectory()&&Pa(e,t))throw new Error(ti(e,t,n));return{srcStat:i,destStat:a}}function Ol(e,t,n,r,i){const a=de.resolve(de.dirname(e)),o=de.resolve(de.dirname(n));if(o===a||o===de.parse(o).root)return i();cn.stat(o,{bigint:!0},(s,l)=>s?s.code==="ENOENT"?i():i(s):tr(t,l)?i(new Error(ti(e,n,r))):Ol(e,t,o,r,i))}function Nl(e,t,n,r){const i=de.resolve(de.dirname(e)),a=de.resolve(de.dirname(n));if(a===i||a===de.parse(a).root)return;let o;try{o=cn.statSync(a,{bigint:!0})}catch(s){if(s.code==="ENOENT")return;throw s}if(tr(t,o))throw new Error(ti(e,n,r));return Nl(e,t,a,r)}function tr(e,t){return t.ino&&t.dev&&t.ino===e.ino&&t.dev===e.dev}function Pa(e,t){const n=de.resolve(e).split(de.sep).filter(i=>i),r=de.resolve(t).split(de.sep).filter(i=>i);return n.reduce((i,a,o)=>i&&r[o]===a,!0)}function ti(e,t,n){return`Cannot ${n} '${e}' to a subdirectory of itself, '${t}'.`}var yn={checkPaths:Vd,checkPathsSync:Yd,checkParentPaths:Ol,checkParentPathsSync:Nl,isSrcSubdir:Pa,areIdentical:tr};const Ie=De,qn=oe.default,Wd=Xe.mkdirs,Xd=Ut.pathExists,zd=bl.utimesMillis,Hn=yn;function Kd(e,t,n,r){typeof n=="function"&&!r?(r=n,n={}):typeof n=="function"&&(n={filter:n}),r=r||function(){},n=n||{},n.clobber="clobber"in n?!!n.clobber:!0,n.overwrite="overwrite"in n?!!n.overwrite:n.clobber,n.preserveTimestamps&&process.arch==="ia32"&&process.emitWarning(`Using the preserveTimestamps option in 32-bit node is not recommended;

	see https://github.com/jprichardson/node-fs-extra/issues/269`,"Warning","fs-extra-WARN0001"),Hn.checkPaths(e,t,"copy",n,(i,a)=>{if(i)return r(i);const{srcStat:o,destStat:s}=a;Hn.checkParentPaths(e,o,t,"copy",l=>l?r(l):n.filter?Il(Co,s,e,t,n,r):Co(s,e,t,n,r))})}function Co(e,t,n,r,i){const a=qn.dirname(n);Xd(a,(o,s)=>{if(o)return i(o);if(s)return jr(e,t,n,r,i);Wd(a,l=>l?i(l):jr(e,t,n,r,i))})}function Il(e,t,n,r,i,a){Promise.resolve(i.filter(n,r)).then(o=>o?e(t,n,r,i,a):a(),o=>a(o))}function Jd(e,t,n,r,i){return r.filter?Il(jr,e,t,n,r,i):jr(e,t,n,r,i)}function jr(e,t,n,r,i){(r.dereference?Ie.stat:Ie.lstat)(t,(o,s)=>o?i(o):s.isDirectory()?ih(s,e,t,n,r,i):s.isFile()||s.isCharacterDevice()||s.isBlockDevice()?Qd(s,e,t,n,r,i):s.isSymbolicLink()?sh(e,t,n,r,i):s.isSocket()?i(new Error(`Cannot copy a socket file: ${t}`)):s.isFIFO()?i(new Error(`Cannot copy a FIFO pipe: ${t}`)):i(new Error(`Unknown file: ${t}`)))}function Qd(e,t,n,r,i,a){return t?Zd(e,n,r,i,a):Rl(e,n,r,i,a)}function Zd(e,t,n,r,i){if(r.overwrite)Ie.unlink(n,a=>a?i(a):Rl(e,t,n,r,i));else return r.errorOnExist?i(new Error(`'${n}' already exists`)):i()}function Rl(e,t,n,r,i){Ie.copyFile(t,n,a=>a?i(a):r.preserveTimestamps?eh(e.mode,t,n,i):ni(n,e.mode,i))}function eh(e,t,n,r){return th(e)?nh(n,e,i=>i?r(i):bo(e,t,n,r)):bo(e,t,n,r)}function th(e){return(e&128)===0}function nh(e,t,n){return ni(e,t|128,n)}function bo(e,t,n,r){rh(t,n,i=>i?r(i):ni(n,e,r))}function ni(e,t,n){return Ie.chmod(e,t,n)}function rh(e,t,n){Ie.stat(e,(r,i)=>r?n(r):zd(t,i.atime,i.mtime,n))}function ih(e,t,n,r,i,a){return t?Dl(n,r,i,a):ah(e.mode,n,r,i,a)}function ah(e,t,n,r,i){Ie.mkdir(n,a=>{if(a)return i(a);Dl(t,n,r,o=>o?i(o):ni(n,e,i))})}function Dl(e,t,n,r){Ie.readdir(e,(i,a)=>i?r(i):Pl(a,e,t,n,r))}function Pl(e,t,n,r,i){const a=e.pop();return a?oh(e,a,t,n,r,i):i()}function oh(e,t,n,r,i,a){const o=qn.join(n,t),s=qn.join(r,t);Hn.checkPaths(o,s,"copy",i,(l,p)=>{if(l)return a(l);const{destStat:f}=p;Jd(f,o,s,i,c=>c?a(c):Pl(e,n,r,i,a))})}function sh(e,t,n,r,i){Ie.readlink(t,(a,o)=>{if(a)return i(a);if(r.dereference&&(o=qn.resolve(process.cwd(),o)),e)Ie.readlink(n,(s,l)=>s?s.code==="EINVAL"||s.code==="UNKNOWN"?Ie.symlink(o,n,i):i(s):(r.dereference&&(l=qn.resolve(process.cwd(),l)),Hn.isSrcSubdir(o,l)?i(new Error(`Cannot copy '${o}' to a subdirectory of itself, '${l}'.`)):e.isDirectory()&&Hn.isSrcSubdir(l,o)?i(new Error(`Cannot overwrite '${l}' with '${o}'.`)):lh(o,n,i)));else return Ie.symlink(o,n,i)})}function lh(e,t,n){Ie.unlink(t,r=>r?n(r):Ie.symlink(e,t,n))}var uh=Kd;const ve=De,jn=oe.default,ch=Xe.mkdirsSync,fh=bl.utimesMillisSync,Gn=yn;function dh(e,t,n){typeof n=="function"&&(n={filter:n}),n=n||{},n.clobber="clobber"in n?!!n.clobber:!0,n.overwrite="overwrite"in n?!!n.overwrite:n.clobber,n.preserveTimestamps&&process.arch==="ia32"&&process.emitWarning(`Using the preserveTimestamps option in 32-bit node is not recommended;

	see https://github.com/jprichardson/node-fs-extra/issues/269`,"Warning","fs-extra-WARN0002");const{srcStat:r,destStat:i}=Gn.checkPathsSync(e,t,"copy",n);return Gn.checkParentPathsSync(e,r,t,"copy"),hh(i,e,t,n)}function hh(e,t,n,r){if(r.filter&&!r.filter(t,n))return;const i=jn.dirname(n);return ve.existsSync(i)||ch(i),Fl(e,t,n,r)}function ph(e,t,n,r){if(!(r.filter&&!r.filter(t,n)))return Fl(e,t,n,r)}function Fl(e,t,n,r){const a=(r.dereference?ve.statSync:ve.lstatSync)(t);if(a.isDirectory())return _h(a,e,t,n,r);if(a.isFile()||a.isCharacterDevice()||a.isBlockDevice())return mh(a,e,t,n,r);if(a.isSymbolicLink())return Sh(e,t,n,r);throw a.isSocket()?new Error(`Cannot copy a socket file: ${t}`):a.isFIFO()?new Error(`Cannot copy a FIFO pipe: ${t}`):new Error(`Unknown file: ${t}`)}function mh(e,t,n,r,i){return t?gh(e,n,r,i):xl(e,n,r,i)}function gh(e,t,n,r){if(r.overwrite)return ve.unlinkSync(n),xl(e,t,n,r);if(r.errorOnExist)throw new Error(`'${n}' already exists`)}function xl(e,t,n,r){return ve.copyFileSync(t,n),r.preserveTimestamps&&yh(e.mode,t,n),Fa(n,e.mode)}function yh(e,t,n){return Eh(e)&&vh(n,e),wh(t,n)}function Eh(e){return(e&128)===0}function vh(e,t){return Fa(e,t|128)}function Fa(e,t){return ve.chmodSync(e,t)}function wh(e,t){const n=ve.statSync(e);return fh(t,n.atime,n.mtime)}function _h(e,t,n,r,i){return t?Ll(n,r,i):Th(e.mode,n,r,i)}function Th(e,t,n,r){return ve.mkdirSync(n),Ll(t,n,r),Fa(n,e)}function Ll(e,t,n){ve.readdirSync(e).forEach(r=>Ah(r,e,t,n))}function Ah(e,t,n,r){const i=jn.join(t,e),a=jn.join(n,e),{destStat:o}=Gn.checkPathsSync(i,a,"copy",r);return ph(o,i,a,r)}function Sh(e,t,n,r){let i=ve.readlinkSync(t);if(r.dereference&&(i=jn.resolve(process.cwd(),i)),e){let a;try{a=ve.readlinkSync(n)}catch(o){if(o.code==="EINVAL"||o.code==="UNKNOWN")return ve.symlinkSync(i,n);throw o}if(r.dereference&&(a=jn.resolve(process.cwd(),a)),Gn.isSrcSubdir(i,a))throw new Error(`Cannot copy '${i}' to a subdirectory of itself, '${a}'.`);if(ve.statSync(n).isDirectory()&&Gn.isSrcSubdir(a,i))throw new Error(`Cannot overwrite '${a}' with '${i}'.`);return $h(i,n)}else return ve.symlinkSync(i,n)}function $h(e,t){return ve.unlinkSync(t),ve.symlinkSync(e,t)}var Ch=dh;const bh=$e.fromCallback;var xa={copy:bh(uh),copySync:Ch};const Oo=De,Ul=oe.default,G=fl.default,Vn=process.platform==="win32";function kl(e){["unlink","chmod","stat","lstat","rmdir","readdir"].forEach(n=>{e[n]=e[n]||Oo[n],n=n+"Sync",e[n]=e[n]||Oo[n]}),e.maxBusyTries=e.maxBusyTries||3}function La(e,t,n){let r=0;typeof t=="function"&&(n=t,t={}),G(e,"rimraf: missing path"),G.strictEqual(typeof e,"string","rimraf: path should be a string"),G.strictEqual(typeof n,"function","rimraf: callback function required"),G(t,"rimraf: invalid options argument provided"),G.strictEqual(typeof t,"object","rimraf: options should be object"),kl(t),No(e,t,function i(a){if(a){if((a.code==="EBUSY"||a.code==="ENOTEMPTY"||a.code==="EPERM")&&r<t.maxBusyTries){r++;const o=r*100;return setTimeout(()=>No(e,t,i),o)}a.code==="ENOENT"&&(a=null)}n(a)})}function No(e,t,n){G(e),G(t),G(typeof n=="function"),t.lstat(e,(r,i)=>{if(r&&r.code==="ENOENT")return n(null);if(r&&r.code==="EPERM"&&Vn)return Io(e,t,r,n);if(i&&i.isDirectory())return Lr(e,t,r,n);t.unlink(e,a=>{if(a){if(a.code==="ENOENT")return n(null);if(a.code==="EPERM")return Vn?Io(e,t,a,n):Lr(e,t,a,n);if(a.code==="EISDIR")return Lr(e,t,a,n)}return n(a)})})}function Io(e,t,n,r){G(e),G(t),G(typeof r=="function"),t.chmod(e,438,i=>{i?r(i.code==="ENOENT"?null:n):t.stat(e,(a,o)=>{a?r(a.code==="ENOENT"?null:n):o.isDirectory()?Lr(e,t,n,r):t.unlink(e,r)})})}function Ro(e,t,n){let r;G(e),G(t);try{t.chmodSync(e,438)}catch(i){if(i.code==="ENOENT")return;throw n}try{r=t.statSync(e)}catch(i){if(i.code==="ENOENT")return;throw n}r.isDirectory()?Ur(e,t,n):t.unlinkSync(e)}function Lr(e,t,n,r){G(e),G(t),G(typeof r=="function"),t.rmdir(e,i=>{i&&(i.code==="ENOTEMPTY"||i.code==="EEXIST"||i.code==="EPERM")?Oh(e,t,r):i&&i.code==="ENOTDIR"?r(n):r(i)})}function Oh(e,t,n){G(e),G(t),G(typeof n=="function"),t.readdir(e,(r,i)=>{if(r)return n(r);let a=i.length,o;if(a===0)return t.rmdir(e,n);i.forEach(s=>{La(Ul.join(e,s),t,l=>{if(!o){if(l)return n(o=l);--a===0&&t.rmdir(e,n)}})})})}function Ml(e,t){let n;t=t||{},kl(t),G(e,"rimraf: missing path"),G.strictEqual(typeof e,"string","rimraf: path should be a string"),G(t,"rimraf: missing options"),G.strictEqual(typeof t,"object","rimraf: options should be object");try{n=t.lstatSync(e)}catch(r){if(r.code==="ENOENT")return;r.code==="EPERM"&&Vn&&Ro(e,t,r)}try{n&&n.isDirectory()?Ur(e,t,null):t.unlinkSync(e)}catch(r){if(r.code==="ENOENT")return;if(r.code==="EPERM")return Vn?Ro(e,t,r):Ur(e,t,r);if(r.code!=="EISDIR")throw r;Ur(e,t,r)}}function Ur(e,t,n){G(e),G(t);try{t.rmdirSync(e)}catch(r){if(r.code==="ENOTDIR")throw n;if(r.code==="ENOTEMPTY"||r.code==="EEXIST"||r.code==="EPERM")Nh(e,t);else if(r.code!=="ENOENT")throw r}}function Nh(e,t){if(G(e),G(t),t.readdirSync(e).forEach(n=>Ml(Ul.join(e,n),t)),Vn){const n=Date.now();do try{return t.rmdirSync(e,t)}catch{}while(Date.now()-n<500)}else return t.rmdirSync(e,t)}var Ih=La;La.sync=Ml;const Gr=De,Rh=$e.fromCallback,Bl=Ih;function Dh(e,t){if(Gr.rm)return Gr.rm(e,{recursive:!0,force:!0},t);Bl(e,t)}function Ph(e){if(Gr.rmSync)return Gr.rmSync(e,{recursive:!0,force:!0});Bl.sync(e)}var ri={remove:Rh(Dh),removeSync:Ph};const Fh=$e.fromPromise,ql=Lt,Hl=oe.default,jl=Xe,Gl=ri,Do=Fh(async function(t){let n;try{n=await ql.readdir(t)}catch{return jl.mkdirs(t)}return Promise.all(n.map(r=>Gl.remove(Hl.join(t,r))))});function Po(e){let t;try{t=ql.readdirSync(e)}catch{return jl.mkdirsSync(e)}t.forEach(n=>{n=Hl.join(e,n),Gl.removeSync(n)})}var xh={emptyDirSync:Po,emptydirSync:Po,emptyDir:Do,emptydir:Do};const Lh=$e.fromCallback,Vl=oe.default,ct=De,Yl=Xe;function Uh(e,t){function n(){ct.writeFile(e,"",r=>{if(r)return t(r);t()})}ct.stat(e,(r,i)=>{if(!r&&i.isFile())return t();const a=Vl.dirname(e);ct.stat(a,(o,s)=>{if(o)return o.code==="ENOENT"?Yl.mkdirs(a,l=>{if(l)return t(l);n()}):t(o);s.isDirectory()?n():ct.readdir(a,l=>{if(l)return t(l)})})})}function kh(e){let t;try{t=ct.statSync(e)}catch{}if(t&&t.isFile())return;const n=Vl.dirname(e);try{ct.statSync(n).isDirectory()||ct.readdirSync(n)}catch(r){if(r&&r.code==="ENOENT")Yl.mkdirsSync(n);else throw r}ct.writeFileSync(e,"")}var Mh={createFile:Lh(Uh),createFileSync:kh};const Bh=$e.fromCallback,Wl=oe.default,ut=De,Xl=Xe,qh=Ut.pathExists,{areIdentical:zl}=yn;function Hh(e,t,n){function r(i,a){ut.link(i,a,o=>{if(o)return n(o);n(null)})}ut.lstat(t,(i,a)=>{ut.lstat(e,(o,s)=>{if(o)return o.message=o.message.replace("lstat","ensureLink"),n(o);if(a&&zl(s,a))return n(null);const l=Wl.dirname(t);qh(l,(p,f)=>{if(p)return n(p);if(f)return r(e,t);Xl.mkdirs(l,c=>{if(c)return n(c);r(e,t)})})})})}function jh(e,t){let n;try{n=ut.lstatSync(t)}catch{}try{const a=ut.lstatSync(e);if(n&&zl(a,n))return}catch(a){throw a.message=a.message.replace("lstat","ensureLink"),a}const r=Wl.dirname(t);return ut.existsSync(r)||Xl.mkdirsSync(r),ut.linkSync(e,t)}var Gh={createLink:Bh(Hh),createLinkSync:jh};const ft=oe.default,Ln=De,Vh=Ut.pathExists;function Yh(e,t,n){if(ft.isAbsolute(e))return Ln.lstat(e,r=>r?(r.message=r.message.replace("lstat","ensureSymlink"),n(r)):n(null,{toCwd:e,toDst:e}));{const r=ft.dirname(t),i=ft.join(r,e);return Vh(i,(a,o)=>a?n(a):o?n(null,{toCwd:i,toDst:e}):Ln.lstat(e,s=>s?(s.message=s.message.replace("lstat","ensureSymlink"),n(s)):n(null,{toCwd:e,toDst:ft.relative(r,e)})))}}function Wh(e,t){let n;if(ft.isAbsolute(e)){if(n=Ln.existsSync(e),!n)throw new Error("absolute srcpath does not exist");return{toCwd:e,toDst:e}}else{const r=ft.dirname(t),i=ft.join(r,e);if(n=Ln.existsSync(i),n)return{toCwd:i,toDst:e};if(n=Ln.existsSync(e),!n)throw new Error("relative srcpath does not exist");return{toCwd:e,toDst:ft.relative(r,e)}}}var Xh={symlinkPaths:Yh,symlinkPathsSync:Wh};const Kl=De;function zh(e,t,n){if(n=typeof t=="function"?t:n,t=typeof t=="function"?!1:t,t)return n(null,t);Kl.lstat(e,(r,i)=>{if(r)return n(null,"file");t=i&&i.isDirectory()?"dir":"file",n(null,t)})}function Kh(e,t){let n;if(t)return t;try{n=Kl.lstatSync(e)}catch{return"file"}return n&&n.isDirectory()?"dir":"file"}var Jh={symlinkType:zh,symlinkTypeSync:Kh};const Qh=$e.fromCallback,Jl=oe.default,qe=Lt,Ql=Xe,Zh=Ql.mkdirs,ep=Ql.mkdirsSync,Zl=Xh,tp=Zl.symlinkPaths,np=Zl.symlinkPathsSync,eu=Jh,rp=eu.symlinkType,ip=eu.symlinkTypeSync,ap=Ut.pathExists,{areIdentical:tu}=yn;function op(e,t,n,r){r=typeof n=="function"?n:r,n=typeof n=="function"?!1:n,qe.lstat(t,(i,a)=>{!i&&a.isSymbolicLink()?Promise.all([qe.stat(e),qe.stat(t)]).then(([o,s])=>{if(tu(o,s))return r(null);Fo(e,t,n,r)}):Fo(e,t,n,r)})}function Fo(e,t,n,r){tp(e,t,(i,a)=>{if(i)return r(i);e=a.toDst,rp(a.toCwd,n,(o,s)=>{if(o)return r(o);const l=Jl.dirname(t);ap(l,(p,f)=>{if(p)return r(p);if(f)return qe.symlink(e,t,s,r);Zh(l,c=>{if(c)return r(c);qe.symlink(e,t,s,r)})})})})}function sp(e,t,n){let r;try{r=qe.lstatSync(t)}catch{}if(r&&r.isSymbolicLink()){const s=qe.statSync(e),l=qe.statSync(t);if(tu(s,l))return}const i=np(e,t);e=i.toDst,n=ip(i.toCwd,n);const a=Jl.dirname(t);return qe.existsSync(a)||ep(a),qe.symlinkSync(e,t,n)}var lp={createSymlink:Qh(op),createSymlinkSync:sp};const{createFile:xo,createFileSync:Lo}=Mh,{createLink:Uo,createLinkSync:ko}=Gh,{createSymlink:Mo,createSymlinkSync:Bo}=lp;var up={createFile:xo,createFileSync:Lo,ensureFile:xo,ensureFileSync:Lo,createLink:Uo,createLinkSync:ko,ensureLink:Uo,ensureLinkSync:ko,createSymlink:Mo,createSymlinkSync:Bo,ensureSymlink:Mo,ensureSymlinkSync:Bo};function cp(e,{EOL:t=`
`,finalEOL:n=!0,replacer:r=null,spaces:i}={}){const a=n?t:"";return JSON.stringify(e,r,i).replace(/\n/g,t)+a}function fp(e){return Buffer.isBuffer(e)&&(e=e.toString("utf8")),e.replace(/^\uFEFF/,"")}var Ua={stringify:cp,stripBom:fp};let fn;try{fn=require("graceful-fs")}catch{fn=yt.default}const ii=$e,{stringify:nu,stripBom:ru}=Ua;async function dp(e,t={}){typeof t=="string"&&(t={encoding:t});const n=t.fs||fn,r="throws"in t?t.throws:!0;let i=await ii.fromCallback(n.readFile)(e,t);i=ru(i);let a;try{a=JSON.parse(i,t?t.reviver:null)}catch(o){if(r)throw o.message=`${e}: ${o.message}`,o;return null}return a}const hp=ii.fromPromise(dp);function pp(e,t={}){typeof t=="string"&&(t={encoding:t});const n=t.fs||fn,r="throws"in t?t.throws:!0;try{let i=n.readFileSync(e,t);return i=ru(i),JSON.parse(i,t.reviver)}catch(i){if(r)throw i.message=`${e}: ${i.message}`,i;return null}}async function mp(e,t,n={}){const r=n.fs||fn,i=nu(t,n);await ii.fromCallback(r.writeFile)(e,i,n)}const gp=ii.fromPromise(mp);function yp(e,t,n={}){const r=n.fs||fn,i=nu(t,n);return r.writeFileSync(e,i,n)}const Ep={readFile:hp,readFileSync:pp,writeFile:gp,writeFileSync:yp};var vp=Ep;const Sr=vp;var wp={readJson:Sr.readFile,readJsonSync:Sr.readFileSync,writeJson:Sr.writeFile,writeJsonSync:Sr.writeFileSync};const _p=$e.fromCallback,Un=De,iu=oe.default,au=Xe,Tp=Ut.pathExists;function Ap(e,t,n,r){typeof n=="function"&&(r=n,n="utf8");const i=iu.dirname(e);Tp(i,(a,o)=>{if(a)return r(a);if(o)return Un.writeFile(e,t,n,r);au.mkdirs(i,s=>{if(s)return r(s);Un.writeFile(e,t,n,r)})})}function Sp(e,...t){const n=iu.dirname(e);if(Un.existsSync(n))return Un.writeFileSync(e,...t);au.mkdirsSync(n),Un.writeFileSync(e,...t)}var ka={outputFile:_p(Ap),outputFileSync:Sp};const{stringify:$p}=Ua,{outputFile:Cp}=ka;async function bp(e,t,n={}){const r=$p(t,n);await Cp(e,r,n)}var Op=bp;const{stringify:Np}=Ua,{outputFileSync:Ip}=ka;function Rp(e,t,n){const r=Np(t,n);Ip(e,r,n)}var Dp=Rp;const Pp=$e.fromPromise,Se=wp;Se.outputJson=Pp(Op);Se.outputJsonSync=Dp;Se.outputJSON=Se.outputJson;Se.outputJSONSync=Se.outputJsonSync;Se.writeJSON=Se.writeJson;Se.writeJSONSync=Se.writeJsonSync;Se.readJSON=Se.readJson;Se.readJSONSync=Se.readJsonSync;var Fp=Se;const xp=De,pa=oe.default,Lp=xa.copy,ou=ri.remove,Up=Xe.mkdirp,kp=Ut.pathExists,qo=yn;function Mp(e,t,n,r){typeof n=="function"&&(r=n,n={}),n=n||{};const i=n.overwrite||n.clobber||!1;qo.checkPaths(e,t,"move",n,(a,o)=>{if(a)return r(a);const{srcStat:s,isChangingCase:l=!1}=o;qo.checkParentPaths(e,s,t,"move",p=>{if(p)return r(p);if(Bp(t))return Ho(e,t,i,l,r);Up(pa.dirname(t),f=>f?r(f):Ho(e,t,i,l,r))})})}function Bp(e){const t=pa.dirname(e);return pa.parse(t).root===t}function Ho(e,t,n,r,i){if(r)return Li(e,t,n,i);if(n)return ou(t,a=>a?i(a):Li(e,t,n,i));kp(t,(a,o)=>a?i(a):o?i(new Error("dest already exists.")):Li(e,t,n,i))}function Li(e,t,n,r){xp.rename(e,t,i=>i?i.code!=="EXDEV"?r(i):qp(e,t,n,r):r())}function qp(e,t,n,r){Lp(e,t,{overwrite:n,errorOnExist:!0},a=>a?r(a):ou(e,r))}var Hp=Mp;const su=De,ma=oe.default,jp=xa.copySync,lu=ri.removeSync,Gp=Xe.mkdirpSync,jo=yn;function Vp(e,t,n){n=n||{};const r=n.overwrite||n.clobber||!1,{srcStat:i,isChangingCase:a=!1}=jo.checkPathsSync(e,t,"move",n);return jo.checkParentPathsSync(e,i,t,"move"),Yp(t)||Gp(ma.dirname(t)),Wp(e,t,r,a)}function Yp(e){const t=ma.dirname(e);return ma.parse(t).root===t}function Wp(e,t,n,r){if(r)return Ui(e,t,n);if(n)return lu(t),Ui(e,t,n);if(su.existsSync(t))throw new Error("dest already exists.");return Ui(e,t,n)}function Ui(e,t,n){try{su.renameSync(e,t)}catch(r){if(r.code!=="EXDEV")throw r;return Xp(e,t,n)}}function Xp(e,t,n){return jp(e,t,{overwrite:n,errorOnExist:!0}),lu(e)}var zp=Vp;const Kp=$e.fromCallback;var Jp={move:Kp(Hp),moveSync:zp},kt={...Lt,...xa,...xh,...up,...Fp,...Xe,...Jp,...ka,...Ut,...ri},ye={},Ma={},je={};function uu(e){return typeof e>"u"||e===null}function Qp(e){return typeof e=="object"&&e!==null}function Zp(e){return Array.isArray(e)?e:uu(e)?[]:[e]}function em(e,t){var n,r,i,a;if(t)for(a=Object.keys(t),n=0,r=a.length;n<r;n+=1)i=a[n],e[i]=t[i];return e}function tm(e,t){var n="",r;for(r=0;r<t;r+=1)n+=e;return n}function nm(e){return e===0&&Number.NEGATIVE_INFINITY===1/e}je.isNothing=uu;je.isObject=Qp;je.toArray=Zp;je.repeat=tm;je.isNegativeZero=nm;je.extend=em;function cu(e,t){var n="",r=e.reason||"(unknown reason)";return e.mark?(e.mark.name&&(n+='in "'+e.mark.name+'" '),n+="("+(e.mark.line+1)+":"+(e.mark.column+1)+")",!t&&e.mark.snippet&&(n+=`

`+e.mark.snippet),r+" "+n):r}function Yn(e,t){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=t,this.message=cu(this,!1),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack||""}Yn.prototype=Object.create(Error.prototype);Yn.prototype.constructor=Yn;Yn.prototype.toString=function(t){return this.name+": "+cu(this,t)};var nr=Yn,Pn=je;function ki(e,t,n,r,i){var a="",o="",s=Math.floor(i/2)-1;return r-t>s&&(a=" ... ",t=r-s+a.length),n-r>s&&(o=" ...",n=r+s-o.length),{str:a+e.slice(t,n).replace(/\t/g,"\u2192")+o,pos:r-t+a.length}}function Mi(e,t){return Pn.repeat(" ",t-e.length)+e}function rm(e,t){if(t=Object.create(t||null),!e.buffer)return null;t.maxLength||(t.maxLength=79),typeof t.indent!="number"&&(t.indent=1),typeof t.linesBefore!="number"&&(t.linesBefore=3),typeof t.linesAfter!="number"&&(t.linesAfter=2);for(var n=/\r?\n|\r|\0/g,r=[0],i=[],a,o=-1;a=n.exec(e.buffer);)i.push(a.index),r.push(a.index+a[0].length),e.position<=a.index&&o<0&&(o=r.length-2);o<0&&(o=r.length-1);var s="",l,p,f=Math.min(e.line+t.linesAfter,i.length).toString().length,c=t.maxLength-(t.indent+f+3);for(l=1;l<=t.linesBefore&&!(o-l<0);l++)p=ki(e.buffer,r[o-l],i[o-l],e.position-(r[o]-r[o-l]),c),s=Pn.repeat(" ",t.indent)+Mi((e.line-l+1).toString(),f)+" | "+p.str+`
`+s;for(p=ki(e.buffer,r[o],i[o],e.position,c),s+=Pn.repeat(" ",t.indent)+Mi((e.line+1).toString(),f)+" | "+p.str+`
`,s+=Pn.repeat("-",t.indent+f+3+p.pos)+`^
`,l=1;l<=t.linesAfter&&!(o+l>=i.length);l++)p=ki(e.buffer,r[o+l],i[o+l],e.position-(r[o]-r[o+l]),c),s+=Pn.repeat(" ",t.indent)+Mi((e.line+l+1).toString(),f)+" | "+p.str+`
`;return s.replace(/\n$/,"")}var im=rm,Go=nr,am=["kind","multi","resolve","construct","instanceOf","predicate","represent","representName","defaultStyle","styleAliases"],om=["scalar","sequence","mapping"];function sm(e){var t={};return e!==null&&Object.keys(e).forEach(function(n){e[n].forEach(function(r){t[String(r)]=n})}),t}function lm(e,t){if(t=t||{},Object.keys(t).forEach(function(n){if(am.indexOf(n)===-1)throw new Go('Unknown option "'+n+'" is met in definition of "'+e+'" YAML type.')}),this.options=t,this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(n){return n},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.representName=t.representName||null,this.defaultStyle=t.defaultStyle||null,this.multi=t.multi||!1,this.styleAliases=sm(t.styleAliases||null),om.indexOf(this.kind)===-1)throw new Go('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')}var Ce=lm,Cn=nr,Bi=Ce;function Vo(e,t){var n=[];return e[t].forEach(function(r){var i=n.length;n.forEach(function(a,o){a.tag===r.tag&&a.kind===r.kind&&a.multi===r.multi&&(i=o)}),n[i]=r}),n}function um(){var e={scalar:{},sequence:{},mapping:{},fallback:{},multi:{scalar:[],sequence:[],mapping:[],fallback:[]}},t,n;function r(i){i.multi?(e.multi[i.kind].push(i),e.multi.fallback.push(i)):e[i.kind][i.tag]=e.fallback[i.tag]=i}for(t=0,n=arguments.length;t<n;t+=1)arguments[t].forEach(r);return e}function ga(e){return this.extend(e)}ga.prototype.extend=function(t){var n=[],r=[];if(t instanceof Bi)r.push(t);else if(Array.isArray(t))r=r.concat(t);else if(t&&(Array.isArray(t.implicit)||Array.isArray(t.explicit)))t.implicit&&(n=n.concat(t.implicit)),t.explicit&&(r=r.concat(t.explicit));else throw new Cn("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");n.forEach(function(a){if(!(a instanceof Bi))throw new Cn("Specified list of YAML types (or a single Type object) contains a non-Type object.");if(a.loadKind&&a.loadKind!=="scalar")throw new Cn("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");if(a.multi)throw new Cn("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.")}),r.forEach(function(a){if(!(a instanceof Bi))throw new Cn("Specified list of YAML types (or a single Type object) contains a non-Type object.")});var i=Object.create(ga.prototype);return i.implicit=(this.implicit||[]).concat(n),i.explicit=(this.explicit||[]).concat(r),i.compiledImplicit=Vo(i,"implicit"),i.compiledExplicit=Vo(i,"explicit"),i.compiledTypeMap=um(i.compiledImplicit,i.compiledExplicit),i};var fu=ga,cm=Ce,du=new cm("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return e!==null?e:""}}),fm=Ce,hu=new fm("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return e!==null?e:[]}}),dm=Ce,pu=new dm("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return e!==null?e:{}}}),hm=fu,mu=new hm({explicit:[du,hu,pu]}),pm=Ce;function mm(e){if(e===null)return!0;var t=e.length;return t===1&&e==="~"||t===4&&(e==="null"||e==="Null"||e==="NULL")}function gm(){return null}function ym(e){return e===null}var gu=new pm("tag:yaml.org,2002:null",{kind:"scalar",resolve:mm,construct:gm,predicate:ym,represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"},empty:function(){return""}},defaultStyle:"lowercase"}),Em=Ce;function vm(e){if(e===null)return!1;var t=e.length;return t===4&&(e==="true"||e==="True"||e==="TRUE")||t===5&&(e==="false"||e==="False"||e==="FALSE")}function wm(e){return e==="true"||e==="True"||e==="TRUE"}function _m(e){return Object.prototype.toString.call(e)==="[object Boolean]"}var yu=new Em("tag:yaml.org,2002:bool",{kind:"scalar",resolve:vm,construct:wm,predicate:_m,represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"}),Tm=je,Am=Ce;function Sm(e){return 48<=e&&e<=57||65<=e&&e<=70||97<=e&&e<=102}function $m(e){return 48<=e&&e<=55}function Cm(e){return 48<=e&&e<=57}function bm(e){if(e===null)return!1;var t=e.length,n=0,r=!1,i;if(!t)return!1;if(i=e[n],(i==="-"||i==="+")&&(i=e[++n]),i==="0"){if(n+1===t)return!0;if(i=e[++n],i==="b"){for(n++;n<t;n++)if(i=e[n],i!=="_"){if(i!=="0"&&i!=="1")return!1;r=!0}return r&&i!=="_"}if(i==="x"){for(n++;n<t;n++)if(i=e[n],i!=="_"){if(!Sm(e.charCodeAt(n)))return!1;r=!0}return r&&i!=="_"}if(i==="o"){for(n++;n<t;n++)if(i=e[n],i!=="_"){if(!$m(e.charCodeAt(n)))return!1;r=!0}return r&&i!=="_"}}if(i==="_")return!1;for(;n<t;n++)if(i=e[n],i!=="_"){if(!Cm(e.charCodeAt(n)))return!1;r=!0}return!(!r||i==="_")}function Om(e){var t=e,n=1,r;if(t.indexOf("_")!==-1&&(t=t.replace(/_/g,"")),r=t[0],(r==="-"||r==="+")&&(r==="-"&&(n=-1),t=t.slice(1),r=t[0]),t==="0")return 0;if(r==="0"){if(t[1]==="b")return n*parseInt(t.slice(2),2);if(t[1]==="x")return n*parseInt(t.slice(2),16);if(t[1]==="o")return n*parseInt(t.slice(2),8)}return n*parseInt(t,10)}function Nm(e){return Object.prototype.toString.call(e)==="[object Number]"&&e%1===0&&!Tm.isNegativeZero(e)}var Eu=new Am("tag:yaml.org,2002:int",{kind:"scalar",resolve:bm,construct:Om,predicate:Nm,represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0o"+e.toString(8):"-0o"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),vu=je,Im=Ce,Rm=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");function Dm(e){return!(e===null||!Rm.test(e)||e[e.length-1]==="_")}function Pm(e){var t,n;return t=e.replace(/_/g,"").toLowerCase(),n=t[0]==="-"?-1:1,"+-".indexOf(t[0])>=0&&(t=t.slice(1)),t===".inf"?n===1?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:t===".nan"?NaN:n*parseFloat(t,10)}var Fm=/^[-+]?[0-9]+e/;function xm(e,t){var n;if(isNaN(e))switch(t){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(vu.isNegativeZero(e))return"-0.0";return n=e.toString(10),Fm.test(n)?n.replace("e",".e"):n}function Lm(e){return Object.prototype.toString.call(e)==="[object Number]"&&(e%1!==0||vu.isNegativeZero(e))}var wu=new Im("tag:yaml.org,2002:float",{kind:"scalar",resolve:Dm,construct:Pm,predicate:Lm,represent:xm,defaultStyle:"lowercase"}),_u=mu.extend({implicit:[gu,yu,Eu,wu]}),Tu=_u,Um=Ce,Au=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),Su=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");function km(e){return e===null?!1:Au.exec(e)!==null||Su.exec(e)!==null}function Mm(e){var t,n,r,i,a,o,s,l=0,p=null,f,c,m;if(t=Au.exec(e),t===null&&(t=Su.exec(e)),t===null)throw new Error("Date resolve error");if(n=+t[1],r=+t[2]-1,i=+t[3],!t[4])return new Date(Date.UTC(n,r,i));if(a=+t[4],o=+t[5],s=+t[6],t[7]){for(l=t[7].slice(0,3);l.length<3;)l+="0";l=+l}return t[9]&&(f=+t[10],c=+(t[11]||0),p=(f*60+c)*6e4,t[9]==="-"&&(p=-p)),m=new Date(Date.UTC(n,r,i,a,o,s,l)),p&&m.setTime(m.getTime()-p),m}function Bm(e){return e.toISOString()}var $u=new Um("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:km,construct:Mm,instanceOf:Date,represent:Bm}),qm=Ce;function Hm(e){return e==="<<"||e===null}var Cu=new qm("tag:yaml.org,2002:merge",{kind:"scalar",resolve:Hm}),jm=Ce,Ba=`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;function Gm(e){if(e===null)return!1;var t,n,r=0,i=e.length,a=Ba;for(n=0;n<i;n++)if(t=a.indexOf(e.charAt(n)),!(t>64)){if(t<0)return!1;r+=6}return r%8===0}function Vm(e){var t,n,r=e.replace(/[\r\n=]/g,""),i=r.length,a=Ba,o=0,s=[];for(t=0;t<i;t++)t%4===0&&t&&(s.push(o>>16&255),s.push(o>>8&255),s.push(o&255)),o=o<<6|a.indexOf(r.charAt(t));return n=i%4*6,n===0?(s.push(o>>16&255),s.push(o>>8&255),s.push(o&255)):n===18?(s.push(o>>10&255),s.push(o>>2&255)):n===12&&s.push(o>>4&255),new Uint8Array(s)}function Ym(e){var t="",n=0,r,i,a=e.length,o=Ba;for(r=0;r<a;r++)r%3===0&&r&&(t+=o[n>>18&63],t+=o[n>>12&63],t+=o[n>>6&63],t+=o[n&63]),n=(n<<8)+e[r];return i=a%3,i===0?(t+=o[n>>18&63],t+=o[n>>12&63],t+=o[n>>6&63],t+=o[n&63]):i===2?(t+=o[n>>10&63],t+=o[n>>4&63],t+=o[n<<2&63],t+=o[64]):i===1&&(t+=o[n>>2&63],t+=o[n<<4&63],t+=o[64],t+=o[64]),t}function Wm(e){return Object.prototype.toString.call(e)==="[object Uint8Array]"}var bu=new jm("tag:yaml.org,2002:binary",{kind:"scalar",resolve:Gm,construct:Vm,predicate:Wm,represent:Ym}),Xm=Ce,zm=Object.prototype.hasOwnProperty,Km=Object.prototype.toString;function Jm(e){if(e===null)return!0;var t=[],n,r,i,a,o,s=e;for(n=0,r=s.length;n<r;n+=1){if(i=s[n],o=!1,Km.call(i)!=="[object Object]")return!1;for(a in i)if(zm.call(i,a))if(!o)o=!0;else return!1;if(!o)return!1;if(t.indexOf(a)===-1)t.push(a);else return!1}return!0}function Qm(e){return e!==null?e:[]}var Ou=new Xm("tag:yaml.org,2002:omap",{kind:"sequence",resolve:Jm,construct:Qm}),Zm=Ce,eg=Object.prototype.toString;function tg(e){if(e===null)return!0;var t,n,r,i,a,o=e;for(a=new Array(o.length),t=0,n=o.length;t<n;t+=1){if(r=o[t],eg.call(r)!=="[object Object]"||(i=Object.keys(r),i.length!==1))return!1;a[t]=[i[0],r[i[0]]]}return!0}function ng(e){if(e===null)return[];var t,n,r,i,a,o=e;for(a=new Array(o.length),t=0,n=o.length;t<n;t+=1)r=o[t],i=Object.keys(r),a[t]=[i[0],r[i[0]]];return a}var Nu=new Zm("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:tg,construct:ng}),rg=Ce,ig=Object.prototype.hasOwnProperty;function ag(e){if(e===null)return!0;var t,n=e;for(t in n)if(ig.call(n,t)&&n[t]!==null)return!1;return!0}function og(e){return e!==null?e:{}}var Iu=new rg("tag:yaml.org,2002:set",{kind:"mapping",resolve:ag,construct:og}),qa=Tu.extend({implicit:[$u,Cu],explicit:[bu,Ou,Nu,Iu]}),St=je,Ru=nr,sg=im,lg=qa,pt=Object.prototype.hasOwnProperty,Vr=1,Du=2,Pu=3,Yr=4,qi=1,ug=2,Yo=3,cg=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,fg=/[\x85\u2028\u2029]/,dg=/[,\[\]\{\}]/,Fu=/^(?:!|!!|![a-z\-]+!)$/i,xu=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function Wo(e){return Object.prototype.toString.call(e)}function We(e){return e===10||e===13}function Nt(e){return e===9||e===32}function Re(e){return e===9||e===32||e===10||e===13}function Kt(e){return e===44||e===91||e===93||e===123||e===125}function hg(e){var t;return 48<=e&&e<=57?e-48:(t=e|32,97<=t&&t<=102?t-97+10:-1)}function pg(e){return e===120?2:e===117?4:e===85?8:0}function mg(e){return 48<=e&&e<=57?e-48:-1}function Xo(e){return e===48?"\0":e===97?"\x07":e===98?"\b":e===116||e===9?"	":e===110?`
`:e===118?"\v":e===102?"\f":e===114?"\r":e===101?"\x1B":e===32?" ":e===34?'"':e===47?"/":e===92?"\\":e===78?"\x85":e===95?"\xA0":e===76?"\u2028":e===80?"\u2029":""}function gg(e){return e<=65535?String.fromCharCode(e):String.fromCharCode((e-65536>>10)+55296,(e-65536&1023)+56320)}var Lu=new Array(256),Uu=new Array(256);for(var Ht=0;Ht<256;Ht++)Lu[Ht]=Xo(Ht)?1:0,Uu[Ht]=Xo(Ht);function yg(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||lg,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.firstTabInLine=-1,this.documents=[]}function ku(e,t){var n={name:e.filename,buffer:e.input.slice(0,-1),position:e.position,line:e.line,column:e.position-e.lineStart};return n.snippet=sg(n),new Ru(t,n)}function N(e,t){throw ku(e,t)}function Wr(e,t){e.onWarning&&e.onWarning.call(null,ku(e,t))}var zo={YAML:function(t,n,r){var i,a,o;t.version!==null&&N(t,"duplication of %YAML directive"),r.length!==1&&N(t,"YAML directive accepts exactly one argument"),i=/^([0-9]+)\.([0-9]+)$/.exec(r[0]),i===null&&N(t,"ill-formed argument of the YAML directive"),a=parseInt(i[1],10),o=parseInt(i[2],10),a!==1&&N(t,"unacceptable YAML version of the document"),t.version=r[0],t.checkLineBreaks=o<2,o!==1&&o!==2&&Wr(t,"unsupported YAML version of the document")},TAG:function(t,n,r){var i,a;r.length!==2&&N(t,"TAG directive accepts exactly two arguments"),i=r[0],a=r[1],Fu.test(i)||N(t,"ill-formed tag handle (first argument) of the TAG directive"),pt.call(t.tagMap,i)&&N(t,'there is a previously declared suffix for "'+i+'" tag handle'),xu.test(a)||N(t,"ill-formed tag prefix (second argument) of the TAG directive");try{a=decodeURIComponent(a)}catch{N(t,"tag prefix is malformed: "+a)}t.tagMap[i]=a}};function dt(e,t,n,r){var i,a,o,s;if(t<n){if(s=e.input.slice(t,n),r)for(i=0,a=s.length;i<a;i+=1)o=s.charCodeAt(i),o===9||32<=o&&o<=1114111||N(e,"expected valid JSON character");else cg.test(s)&&N(e,"the stream contains non-printable characters");e.result+=s}}function Ko(e,t,n,r){var i,a,o,s;for(St.isObject(n)||N(e,"cannot merge mappings; the provided source object is unacceptable"),i=Object.keys(n),o=0,s=i.length;o<s;o+=1)a=i[o],pt.call(t,a)||(t[a]=n[a],r[a]=!0)}function Jt(e,t,n,r,i,a,o,s,l){var p,f;if(Array.isArray(i))for(i=Array.prototype.slice.call(i),p=0,f=i.length;p<f;p+=1)Array.isArray(i[p])&&N(e,"nested arrays are not supported inside keys"),typeof i=="object"&&Wo(i[p])==="[object Object]"&&(i[p]="[object Object]");if(typeof i=="object"&&Wo(i)==="[object Object]"&&(i="[object Object]"),i=String(i),t===null&&(t={}),r==="tag:yaml.org,2002:merge")if(Array.isArray(a))for(p=0,f=a.length;p<f;p+=1)Ko(e,t,a[p],n);else Ko(e,t,a,n);else!e.json&&!pt.call(n,i)&&pt.call(t,i)&&(e.line=o||e.line,e.lineStart=s||e.lineStart,e.position=l||e.position,N(e,"duplicated mapping key")),i==="__proto__"?Object.defineProperty(t,i,{configurable:!0,enumerable:!0,writable:!0,value:a}):t[i]=a,delete n[i];return t}function Ha(e){var t;t=e.input.charCodeAt(e.position),t===10?e.position++:t===13?(e.position++,e.input.charCodeAt(e.position)===10&&e.position++):N(e,"a line break is expected"),e.line+=1,e.lineStart=e.position,e.firstTabInLine=-1}function ae(e,t,n){for(var r=0,i=e.input.charCodeAt(e.position);i!==0;){for(;Nt(i);)i===9&&e.firstTabInLine===-1&&(e.firstTabInLine=e.position),i=e.input.charCodeAt(++e.position);if(t&&i===35)do i=e.input.charCodeAt(++e.position);while(i!==10&&i!==13&&i!==0);if(We(i))for(Ha(e),i=e.input.charCodeAt(e.position),r++,e.lineIndent=0;i===32;)e.lineIndent++,i=e.input.charCodeAt(++e.position);else break}return n!==-1&&r!==0&&e.lineIndent<n&&Wr(e,"deficient indentation"),r}function ai(e){var t=e.position,n;return n=e.input.charCodeAt(t),!!((n===45||n===46)&&n===e.input.charCodeAt(t+1)&&n===e.input.charCodeAt(t+2)&&(t+=3,n=e.input.charCodeAt(t),n===0||Re(n)))}function ja(e,t){t===1?e.result+=" ":t>1&&(e.result+=St.repeat(`
`,t-1))}function Eg(e,t,n){var r,i,a,o,s,l,p,f,c=e.kind,m=e.result,y;if(y=e.input.charCodeAt(e.position),Re(y)||Kt(y)||y===35||y===38||y===42||y===33||y===124||y===62||y===39||y===34||y===37||y===64||y===96||(y===63||y===45)&&(i=e.input.charCodeAt(e.position+1),Re(i)||n&&Kt(i)))return!1;for(e.kind="scalar",e.result="",a=o=e.position,s=!1;y!==0;){if(y===58){if(i=e.input.charCodeAt(e.position+1),Re(i)||n&&Kt(i))break}else if(y===35){if(r=e.input.charCodeAt(e.position-1),Re(r))break}else{if(e.position===e.lineStart&&ai(e)||n&&Kt(y))break;if(We(y))if(l=e.line,p=e.lineStart,f=e.lineIndent,ae(e,!1,-1),e.lineIndent>=t){s=!0,y=e.input.charCodeAt(e.position);continue}else{e.position=o,e.line=l,e.lineStart=p,e.lineIndent=f;break}}s&&(dt(e,a,o,!1),ja(e,e.line-l),a=o=e.position,s=!1),Nt(y)||(o=e.position+1),y=e.input.charCodeAt(++e.position)}return dt(e,a,o,!1),e.result?!0:(e.kind=c,e.result=m,!1)}function vg(e,t){var n,r,i;if(n=e.input.charCodeAt(e.position),n!==39)return!1;for(e.kind="scalar",e.result="",e.position++,r=i=e.position;(n=e.input.charCodeAt(e.position))!==0;)if(n===39)if(dt(e,r,e.position,!0),n=e.input.charCodeAt(++e.position),n===39)r=e.position,e.position++,i=e.position;else return!0;else We(n)?(dt(e,r,i,!0),ja(e,ae(e,!1,t)),r=i=e.position):e.position===e.lineStart&&ai(e)?N(e,"unexpected end of the document within a single quoted scalar"):(e.position++,i=e.position);N(e,"unexpected end of the stream within a single quoted scalar")}function wg(e,t){var n,r,i,a,o,s;if(s=e.input.charCodeAt(e.position),s!==34)return!1;for(e.kind="scalar",e.result="",e.position++,n=r=e.position;(s=e.input.charCodeAt(e.position))!==0;){if(s===34)return dt(e,n,e.position,!0),e.position++,!0;if(s===92){if(dt(e,n,e.position,!0),s=e.input.charCodeAt(++e.position),We(s))ae(e,!1,t);else if(s<256&&Lu[s])e.result+=Uu[s],e.position++;else if((o=pg(s))>0){for(i=o,a=0;i>0;i--)s=e.input.charCodeAt(++e.position),(o=hg(s))>=0?a=(a<<4)+o:N(e,"expected hexadecimal character");e.result+=gg(a),e.position++}else N(e,"unknown escape sequence");n=r=e.position}else We(s)?(dt(e,n,r,!0),ja(e,ae(e,!1,t)),n=r=e.position):e.position===e.lineStart&&ai(e)?N(e,"unexpected end of the document within a double quoted scalar"):(e.position++,r=e.position)}N(e,"unexpected end of the stream within a double quoted scalar")}function _g(e,t){var n=!0,r,i,a,o=e.tag,s,l=e.anchor,p,f,c,m,y,w=Object.create(null),A,S,C,$;if($=e.input.charCodeAt(e.position),$===91)f=93,y=!1,s=[];else if($===123)f=125,y=!0,s={};else return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=s),$=e.input.charCodeAt(++e.position);$!==0;){if(ae(e,!0,t),$=e.input.charCodeAt(e.position),$===f)return e.position++,e.tag=o,e.anchor=l,e.kind=y?"mapping":"sequence",e.result=s,!0;n?$===44&&N(e,"expected the node content, but found ','"):N(e,"missed comma between flow collection entries"),S=A=C=null,c=m=!1,$===63&&(p=e.input.charCodeAt(e.position+1),Re(p)&&(c=m=!0,e.position++,ae(e,!0,t))),r=e.line,i=e.lineStart,a=e.position,dn(e,t,Vr,!1,!0),S=e.tag,A=e.result,ae(e,!0,t),$=e.input.charCodeAt(e.position),(m||e.line===r)&&$===58&&(c=!0,$=e.input.charCodeAt(++e.position),ae(e,!0,t),dn(e,t,Vr,!1,!0),C=e.result),y?Jt(e,s,w,S,A,C,r,i,a):c?s.push(Jt(e,null,w,S,A,C,r,i,a)):s.push(A),ae(e,!0,t),$=e.input.charCodeAt(e.position),$===44?(n=!0,$=e.input.charCodeAt(++e.position)):n=!1}N(e,"unexpected end of the stream within a flow collection")}function Tg(e,t){var n,r,i=qi,a=!1,o=!1,s=t,l=0,p=!1,f,c;if(c=e.input.charCodeAt(e.position),c===124)r=!1;else if(c===62)r=!0;else return!1;for(e.kind="scalar",e.result="";c!==0;)if(c=e.input.charCodeAt(++e.position),c===43||c===45)qi===i?i=c===43?Yo:ug:N(e,"repeat of a chomping mode identifier");else if((f=mg(c))>=0)f===0?N(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):o?N(e,"repeat of an indentation width identifier"):(s=t+f-1,o=!0);else break;if(Nt(c)){do c=e.input.charCodeAt(++e.position);while(Nt(c));if(c===35)do c=e.input.charCodeAt(++e.position);while(!We(c)&&c!==0)}for(;c!==0;){for(Ha(e),e.lineIndent=0,c=e.input.charCodeAt(e.position);(!o||e.lineIndent<s)&&c===32;)e.lineIndent++,c=e.input.charCodeAt(++e.position);if(!o&&e.lineIndent>s&&(s=e.lineIndent),We(c)){l++;continue}if(e.lineIndent<s){i===Yo?e.result+=St.repeat(`
`,a?1+l:l):i===qi&&a&&(e.result+=`
`);break}for(r?Nt(c)?(p=!0,e.result+=St.repeat(`
`,a?1+l:l)):p?(p=!1,e.result+=St.repeat(`
`,l+1)):l===0?a&&(e.result+=" "):e.result+=St.repeat(`
`,l):e.result+=St.repeat(`
`,a?1+l:l),a=!0,o=!0,l=0,n=e.position;!We(c)&&c!==0;)c=e.input.charCodeAt(++e.position);dt(e,n,e.position,!1)}return!0}function Jo(e,t){var n,r=e.tag,i=e.anchor,a=[],o,s=!1,l;if(e.firstTabInLine!==-1)return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=a),l=e.input.charCodeAt(e.position);l!==0&&(e.firstTabInLine!==-1&&(e.position=e.firstTabInLine,N(e,"tab characters must not be used in indentation")),!(l!==45||(o=e.input.charCodeAt(e.position+1),!Re(o))));){if(s=!0,e.position++,ae(e,!0,-1)&&e.lineIndent<=t){a.push(null),l=e.input.charCodeAt(e.position);continue}if(n=e.line,dn(e,t,Pu,!1,!0),a.push(e.result),ae(e,!0,-1),l=e.input.charCodeAt(e.position),(e.line===n||e.lineIndent>t)&&l!==0)N(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break}return s?(e.tag=r,e.anchor=i,e.kind="sequence",e.result=a,!0):!1}function Ag(e,t,n){var r,i,a,o,s,l,p=e.tag,f=e.anchor,c={},m=Object.create(null),y=null,w=null,A=null,S=!1,C=!1,$;if(e.firstTabInLine!==-1)return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=c),$=e.input.charCodeAt(e.position);$!==0;){if(!S&&e.firstTabInLine!==-1&&(e.position=e.firstTabInLine,N(e,"tab characters must not be used in indentation")),r=e.input.charCodeAt(e.position+1),a=e.line,($===63||$===58)&&Re(r))$===63?(S&&(Jt(e,c,m,y,w,null,o,s,l),y=w=A=null),C=!0,S=!0,i=!0):S?(S=!1,i=!0):N(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,$=r;else{if(o=e.line,s=e.lineStart,l=e.position,!dn(e,n,Du,!1,!0))break;if(e.line===a){for($=e.input.charCodeAt(e.position);Nt($);)$=e.input.charCodeAt(++e.position);if($===58)$=e.input.charCodeAt(++e.position),Re($)||N(e,"a whitespace character is expected after the key-value separator within a block mapping"),S&&(Jt(e,c,m,y,w,null,o,s,l),y=w=A=null),C=!0,S=!1,i=!1,y=e.tag,w=e.result;else if(C)N(e,"can not read an implicit mapping pair; a colon is missed");else return e.tag=p,e.anchor=f,!0}else if(C)N(e,"can not read a block mapping entry; a multiline key may not be an implicit key");else return e.tag=p,e.anchor=f,!0}if((e.line===a||e.lineIndent>t)&&(S&&(o=e.line,s=e.lineStart,l=e.position),dn(e,t,Yr,!0,i)&&(S?w=e.result:A=e.result),S||(Jt(e,c,m,y,w,A,o,s,l),y=w=A=null),ae(e,!0,-1),$=e.input.charCodeAt(e.position)),(e.line===a||e.lineIndent>t)&&$!==0)N(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return S&&Jt(e,c,m,y,w,null,o,s,l),C&&(e.tag=p,e.anchor=f,e.kind="mapping",e.result=c),C}function Sg(e){var t,n=!1,r=!1,i,a,o;if(o=e.input.charCodeAt(e.position),o!==33)return!1;if(e.tag!==null&&N(e,"duplication of a tag property"),o=e.input.charCodeAt(++e.position),o===60?(n=!0,o=e.input.charCodeAt(++e.position)):o===33?(r=!0,i="!!",o=e.input.charCodeAt(++e.position)):i="!",t=e.position,n){do o=e.input.charCodeAt(++e.position);while(o!==0&&o!==62);e.position<e.length?(a=e.input.slice(t,e.position),o=e.input.charCodeAt(++e.position)):N(e,"unexpected end of the stream within a verbatim tag")}else{for(;o!==0&&!Re(o);)o===33&&(r?N(e,"tag suffix cannot contain exclamation marks"):(i=e.input.slice(t-1,e.position+1),Fu.test(i)||N(e,"named tag handle cannot contain such characters"),r=!0,t=e.position+1)),o=e.input.charCodeAt(++e.position);a=e.input.slice(t,e.position),dg.test(a)&&N(e,"tag suffix cannot contain flow indicator characters")}a&&!xu.test(a)&&N(e,"tag name cannot contain such characters: "+a);try{a=decodeURIComponent(a)}catch{N(e,"tag name is malformed: "+a)}return n?e.tag=a:pt.call(e.tagMap,i)?e.tag=e.tagMap[i]+a:i==="!"?e.tag="!"+a:i==="!!"?e.tag="tag:yaml.org,2002:"+a:N(e,'undeclared tag handle "'+i+'"'),!0}function $g(e){var t,n;if(n=e.input.charCodeAt(e.position),n!==38)return!1;for(e.anchor!==null&&N(e,"duplication of an anchor property"),n=e.input.charCodeAt(++e.position),t=e.position;n!==0&&!Re(n)&&!Kt(n);)n=e.input.charCodeAt(++e.position);return e.position===t&&N(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function Cg(e){var t,n,r;if(r=e.input.charCodeAt(e.position),r!==42)return!1;for(r=e.input.charCodeAt(++e.position),t=e.position;r!==0&&!Re(r)&&!Kt(r);)r=e.input.charCodeAt(++e.position);return e.position===t&&N(e,"name of an alias node must contain at least one character"),n=e.input.slice(t,e.position),pt.call(e.anchorMap,n)||N(e,'unidentified alias "'+n+'"'),e.result=e.anchorMap[n],ae(e,!0,-1),!0}function dn(e,t,n,r,i){var a,o,s,l=1,p=!1,f=!1,c,m,y,w,A,S;if(e.listener!==null&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,a=o=s=Yr===n||Pu===n,r&&ae(e,!0,-1)&&(p=!0,e.lineIndent>t?l=1:e.lineIndent===t?l=0:e.lineIndent<t&&(l=-1)),l===1)for(;Sg(e)||$g(e);)ae(e,!0,-1)?(p=!0,s=a,e.lineIndent>t?l=1:e.lineIndent===t?l=0:e.lineIndent<t&&(l=-1)):s=!1;if(s&&(s=p||i),(l===1||Yr===n)&&(Vr===n||Du===n?A=t:A=t+1,S=e.position-e.lineStart,l===1?s&&(Jo(e,S)||Ag(e,S,A))||_g(e,A)?f=!0:(o&&Tg(e,A)||vg(e,A)||wg(e,A)?f=!0:Cg(e)?(f=!0,(e.tag!==null||e.anchor!==null)&&N(e,"alias node should not have any properties")):Eg(e,A,Vr===n)&&(f=!0,e.tag===null&&(e.tag="?")),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):l===0&&(f=s&&Jo(e,S))),e.tag===null)e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);else if(e.tag==="?"){for(e.result!==null&&e.kind!=="scalar"&&N(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),c=0,m=e.implicitTypes.length;c<m;c+=1)if(w=e.implicitTypes[c],w.resolve(e.result)){e.result=w.construct(e.result),e.tag=w.tag,e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);break}}else if(e.tag!=="!"){if(pt.call(e.typeMap[e.kind||"fallback"],e.tag))w=e.typeMap[e.kind||"fallback"][e.tag];else for(w=null,y=e.typeMap.multi[e.kind||"fallback"],c=0,m=y.length;c<m;c+=1)if(e.tag.slice(0,y[c].tag.length)===y[c].tag){w=y[c];break}w||N(e,"unknown tag !<"+e.tag+">"),e.result!==null&&w.kind!==e.kind&&N(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+w.kind+'", not "'+e.kind+'"'),w.resolve(e.result,e.tag)?(e.result=w.construct(e.result,e.tag),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):N(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")}return e.listener!==null&&e.listener("close",e),e.tag!==null||e.anchor!==null||f}function bg(e){var t=e.position,n,r,i,a=!1,o;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap=Object.create(null),e.anchorMap=Object.create(null);(o=e.input.charCodeAt(e.position))!==0&&(ae(e,!0,-1),o=e.input.charCodeAt(e.position),!(e.lineIndent>0||o!==37));){for(a=!0,o=e.input.charCodeAt(++e.position),n=e.position;o!==0&&!Re(o);)o=e.input.charCodeAt(++e.position);for(r=e.input.slice(n,e.position),i=[],r.length<1&&N(e,"directive name must not be less than one character in length");o!==0;){for(;Nt(o);)o=e.input.charCodeAt(++e.position);if(o===35){do o=e.input.charCodeAt(++e.position);while(o!==0&&!We(o));break}if(We(o))break;for(n=e.position;o!==0&&!Re(o);)o=e.input.charCodeAt(++e.position);i.push(e.input.slice(n,e.position))}o!==0&&Ha(e),pt.call(zo,r)?zo[r](e,r,i):Wr(e,'unknown document directive "'+r+'"')}if(ae(e,!0,-1),e.lineIndent===0&&e.input.charCodeAt(e.position)===45&&e.input.charCodeAt(e.position+1)===45&&e.input.charCodeAt(e.position+2)===45?(e.position+=3,ae(e,!0,-1)):a&&N(e,"directives end mark is expected"),dn(e,e.lineIndent-1,Yr,!1,!0),ae(e,!0,-1),e.checkLineBreaks&&fg.test(e.input.slice(t,e.position))&&Wr(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&ai(e)){e.input.charCodeAt(e.position)===46&&(e.position+=3,ae(e,!0,-1));return}if(e.position<e.length-1)N(e,"end of the stream or a document separator is expected");else return}function Mu(e,t){e=String(e),t=t||{},e.length!==0&&(e.charCodeAt(e.length-1)!==10&&e.charCodeAt(e.length-1)!==13&&(e+=`
`),e.charCodeAt(0)===65279&&(e=e.slice(1)));var n=new yg(e,t),r=e.indexOf("\0");for(r!==-1&&(n.position=r,N(n,"null byte is not allowed in input")),n.input+="\0";n.input.charCodeAt(n.position)===32;)n.lineIndent+=1,n.position+=1;for(;n.position<n.length-1;)bg(n);return n.documents}function Og(e,t,n){t!==null&&typeof t=="object"&&typeof n>"u"&&(n=t,t=null);var r=Mu(e,n);if(typeof t!="function")return r;for(var i=0,a=r.length;i<a;i+=1)t(r[i])}function Ng(e,t){var n=Mu(e,t);if(n.length!==0){if(n.length===1)return n[0];throw new Ru("expected a single document in the stream, but found more")}}Ma.loadAll=Og;Ma.load=Ng;var Bu={},oi=je,rr=nr,Ig=qa,qu=Object.prototype.toString,Hu=Object.prototype.hasOwnProperty,Ga=65279,Rg=9,Wn=10,Dg=13,Pg=32,Fg=33,xg=34,ya=35,Lg=37,Ug=38,kg=39,Mg=42,ju=44,Bg=45,Xr=58,qg=61,Hg=62,jg=63,Gg=64,Gu=91,Vu=93,Vg=96,Yu=123,Yg=124,Wu=125,_e={};_e[0]="\\0";_e[7]="\\a";_e[8]="\\b";_e[9]="\\t";_e[10]="\\n";_e[11]="\\v";_e[12]="\\f";_e[13]="\\r";_e[27]="\\e";_e[34]='\\"';_e[92]="\\\\";_e[133]="\\N";_e[160]="\\_";_e[8232]="\\L";_e[8233]="\\P";var Wg=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"],Xg=/^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;function zg(e,t){var n,r,i,a,o,s,l;if(t===null)return{};for(n={},r=Object.keys(t),i=0,a=r.length;i<a;i+=1)o=r[i],s=String(t[o]),o.slice(0,2)==="!!"&&(o="tag:yaml.org,2002:"+o.slice(2)),l=e.compiledTypeMap.fallback[o],l&&Hu.call(l.styleAliases,s)&&(s=l.styleAliases[s]),n[o]=s;return n}function Kg(e){var t,n,r;if(t=e.toString(16).toUpperCase(),e<=255)n="x",r=2;else if(e<=65535)n="u",r=4;else if(e<=4294967295)n="U",r=8;else throw new rr("code point within a string may not be greater than 0xFFFFFFFF");return"\\"+n+oi.repeat("0",r-t.length)+t}var Jg=1,Xn=2;function Qg(e){this.schema=e.schema||Ig,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=oi.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=zg(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.quotingType=e.quotingType==='"'?Xn:Jg,this.forceQuotes=e.forceQuotes||!1,this.replacer=typeof e.replacer=="function"?e.replacer:null,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function Qo(e,t){for(var n=oi.repeat(" ",t),r=0,i=-1,a="",o,s=e.length;r<s;)i=e.indexOf(`
`,r),i===-1?(o=e.slice(r),r=s):(o=e.slice(r,i+1),r=i+1),o.length&&o!==`
`&&(a+=n),a+=o;return a}function Ea(e,t){return`
`+oi.repeat(" ",e.indent*t)}function Zg(e,t){var n,r,i;for(n=0,r=e.implicitTypes.length;n<r;n+=1)if(i=e.implicitTypes[n],i.resolve(t))return!0;return!1}function zr(e){return e===Pg||e===Rg}function zn(e){return 32<=e&&e<=126||161<=e&&e<=55295&&e!==8232&&e!==8233||57344<=e&&e<=65533&&e!==Ga||65536<=e&&e<=1114111}function Zo(e){return zn(e)&&e!==Ga&&e!==Dg&&e!==Wn}function es(e,t,n){var r=Zo(e),i=r&&!zr(e);return(n?r:r&&e!==ju&&e!==Gu&&e!==Vu&&e!==Yu&&e!==Wu)&&e!==ya&&!(t===Xr&&!i)||Zo(t)&&!zr(t)&&e===ya||t===Xr&&i}function e0(e){return zn(e)&&e!==Ga&&!zr(e)&&e!==Bg&&e!==jg&&e!==Xr&&e!==ju&&e!==Gu&&e!==Vu&&e!==Yu&&e!==Wu&&e!==ya&&e!==Ug&&e!==Mg&&e!==Fg&&e!==Yg&&e!==qg&&e!==Hg&&e!==kg&&e!==xg&&e!==Lg&&e!==Gg&&e!==Vg}function t0(e){return!zr(e)&&e!==Xr}function Fn(e,t){var n=e.charCodeAt(t),r;return n>=55296&&n<=56319&&t+1<e.length&&(r=e.charCodeAt(t+1),r>=56320&&r<=57343)?(n-55296)*1024+r-56320+65536:n}function Xu(e){var t=/^\n* /;return t.test(e)}var zu=1,va=2,Ku=3,Ju=4,Xt=5;function n0(e,t,n,r,i,a,o,s){var l,p=0,f=null,c=!1,m=!1,y=r!==-1,w=-1,A=e0(Fn(e,0))&&t0(Fn(e,e.length-1));if(t||o)for(l=0;l<e.length;p>=65536?l+=2:l++){if(p=Fn(e,l),!zn(p))return Xt;A=A&&es(p,f,s),f=p}else{for(l=0;l<e.length;p>=65536?l+=2:l++){if(p=Fn(e,l),p===Wn)c=!0,y&&(m=m||l-w-1>r&&e[w+1]!==" ",w=l);else if(!zn(p))return Xt;A=A&&es(p,f,s),f=p}m=m||y&&l-w-1>r&&e[w+1]!==" "}return!c&&!m?A&&!o&&!i(e)?zu:a===Xn?Xt:va:n>9&&Xu(e)?Xt:o?a===Xn?Xt:va:m?Ju:Ku}function r0(e,t,n,r,i){e.dump=function(){if(t.length===0)return e.quotingType===Xn?'""':"''";if(!e.noCompatMode&&(Wg.indexOf(t)!==-1||Xg.test(t)))return e.quotingType===Xn?'"'+t+'"':"'"+t+"'";var a=e.indent*Math.max(1,n),o=e.lineWidth===-1?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-a),s=r||e.flowLevel>-1&&n>=e.flowLevel;function l(p){return Zg(e,p)}switch(n0(t,s,e.indent,o,l,e.quotingType,e.forceQuotes&&!r,i)){case zu:return t;case va:return"'"+t.replace(/'/g,"''")+"'";case Ku:return"|"+ts(t,e.indent)+ns(Qo(t,a));case Ju:return">"+ts(t,e.indent)+ns(Qo(i0(t,o),a));case Xt:return'"'+a0(t)+'"';default:throw new rr("impossible error: invalid scalar style")}}()}function ts(e,t){var n=Xu(e)?String(t):"",r=e[e.length-1]===`
`,i=r&&(e[e.length-2]===`
`||e===`
`),a=i?"+":r?"":"-";return n+a+`
`}function ns(e){return e[e.length-1]===`
`?e.slice(0,-1):e}function i0(e,t){for(var n=/(\n+)([^\n]*)/g,r=function(){var p=e.indexOf(`
`);return p=p!==-1?p:e.length,n.lastIndex=p,rs(e.slice(0,p),t)}(),i=e[0]===`
`||e[0]===" ",a,o;o=n.exec(e);){var s=o[1],l=o[2];a=l[0]===" ",r+=s+(!i&&!a&&l!==""?`
`:"")+rs(l,t),i=a}return r}function rs(e,t){if(e===""||e[0]===" ")return e;for(var n=/ [^ ]/g,r,i=0,a,o=0,s=0,l="";r=n.exec(e);)s=r.index,s-i>t&&(a=o>i?o:s,l+=`
`+e.slice(i,a),i=a+1),o=s;return l+=`
`,e.length-i>t&&o>i?l+=e.slice(i,o)+`
`+e.slice(o+1):l+=e.slice(i),l.slice(1)}function a0(e){for(var t="",n=0,r,i=0;i<e.length;n>=65536?i+=2:i++)n=Fn(e,i),r=_e[n],!r&&zn(n)?(t+=e[i],n>=65536&&(t+=e[i+1])):t+=r||Kg(n);return t}function o0(e,t,n){var r="",i=e.tag,a,o,s;for(a=0,o=n.length;a<o;a+=1)s=n[a],e.replacer&&(s=e.replacer.call(n,String(a),s)),(nt(e,t,s,!1,!1)||typeof s>"u"&&nt(e,t,null,!1,!1))&&(r!==""&&(r+=","+(e.condenseFlow?"":" ")),r+=e.dump);e.tag=i,e.dump="["+r+"]"}function is(e,t,n,r){var i="",a=e.tag,o,s,l;for(o=0,s=n.length;o<s;o+=1)l=n[o],e.replacer&&(l=e.replacer.call(n,String(o),l)),(nt(e,t+1,l,!0,!0,!1,!0)||typeof l>"u"&&nt(e,t+1,null,!0,!0,!1,!0))&&((!r||i!=="")&&(i+=Ea(e,t)),e.dump&&Wn===e.dump.charCodeAt(0)?i+="-":i+="- ",i+=e.dump);e.tag=a,e.dump=i||"[]"}function s0(e,t,n){var r="",i=e.tag,a=Object.keys(n),o,s,l,p,f;for(o=0,s=a.length;o<s;o+=1)f="",r!==""&&(f+=", "),e.condenseFlow&&(f+='"'),l=a[o],p=n[l],e.replacer&&(p=e.replacer.call(n,l,p)),nt(e,t,l,!1,!1)&&(e.dump.length>1024&&(f+="? "),f+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),nt(e,t,p,!1,!1)&&(f+=e.dump,r+=f));e.tag=i,e.dump="{"+r+"}"}function l0(e,t,n,r){var i="",a=e.tag,o=Object.keys(n),s,l,p,f,c,m;if(e.sortKeys===!0)o.sort();else if(typeof e.sortKeys=="function")o.sort(e.sortKeys);else if(e.sortKeys)throw new rr("sortKeys must be a boolean or a function");for(s=0,l=o.length;s<l;s+=1)m="",(!r||i!=="")&&(m+=Ea(e,t)),p=o[s],f=n[p],e.replacer&&(f=e.replacer.call(n,p,f)),nt(e,t+1,p,!0,!0,!0)&&(c=e.tag!==null&&e.tag!=="?"||e.dump&&e.dump.length>1024,c&&(e.dump&&Wn===e.dump.charCodeAt(0)?m+="?":m+="? "),m+=e.dump,c&&(m+=Ea(e,t)),nt(e,t+1,f,!0,c)&&(e.dump&&Wn===e.dump.charCodeAt(0)?m+=":":m+=": ",m+=e.dump,i+=m));e.tag=a,e.dump=i||"{}"}function as(e,t,n){var r,i,a,o,s,l;for(i=n?e.explicitTypes:e.implicitTypes,a=0,o=i.length;a<o;a+=1)if(s=i[a],(s.instanceOf||s.predicate)&&(!s.instanceOf||typeof t=="object"&&t instanceof s.instanceOf)&&(!s.predicate||s.predicate(t))){if(n?s.multi&&s.representName?e.tag=s.representName(t):e.tag=s.tag:e.tag="?",s.represent){if(l=e.styleMap[s.tag]||s.defaultStyle,qu.call(s.represent)==="[object Function]")r=s.represent(t,l);else if(Hu.call(s.represent,l))r=s.represent[l](t,l);else throw new rr("!<"+s.tag+'> tag resolver accepts not "'+l+'" style');e.dump=r}return!0}return!1}function nt(e,t,n,r,i,a,o){e.tag=null,e.dump=n,as(e,n,!1)||as(e,n,!0);var s=qu.call(e.dump),l=r,p;r&&(r=e.flowLevel<0||e.flowLevel>t);var f=s==="[object Object]"||s==="[object Array]",c,m;if(f&&(c=e.duplicates.indexOf(n),m=c!==-1),(e.tag!==null&&e.tag!=="?"||m||e.indent!==2&&t>0)&&(i=!1),m&&e.usedDuplicates[c])e.dump="*ref_"+c;else{if(f&&m&&!e.usedDuplicates[c]&&(e.usedDuplicates[c]=!0),s==="[object Object]")r&&Object.keys(e.dump).length!==0?(l0(e,t,e.dump,i),m&&(e.dump="&ref_"+c+e.dump)):(s0(e,t,e.dump),m&&(e.dump="&ref_"+c+" "+e.dump));else if(s==="[object Array]")r&&e.dump.length!==0?(e.noArrayIndent&&!o&&t>0?is(e,t-1,e.dump,i):is(e,t,e.dump,i),m&&(e.dump="&ref_"+c+e.dump)):(o0(e,t,e.dump),m&&(e.dump="&ref_"+c+" "+e.dump));else if(s==="[object String]")e.tag!=="?"&&r0(e,e.dump,t,a,l);else{if(s==="[object Undefined]")return!1;if(e.skipInvalid)return!1;throw new rr("unacceptable kind of an object to dump "+s)}e.tag!==null&&e.tag!=="?"&&(p=encodeURI(e.tag[0]==="!"?e.tag.slice(1):e.tag).replace(/!/g,"%21"),e.tag[0]==="!"?p="!"+p:p.slice(0,18)==="tag:yaml.org,2002:"?p="!!"+p.slice(18):p="!<"+p+">",e.dump=p+" "+e.dump)}return!0}function u0(e,t){var n=[],r=[],i,a;for(wa(e,n,r),i=0,a=r.length;i<a;i+=1)t.duplicates.push(n[r[i]]);t.usedDuplicates=new Array(a)}function wa(e,t,n){var r,i,a;if(e!==null&&typeof e=="object")if(i=t.indexOf(e),i!==-1)n.indexOf(i)===-1&&n.push(i);else if(t.push(e),Array.isArray(e))for(i=0,a=e.length;i<a;i+=1)wa(e[i],t,n);else for(r=Object.keys(e),i=0,a=r.length;i<a;i+=1)wa(e[r[i]],t,n)}function c0(e,t){t=t||{};var n=new Qg(t);n.noRefs||u0(e,n);var r=e;return n.replacer&&(r=n.replacer.call({"":r},"",r)),nt(n,0,r,!0,!0)?n.dump+`
`:""}Bu.dump=c0;var Qu=Ma,f0=Bu;function Va(e,t){return function(){throw new Error("Function yaml."+e+" is removed in js-yaml 4. Use yaml."+t+" instead, which is now safe by default.")}}ye.Type=Ce;ye.Schema=fu;ye.FAILSAFE_SCHEMA=mu;ye.JSON_SCHEMA=_u;ye.CORE_SCHEMA=Tu;ye.DEFAULT_SCHEMA=qa;ye.load=Qu.load;ye.loadAll=Qu.loadAll;ye.dump=f0.dump;ye.YAMLException=nr;ye.types={binary:bu,float:wu,map:pu,null:gu,pairs:Nu,set:Iu,timestamp:$u,bool:yu,int:Eu,merge:Cu,omap:Ou,seq:hu,str:du};ye.safeLoad=Va("safeLoad","load");ye.safeLoadAll=Va("safeLoadAll","loadAll");ye.safeDump=Va("safeDump","dump");var si={};Object.defineProperty(si,"__esModule",{value:!0});si.Lazy=void 0;class d0{constructor(t){this._value=null,this.creator=t}get hasValue(){return this.creator==null}get value(){if(this.creator==null)return this._value;const t=this.creator();return this.value=t,t}set value(t){this._value=t,this.creator=null}}si.Lazy=d0;var mt={exports:{}};const h0="2.0.0",p0=256,m0=Number.MAX_SAFE_INTEGER||9007199254740991,g0=16;var li={SEMVER_SPEC_VERSION:h0,MAX_LENGTH:p0,MAX_SAFE_INTEGER:m0,MAX_SAFE_COMPONENT_LENGTH:g0};const y0=typeof process=="object"&&process.env&&{}.NODE_DEBUG&&/\bsemver\b/i.test({}.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};var ui=y0;(function(e,t){const{MAX_SAFE_COMPONENT_LENGTH:n}=li,r=ui;t=e.exports={};const i=t.re=[],a=t.src=[],o=t.t={};let s=0;const l=(p,f,c)=>{const m=s++;r(p,m,f),o[p]=m,a[m]=f,i[m]=new RegExp(f,c?"g":void 0)};l("NUMERICIDENTIFIER","0|[1-9]\\d*"),l("NUMERICIDENTIFIERLOOSE","[0-9]+"),l("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),l("MAINVERSION",`(${a[o.NUMERICIDENTIFIER]})\\.(${a[o.NUMERICIDENTIFIER]})\\.(${a[o.NUMERICIDENTIFIER]})`),l("MAINVERSIONLOOSE",`(${a[o.NUMERICIDENTIFIERLOOSE]})\\.(${a[o.NUMERICIDENTIFIERLOOSE]})\\.(${a[o.NUMERICIDENTIFIERLOOSE]})`),l("PRERELEASEIDENTIFIER",`(?:${a[o.NUMERICIDENTIFIER]}|${a[o.NONNUMERICIDENTIFIER]})`),l("PRERELEASEIDENTIFIERLOOSE",`(?:${a[o.NUMERICIDENTIFIERLOOSE]}|${a[o.NONNUMERICIDENTIFIER]})`),l("PRERELEASE",`(?:-(${a[o.PRERELEASEIDENTIFIER]}(?:\\.${a[o.PRERELEASEIDENTIFIER]})*))`),l("PRERELEASELOOSE",`(?:-?(${a[o.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${a[o.PRERELEASEIDENTIFIERLOOSE]})*))`),l("BUILDIDENTIFIER","[0-9A-Za-z-]+"),l("BUILD",`(?:\\+(${a[o.BUILDIDENTIFIER]}(?:\\.${a[o.BUILDIDENTIFIER]})*))`),l("FULLPLAIN",`v?${a[o.MAINVERSION]}${a[o.PRERELEASE]}?${a[o.BUILD]}?`),l("FULL",`^${a[o.FULLPLAIN]}$`),l("LOOSEPLAIN",`[v=\\s]*${a[o.MAINVERSIONLOOSE]}${a[o.PRERELEASELOOSE]}?${a[o.BUILD]}?`),l("LOOSE",`^${a[o.LOOSEPLAIN]}$`),l("GTLT","((?:<|>)?=?)"),l("XRANGEIDENTIFIERLOOSE",`${a[o.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),l("XRANGEIDENTIFIER",`${a[o.NUMERICIDENTIFIER]}|x|X|\\*`),l("XRANGEPLAIN",`[v=\\s]*(${a[o.XRANGEIDENTIFIER]})(?:\\.(${a[o.XRANGEIDENTIFIER]})(?:\\.(${a[o.XRANGEIDENTIFIER]})(?:${a[o.PRERELEASE]})?${a[o.BUILD]}?)?)?`),l("XRANGEPLAINLOOSE",`[v=\\s]*(${a[o.XRANGEIDENTIFIERLOOSE]})(?:\\.(${a[o.XRANGEIDENTIFIERLOOSE]})(?:\\.(${a[o.XRANGEIDENTIFIERLOOSE]})(?:${a[o.PRERELEASELOOSE]})?${a[o.BUILD]}?)?)?`),l("XRANGE",`^${a[o.GTLT]}\\s*${a[o.XRANGEPLAIN]}$`),l("XRANGELOOSE",`^${a[o.GTLT]}\\s*${a[o.XRANGEPLAINLOOSE]}$`),l("COERCE",`(^|[^\\d])(\\d{1,${n}})(?:\\.(\\d{1,${n}}))?(?:\\.(\\d{1,${n}}))?(?:$|[^\\d])`),l("COERCERTL",a[o.COERCE],!0),l("LONETILDE","(?:~>?)"),l("TILDETRIM",`(\\s*)${a[o.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",l("TILDE",`^${a[o.LONETILDE]}${a[o.XRANGEPLAIN]}$`),l("TILDELOOSE",`^${a[o.LONETILDE]}${a[o.XRANGEPLAINLOOSE]}$`),l("LONECARET","(?:\\^)"),l("CARETTRIM",`(\\s*)${a[o.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",l("CARET",`^${a[o.LONECARET]}${a[o.XRANGEPLAIN]}$`),l("CARETLOOSE",`^${a[o.LONECARET]}${a[o.XRANGEPLAINLOOSE]}$`),l("COMPARATORLOOSE",`^${a[o.GTLT]}\\s*(${a[o.LOOSEPLAIN]})$|^$`),l("COMPARATOR",`^${a[o.GTLT]}\\s*(${a[o.FULLPLAIN]})$|^$`),l("COMPARATORTRIM",`(\\s*)${a[o.GTLT]}\\s*(${a[o.LOOSEPLAIN]}|${a[o.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",l("HYPHENRANGE",`^\\s*(${a[o.XRANGEPLAIN]})\\s+-\\s+(${a[o.XRANGEPLAIN]})\\s*$`),l("HYPHENRANGELOOSE",`^\\s*(${a[o.XRANGEPLAINLOOSE]})\\s+-\\s+(${a[o.XRANGEPLAINLOOSE]})\\s*$`),l("STAR","(<|>)?=?\\s*\\*"),l("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$"),l("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$")})(mt,mt.exports);const E0=["includePrerelease","loose","rtl"],v0=e=>e?typeof e!="object"?{loose:!0}:E0.filter(t=>e[t]).reduce((t,n)=>(t[n]=!0,t),{}):{};var ci=v0;const os=/^[0-9]+$/,Zu=(e,t)=>{const n=os.test(e),r=os.test(t);return n&&r&&(e=+e,t=+t),e===t?0:n&&!r?-1:r&&!n?1:e<t?-1:1},w0=(e,t)=>Zu(t,e);var _a={compareIdentifiers:Zu,rcompareIdentifiers:w0};const $r=ui,{MAX_LENGTH:ss,MAX_SAFE_INTEGER:Cr}=li,{re:ls,t:us}=mt.exports,_0=ci,{compareIdentifiers:jt}=_a;class Me{constructor(t,n){if(n=_0(n),t instanceof Me){if(t.loose===!!n.loose&&t.includePrerelease===!!n.includePrerelease)return t;t=t.version}else if(typeof t!="string")throw new TypeError(`Invalid Version: ${t}`);if(t.length>ss)throw new TypeError(`version is longer than ${ss} characters`);$r("SemVer",t,n),this.options=n,this.loose=!!n.loose,this.includePrerelease=!!n.includePrerelease;const r=t.trim().match(n.loose?ls[us.LOOSE]:ls[us.FULL]);if(!r)throw new TypeError(`Invalid Version: ${t}`);if(this.raw=t,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>Cr||this.major<0)throw new TypeError("Invalid major version");if(this.minor>Cr||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>Cr||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map(i=>{if(/^[0-9]+$/.test(i)){const a=+i;if(a>=0&&a<Cr)return a}return i}):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(t){if($r("SemVer.compare",this.version,this.options,t),!(t instanceof Me)){if(typeof t=="string"&&t===this.version)return 0;t=new Me(t,this.options)}return t.version===this.version?0:this.compareMain(t)||this.comparePre(t)}compareMain(t){return t instanceof Me||(t=new Me(t,this.options)),jt(this.major,t.major)||jt(this.minor,t.minor)||jt(this.patch,t.patch)}comparePre(t){if(t instanceof Me||(t=new Me(t,this.options)),this.prerelease.length&&!t.prerelease.length)return-1;if(!this.prerelease.length&&t.prerelease.length)return 1;if(!this.prerelease.length&&!t.prerelease.length)return 0;let n=0;do{const r=this.prerelease[n],i=t.prerelease[n];if($r("prerelease compare",n,r,i),r===void 0&&i===void 0)return 0;if(i===void 0)return 1;if(r===void 0)return-1;if(r===i)continue;return jt(r,i)}while(++n)}compareBuild(t){t instanceof Me||(t=new Me(t,this.options));let n=0;do{const r=this.build[n],i=t.build[n];if($r("prerelease compare",n,r,i),r===void 0&&i===void 0)return 0;if(i===void 0)return 1;if(r===void 0)return-1;if(r===i)continue;return jt(r,i)}while(++n)}inc(t,n){switch(t){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",n);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",n);break;case"prepatch":this.prerelease.length=0,this.inc("patch",n),this.inc("pre",n);break;case"prerelease":this.prerelease.length===0&&this.inc("patch",n),this.inc("pre",n);break;case"major":(this.minor!==0||this.patch!==0||this.prerelease.length===0)&&this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":(this.patch!==0||this.prerelease.length===0)&&this.minor++,this.patch=0,this.prerelease=[];break;case"patch":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case"pre":if(this.prerelease.length===0)this.prerelease=[0];else{let r=this.prerelease.length;for(;--r>=0;)typeof this.prerelease[r]=="number"&&(this.prerelease[r]++,r=-2);r===-1&&this.prerelease.push(0)}n&&(jt(this.prerelease[0],n)===0?isNaN(this.prerelease[1])&&(this.prerelease=[n,0]):this.prerelease=[n,0]);break;default:throw new Error(`invalid increment argument: ${t}`)}return this.format(),this.raw=this.version,this}}var be=Me;const{MAX_LENGTH:T0}=li,{re:cs,t:fs}=mt.exports,ds=be,A0=ci,S0=(e,t)=>{if(t=A0(t),e instanceof ds)return e;if(typeof e!="string"||e.length>T0||!(t.loose?cs[fs.LOOSE]:cs[fs.FULL]).test(e))return null;try{return new ds(e,t)}catch{return null}};var En=S0;const $0=En,C0=(e,t)=>{const n=$0(e,t);return n?n.version:null};var b0=C0;const O0=En,N0=(e,t)=>{const n=O0(e.trim().replace(/^[=v]+/,""),t);return n?n.version:null};var I0=N0;const hs=be,R0=(e,t,n,r)=>{typeof n=="string"&&(r=n,n=void 0);try{return new hs(e instanceof hs?e.version:e,n).inc(t,r).version}catch{return null}};var D0=R0;const ps=be,P0=(e,t,n)=>new ps(e,n).compare(new ps(t,n));var Ge=P0;const F0=Ge,x0=(e,t,n)=>F0(e,t,n)===0;var Ya=x0;const ms=En,L0=Ya,U0=(e,t)=>{if(L0(e,t))return null;{const n=ms(e),r=ms(t),i=n.prerelease.length||r.prerelease.length,a=i?"pre":"",o=i?"prerelease":"";for(const s in n)if((s==="major"||s==="minor"||s==="patch")&&n[s]!==r[s])return a+s;return o}};var k0=U0;const M0=be,B0=(e,t)=>new M0(e,t).major;var q0=B0;const H0=be,j0=(e,t)=>new H0(e,t).minor;var G0=j0;const V0=be,Y0=(e,t)=>new V0(e,t).patch;var W0=Y0;const X0=En,z0=(e,t)=>{const n=X0(e,t);return n&&n.prerelease.length?n.prerelease:null};var K0=z0;const J0=Ge,Q0=(e,t,n)=>J0(t,e,n);var Z0=Q0;const ey=Ge,ty=(e,t)=>ey(e,t,!0);var ny=ty;const gs=be,ry=(e,t,n)=>{const r=new gs(e,n),i=new gs(t,n);return r.compare(i)||r.compareBuild(i)};var Wa=ry;const iy=Wa,ay=(e,t)=>e.sort((n,r)=>iy(n,r,t));var oy=ay;const sy=Wa,ly=(e,t)=>e.sort((n,r)=>sy(r,n,t));var uy=ly;const cy=Ge,fy=(e,t,n)=>cy(e,t,n)>0;var fi=fy;const dy=Ge,hy=(e,t,n)=>dy(e,t,n)<0;var Xa=hy;const py=Ge,my=(e,t,n)=>py(e,t,n)!==0;var ec=my;const gy=Ge,yy=(e,t,n)=>gy(e,t,n)>=0;var za=yy;const Ey=Ge,vy=(e,t,n)=>Ey(e,t,n)<=0;var Ka=vy;const wy=Ya,_y=ec,Ty=fi,Ay=za,Sy=Xa,$y=Ka,Cy=(e,t,n,r)=>{switch(t){case"===":return typeof e=="object"&&(e=e.version),typeof n=="object"&&(n=n.version),e===n;case"!==":return typeof e=="object"&&(e=e.version),typeof n=="object"&&(n=n.version),e!==n;case"":case"=":case"==":return wy(e,n,r);case"!=":return _y(e,n,r);case">":return Ty(e,n,r);case">=":return Ay(e,n,r);case"<":return Sy(e,n,r);case"<=":return $y(e,n,r);default:throw new TypeError(`Invalid operator: ${t}`)}};var tc=Cy;const by=be,Oy=En,{re:br,t:Or}=mt.exports,Ny=(e,t)=>{if(e instanceof by)return e;if(typeof e=="number"&&(e=String(e)),typeof e!="string")return null;t=t||{};let n=null;if(!t.rtl)n=e.match(br[Or.COERCE]);else{let r;for(;(r=br[Or.COERCERTL].exec(e))&&(!n||n.index+n[0].length!==e.length);)(!n||r.index+r[0].length!==n.index+n[0].length)&&(n=r),br[Or.COERCERTL].lastIndex=r.index+r[1].length+r[2].length;br[Or.COERCERTL].lastIndex=-1}return n===null?null:Oy(`${n[2]}.${n[3]||"0"}.${n[4]||"0"}`,t)};var Iy=Ny,Ry=k;k.Node=Pt;k.create=k;function k(e){var t=this;if(t instanceof k||(t=new k),t.tail=null,t.head=null,t.length=0,e&&typeof e.forEach=="function")e.forEach(function(i){t.push(i)});else if(arguments.length>0)for(var n=0,r=arguments.length;n<r;n++)t.push(arguments[n]);return t}k.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var t=e.next,n=e.prev;return t&&(t.prev=n),n&&(n.next=t),e===this.head&&(this.head=t),e===this.tail&&(this.tail=n),e.list.length--,e.next=null,e.prev=null,e.list=null,t};k.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var t=this.head;e.list=this,e.next=t,t&&(t.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}};k.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var t=this.tail;e.list=this,e.prev=t,t&&(t.next=e),this.tail=e,this.head||(this.head=e),this.length++}};k.prototype.push=function(){for(var e=0,t=arguments.length;e<t;e++)Py(this,arguments[e]);return this.length};k.prototype.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)Fy(this,arguments[e]);return this.length};k.prototype.pop=function(){if(!!this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}};k.prototype.shift=function(){if(!!this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}};k.prototype.forEach=function(e,t){t=t||this;for(var n=this.head,r=0;n!==null;r++)e.call(t,n.value,r,this),n=n.next};k.prototype.forEachReverse=function(e,t){t=t||this;for(var n=this.tail,r=this.length-1;n!==null;r--)e.call(t,n.value,r,this),n=n.prev};k.prototype.get=function(e){for(var t=0,n=this.head;n!==null&&t<e;t++)n=n.next;if(t===e&&n!==null)return n.value};k.prototype.getReverse=function(e){for(var t=0,n=this.tail;n!==null&&t<e;t++)n=n.prev;if(t===e&&n!==null)return n.value};k.prototype.map=function(e,t){t=t||this;for(var n=new k,r=this.head;r!==null;)n.push(e.call(t,r.value,this)),r=r.next;return n};k.prototype.mapReverse=function(e,t){t=t||this;for(var n=new k,r=this.tail;r!==null;)n.push(e.call(t,r.value,this)),r=r.prev;return n};k.prototype.reduce=function(e,t){var n,r=this.head;if(arguments.length>1)n=t;else if(this.head)r=this.head.next,n=this.head.value;else throw new TypeError("Reduce of empty list with no initial value");for(var i=0;r!==null;i++)n=e(n,r.value,i),r=r.next;return n};k.prototype.reduceReverse=function(e,t){var n,r=this.tail;if(arguments.length>1)n=t;else if(this.tail)r=this.tail.prev,n=this.tail.value;else throw new TypeError("Reduce of empty list with no initial value");for(var i=this.length-1;r!==null;i--)n=e(n,r.value,i),r=r.prev;return n};k.prototype.toArray=function(){for(var e=new Array(this.length),t=0,n=this.head;n!==null;t++)e[t]=n.value,n=n.next;return e};k.prototype.toArrayReverse=function(){for(var e=new Array(this.length),t=0,n=this.tail;n!==null;t++)e[t]=n.value,n=n.prev;return e};k.prototype.slice=function(e,t){t=t||this.length,t<0&&(t+=this.length),e=e||0,e<0&&(e+=this.length);var n=new k;if(t<e||t<0)return n;e<0&&(e=0),t>this.length&&(t=this.length);for(var r=0,i=this.head;i!==null&&r<e;r++)i=i.next;for(;i!==null&&r<t;r++,i=i.next)n.push(i.value);return n};k.prototype.sliceReverse=function(e,t){t=t||this.length,t<0&&(t+=this.length),e=e||0,e<0&&(e+=this.length);var n=new k;if(t<e||t<0)return n;e<0&&(e=0),t>this.length&&(t=this.length);for(var r=this.length,i=this.tail;i!==null&&r>t;r--)i=i.prev;for(;i!==null&&r>e;r--,i=i.prev)n.push(i.value);return n};k.prototype.splice=function(e,t,...n){e>this.length&&(e=this.length-1),e<0&&(e=this.length+e);for(var r=0,i=this.head;i!==null&&r<e;r++)i=i.next;for(var a=[],r=0;i&&r<t;r++)a.push(i.value),i=this.removeNode(i);i===null&&(i=this.tail),i!==this.head&&i!==this.tail&&(i=i.prev);for(var r=0;r<n.length;r++)i=Dy(this,i,n[r]);return a};k.prototype.reverse=function(){for(var e=this.head,t=this.tail,n=e;n!==null;n=n.prev){var r=n.prev;n.prev=n.next,n.next=r}return this.head=t,this.tail=e,this};function Dy(e,t,n){var r=t===e.head?new Pt(n,null,t,e):new Pt(n,t,t.next,e);return r.next===null&&(e.tail=r),r.prev===null&&(e.head=r),e.length++,r}function Py(e,t){e.tail=new Pt(t,e.tail,null,e),e.head||(e.head=e.tail),e.length++}function Fy(e,t){e.head=new Pt(t,null,e.head,e),e.tail||(e.tail=e.head),e.length++}function Pt(e,t,n,r){if(!(this instanceof Pt))return new Pt(e,t,n,r);this.list=r,this.value=e,t?(t.next=this,this.prev=t):this.prev=null,n?(n.prev=this,this.next=n):this.next=null}try{require("./iterator.js")(k)}catch{}const xy=Ry,$t=Symbol("max"),et=Symbol("length"),Gt=Symbol("lengthCalculator"),kn=Symbol("allowStale"),bt=Symbol("maxAge"),Qe=Symbol("dispose"),ys=Symbol("noDisposeOnSet"),fe=Symbol("lruList"),Be=Symbol("cache"),nc=Symbol("updateAgeOnGet"),Hi=()=>1;class Ly{constructor(t){if(typeof t=="number"&&(t={max:t}),t||(t={}),t.max&&(typeof t.max!="number"||t.max<0))throw new TypeError("max must be a non-negative number");this[$t]=t.max||1/0;const n=t.length||Hi;if(this[Gt]=typeof n!="function"?Hi:n,this[kn]=t.stale||!1,t.maxAge&&typeof t.maxAge!="number")throw new TypeError("maxAge must be a number");this[bt]=t.maxAge||0,this[Qe]=t.dispose,this[ys]=t.noDisposeOnSet||!1,this[nc]=t.updateAgeOnGet||!1,this.reset()}set max(t){if(typeof t!="number"||t<0)throw new TypeError("max must be a non-negative number");this[$t]=t||1/0,bn(this)}get max(){return this[$t]}set allowStale(t){this[kn]=!!t}get allowStale(){return this[kn]}set maxAge(t){if(typeof t!="number")throw new TypeError("maxAge must be a non-negative number");this[bt]=t,bn(this)}get maxAge(){return this[bt]}set lengthCalculator(t){typeof t!="function"&&(t=Hi),t!==this[Gt]&&(this[Gt]=t,this[et]=0,this[fe].forEach(n=>{n.length=this[Gt](n.value,n.key),this[et]+=n.length})),bn(this)}get lengthCalculator(){return this[Gt]}get length(){return this[et]}get itemCount(){return this[fe].length}rforEach(t,n){n=n||this;for(let r=this[fe].tail;r!==null;){const i=r.prev;Es(this,t,r,n),r=i}}forEach(t,n){n=n||this;for(let r=this[fe].head;r!==null;){const i=r.next;Es(this,t,r,n),r=i}}keys(){return this[fe].toArray().map(t=>t.key)}values(){return this[fe].toArray().map(t=>t.value)}reset(){this[Qe]&&this[fe]&&this[fe].length&&this[fe].forEach(t=>this[Qe](t.key,t.value)),this[Be]=new Map,this[fe]=new xy,this[et]=0}dump(){return this[fe].map(t=>Kr(this,t)?!1:{k:t.key,v:t.value,e:t.now+(t.maxAge||0)}).toArray().filter(t=>t)}dumpLru(){return this[fe]}set(t,n,r){if(r=r||this[bt],r&&typeof r!="number")throw new TypeError("maxAge must be a number");const i=r?Date.now():0,a=this[Gt](n,t);if(this[Be].has(t)){if(a>this[$t])return tn(this,this[Be].get(t)),!1;const l=this[Be].get(t).value;return this[Qe]&&(this[ys]||this[Qe](t,l.value)),l.now=i,l.maxAge=r,l.value=n,this[et]+=a-l.length,l.length=a,this.get(t),bn(this),!0}const o=new Uy(t,n,a,i,r);return o.length>this[$t]?(this[Qe]&&this[Qe](t,n),!1):(this[et]+=o.length,this[fe].unshift(o),this[Be].set(t,this[fe].head),bn(this),!0)}has(t){if(!this[Be].has(t))return!1;const n=this[Be].get(t).value;return!Kr(this,n)}get(t){return ji(this,t,!0)}peek(t){return ji(this,t,!1)}pop(){const t=this[fe].tail;return t?(tn(this,t),t.value):null}del(t){tn(this,this[Be].get(t))}load(t){this.reset();const n=Date.now();for(let r=t.length-1;r>=0;r--){const i=t[r],a=i.e||0;if(a===0)this.set(i.k,i.v);else{const o=a-n;o>0&&this.set(i.k,i.v,o)}}}prune(){this[Be].forEach((t,n)=>ji(this,n,!1))}}const ji=(e,t,n)=>{const r=e[Be].get(t);if(r){const i=r.value;if(Kr(e,i)){if(tn(e,r),!e[kn])return}else n&&(e[nc]&&(r.value.now=Date.now()),e[fe].unshiftNode(r));return i.value}},Kr=(e,t)=>{if(!t||!t.maxAge&&!e[bt])return!1;const n=Date.now()-t.now;return t.maxAge?n>t.maxAge:e[bt]&&n>e[bt]},bn=e=>{if(e[et]>e[$t])for(let t=e[fe].tail;e[et]>e[$t]&&t!==null;){const n=t.prev;tn(e,t),t=n}},tn=(e,t)=>{if(t){const n=t.value;e[Qe]&&e[Qe](n.key,n.value),e[et]-=n.length,e[Be].delete(n.key),e[fe].removeNode(t)}};class Uy{constructor(t,n,r,i,a){this.key=t,this.value=n,this.length=r,this.now=i,this.maxAge=a||0}}const Es=(e,t,n,r)=>{let i=n.value;Kr(e,i)&&(tn(e,n),e[kn]||(i=void 0)),i&&t.call(r,i.value,i.key,e)};var ky=Ly;class Mn{constructor(t,n){if(n=By(n),t instanceof Mn)return t.loose===!!n.loose&&t.includePrerelease===!!n.includePrerelease?t:new Mn(t.raw,n);if(t instanceof Ta)return this.raw=t.value,this.set=[[t]],this.format(),this;if(this.options=n,this.loose=!!n.loose,this.includePrerelease=!!n.includePrerelease,this.raw=t,this.set=t.split("||").map(r=>this.parseRange(r.trim())).filter(r=>r.length),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${t}`);if(this.set.length>1){const r=this.set[0];if(this.set=this.set.filter(i=>!ws(i[0])),this.set.length===0)this.set=[r];else if(this.set.length>1){for(const i of this.set)if(i.length===1&&Vy(i[0])){this.set=[i];break}}}this.format()}format(){return this.range=this.set.map(t=>t.join(" ").trim()).join("||").trim(),this.range}toString(){return this.range}parseRange(t){t=t.trim();const r=`parseRange:${Object.keys(this.options).join(",")}:${t}`,i=vs.get(r);if(i)return i;const a=this.options.loose,o=a?Ne[Te.HYPHENRANGELOOSE]:Ne[Te.HYPHENRANGE];t=t.replace(o,tE(this.options.includePrerelease)),Z("hyphen replace",t),t=t.replace(Ne[Te.COMPARATORTRIM],Hy),Z("comparator trim",t),t=t.replace(Ne[Te.TILDETRIM],jy),t=t.replace(Ne[Te.CARETTRIM],Gy),t=t.split(/\s+/).join(" ");let s=t.split(" ").map(c=>Yy(c,this.options)).join(" ").split(/\s+/).map(c=>eE(c,this.options));a&&(s=s.filter(c=>(Z("loose invalid filter",c,this.options),!!c.match(Ne[Te.COMPARATORLOOSE])))),Z("range list",s);const l=new Map,p=s.map(c=>new Ta(c,this.options));for(const c of p){if(ws(c))return[c];l.set(c.value,c)}l.size>1&&l.has("")&&l.delete("");const f=[...l.values()];return vs.set(r,f),f}intersects(t,n){if(!(t instanceof Mn))throw new TypeError("a Range is required");return this.set.some(r=>_s(r,n)&&t.set.some(i=>_s(i,n)&&r.every(a=>i.every(o=>a.intersects(o,n)))))}test(t){if(!t)return!1;if(typeof t=="string")try{t=new qy(t,this.options)}catch{return!1}for(let n=0;n<this.set.length;n++)if(nE(this.set[n],t,this.options))return!0;return!1}}var Ve=Mn;const My=ky,vs=new My({max:1e3}),By=ci,Ta=di,Z=ui,qy=be,{re:Ne,t:Te,comparatorTrimReplace:Hy,tildeTrimReplace:jy,caretTrimReplace:Gy}=mt.exports,ws=e=>e.value==="<0.0.0-0",Vy=e=>e.value==="",_s=(e,t)=>{let n=!0;const r=e.slice();let i=r.pop();for(;n&&r.length;)n=r.every(a=>i.intersects(a,t)),i=r.pop();return n},Yy=(e,t)=>(Z("comp",e,t),e=zy(e,t),Z("caret",e),e=Wy(e,t),Z("tildes",e),e=Jy(e,t),Z("xrange",e),e=Zy(e,t),Z("stars",e),e),Ae=e=>!e||e.toLowerCase()==="x"||e==="*",Wy=(e,t)=>e.trim().split(/\s+/).map(n=>Xy(n,t)).join(" "),Xy=(e,t)=>{const n=t.loose?Ne[Te.TILDELOOSE]:Ne[Te.TILDE];return e.replace(n,(r,i,a,o,s)=>{Z("tilde",e,r,i,a,o,s);let l;return Ae(i)?l="":Ae(a)?l=`>=${i}.0.0 <${+i+1}.0.0-0`:Ae(o)?l=`>=${i}.${a}.0 <${i}.${+a+1}.0-0`:s?(Z("replaceTilde pr",s),l=`>=${i}.${a}.${o}-${s} <${i}.${+a+1}.0-0`):l=`>=${i}.${a}.${o} <${i}.${+a+1}.0-0`,Z("tilde return",l),l})},zy=(e,t)=>e.trim().split(/\s+/).map(n=>Ky(n,t)).join(" "),Ky=(e,t)=>{Z("caret",e,t);const n=t.loose?Ne[Te.CARETLOOSE]:Ne[Te.CARET],r=t.includePrerelease?"-0":"";return e.replace(n,(i,a,o,s,l)=>{Z("caret",e,i,a,o,s,l);let p;return Ae(a)?p="":Ae(o)?p=`>=${a}.0.0${r} <${+a+1}.0.0-0`:Ae(s)?a==="0"?p=`>=${a}.${o}.0${r} <${a}.${+o+1}.0-0`:p=`>=${a}.${o}.0${r} <${+a+1}.0.0-0`:l?(Z("replaceCaret pr",l),a==="0"?o==="0"?p=`>=${a}.${o}.${s}-${l} <${a}.${o}.${+s+1}-0`:p=`>=${a}.${o}.${s}-${l} <${a}.${+o+1}.0-0`:p=`>=${a}.${o}.${s}-${l} <${+a+1}.0.0-0`):(Z("no pr"),a==="0"?o==="0"?p=`>=${a}.${o}.${s}${r} <${a}.${o}.${+s+1}-0`:p=`>=${a}.${o}.${s}${r} <${a}.${+o+1}.0-0`:p=`>=${a}.${o}.${s} <${+a+1}.0.0-0`),Z("caret return",p),p})},Jy=(e,t)=>(Z("replaceXRanges",e,t),e.split(/\s+/).map(n=>Qy(n,t)).join(" ")),Qy=(e,t)=>{e=e.trim();const n=t.loose?Ne[Te.XRANGELOOSE]:Ne[Te.XRANGE];return e.replace(n,(r,i,a,o,s,l)=>{Z("xRange",e,r,i,a,o,s,l);const p=Ae(a),f=p||Ae(o),c=f||Ae(s),m=c;return i==="="&&m&&(i=""),l=t.includePrerelease?"-0":"",p?i===">"||i==="<"?r="<0.0.0-0":r="*":i&&m?(f&&(o=0),s=0,i===">"?(i=">=",f?(a=+a+1,o=0,s=0):(o=+o+1,s=0)):i==="<="&&(i="<",f?a=+a+1:o=+o+1),i==="<"&&(l="-0"),r=`${i+a}.${o}.${s}${l}`):f?r=`>=${a}.0.0${l} <${+a+1}.0.0-0`:c&&(r=`>=${a}.${o}.0${l} <${a}.${+o+1}.0-0`),Z("xRange return",r),r})},Zy=(e,t)=>(Z("replaceStars",e,t),e.trim().replace(Ne[Te.STAR],"")),eE=(e,t)=>(Z("replaceGTE0",e,t),e.trim().replace(Ne[t.includePrerelease?Te.GTE0PRE:Te.GTE0],"")),tE=e=>(t,n,r,i,a,o,s,l,p,f,c,m,y)=>(Ae(r)?n="":Ae(i)?n=`>=${r}.0.0${e?"-0":""}`:Ae(a)?n=`>=${r}.${i}.0${e?"-0":""}`:o?n=`>=${n}`:n=`>=${n}${e?"-0":""}`,Ae(p)?l="":Ae(f)?l=`<${+p+1}.0.0-0`:Ae(c)?l=`<${p}.${+f+1}.0-0`:m?l=`<=${p}.${f}.${c}-${m}`:e?l=`<${p}.${f}.${+c+1}-0`:l=`<=${l}`,`${n} ${l}`.trim()),nE=(e,t,n)=>{for(let r=0;r<e.length;r++)if(!e[r].test(t))return!1;if(t.prerelease.length&&!n.includePrerelease){for(let r=0;r<e.length;r++)if(Z(e[r].semver),e[r].semver!==Ta.ANY&&e[r].semver.prerelease.length>0){const i=e[r].semver;if(i.major===t.major&&i.minor===t.minor&&i.patch===t.patch)return!0}return!1}return!0},On=Symbol("SemVer ANY");class Jr{static get ANY(){return On}constructor(t,n){if(n=rE(n),t instanceof Jr){if(t.loose===!!n.loose)return t;t=t.value}Vi("comparator",t,n),this.options=n,this.loose=!!n.loose,this.parse(t),this.semver===On?this.value="":this.value=this.operator+this.semver.version,Vi("comp",this)}parse(t){const n=this.options.loose?Ts[As.COMPARATORLOOSE]:Ts[As.COMPARATOR],r=t.match(n);if(!r)throw new TypeError(`Invalid comparator: ${t}`);this.operator=r[1]!==void 0?r[1]:"",this.operator==="="&&(this.operator=""),r[2]?this.semver=new Ss(r[2],this.options.loose):this.semver=On}toString(){return this.value}test(t){if(Vi("Comparator.test",t,this.options.loose),this.semver===On||t===On)return!0;if(typeof t=="string")try{t=new Ss(t,this.options)}catch{return!1}return Gi(t,this.operator,this.semver,this.options)}intersects(t,n){if(!(t instanceof Jr))throw new TypeError("a Comparator is required");if((!n||typeof n!="object")&&(n={loose:!!n,includePrerelease:!1}),this.operator==="")return this.value===""?!0:new $s(t.value,n).test(this.value);if(t.operator==="")return t.value===""?!0:new $s(this.value,n).test(t.semver);const r=(this.operator===">="||this.operator===">")&&(t.operator===">="||t.operator===">"),i=(this.operator==="<="||this.operator==="<")&&(t.operator==="<="||t.operator==="<"),a=this.semver.version===t.semver.version,o=(this.operator===">="||this.operator==="<=")&&(t.operator===">="||t.operator==="<="),s=Gi(this.semver,"<",t.semver,n)&&(this.operator===">="||this.operator===">")&&(t.operator==="<="||t.operator==="<"),l=Gi(this.semver,">",t.semver,n)&&(this.operator==="<="||this.operator==="<")&&(t.operator===">="||t.operator===">");return r||i||a&&o||s||l}}var di=Jr;const rE=ci,{re:Ts,t:As}=mt.exports,Gi=tc,Vi=ui,Ss=be,$s=Ve,iE=Ve,aE=(e,t,n)=>{try{t=new iE(t,n)}catch{return!1}return t.test(e)};var hi=aE;const oE=Ve,sE=(e,t)=>new oE(e,t).set.map(n=>n.map(r=>r.value).join(" ").trim().split(" "));var lE=sE;const uE=be,cE=Ve,fE=(e,t,n)=>{let r=null,i=null,a=null;try{a=new cE(t,n)}catch{return null}return e.forEach(o=>{a.test(o)&&(!r||i.compare(o)===-1)&&(r=o,i=new uE(r,n))}),r};var dE=fE;const hE=be,pE=Ve,mE=(e,t,n)=>{let r=null,i=null,a=null;try{a=new pE(t,n)}catch{return null}return e.forEach(o=>{a.test(o)&&(!r||i.compare(o)===1)&&(r=o,i=new hE(r,n))}),r};var gE=mE;const Yi=be,yE=Ve,Cs=fi,EE=(e,t)=>{e=new yE(e,t);let n=new Yi("0.0.0");if(e.test(n)||(n=new Yi("0.0.0-0"),e.test(n)))return n;n=null;for(let r=0;r<e.set.length;++r){const i=e.set[r];let a=null;i.forEach(o=>{const s=new Yi(o.semver.version);switch(o.operator){case">":s.prerelease.length===0?s.patch++:s.prerelease.push(0),s.raw=s.format();case"":case">=":(!a||Cs(s,a))&&(a=s);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${o.operator}`)}}),a&&(!n||Cs(n,a))&&(n=a)}return n&&e.test(n)?n:null};var vE=EE;const wE=Ve,_E=(e,t)=>{try{return new wE(e,t).range||"*"}catch{return null}};var TE=_E;const AE=be,rc=di,{ANY:SE}=rc,$E=Ve,CE=hi,bs=fi,Os=Xa,bE=Ka,OE=za,NE=(e,t,n,r)=>{e=new AE(e,r),t=new $E(t,r);let i,a,o,s,l;switch(n){case">":i=bs,a=bE,o=Os,s=">",l=">=";break;case"<":i=Os,a=OE,o=bs,s="<",l="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(CE(e,t,r))return!1;for(let p=0;p<t.set.length;++p){const f=t.set[p];let c=null,m=null;if(f.forEach(y=>{y.semver===SE&&(y=new rc(">=0.0.0")),c=c||y,m=m||y,i(y.semver,c.semver,r)?c=y:o(y.semver,m.semver,r)&&(m=y)}),c.operator===s||c.operator===l||(!m.operator||m.operator===s)&&a(e,m.semver))return!1;if(m.operator===l&&o(e,m.semver))return!1}return!0};var Ja=NE;const IE=Ja,RE=(e,t,n)=>IE(e,t,">",n);var DE=RE;const PE=Ja,FE=(e,t,n)=>PE(e,t,"<",n);var xE=FE;const Ns=Ve,LE=(e,t,n)=>(e=new Ns(e,n),t=new Ns(t,n),e.intersects(t));var UE=LE;const kE=hi,ME=Ge;var BE=(e,t,n)=>{const r=[];let i=null,a=null;const o=e.sort((f,c)=>ME(f,c,n));for(const f of o)kE(f,t,n)?(a=f,i||(i=f)):(a&&r.push([i,a]),a=null,i=null);i&&r.push([i,null]);const s=[];for(const[f,c]of r)f===c?s.push(f):!c&&f===o[0]?s.push("*"):c?f===o[0]?s.push(`<=${c}`):s.push(`${f} - ${c}`):s.push(`>=${f}`);const l=s.join(" || "),p=typeof t.raw=="string"?t.raw:String(t);return l.length<p.length?l:t};const Is=Ve,kr=di,{ANY:Wi}=kr,Nn=hi,Qa=Ge,qE=(e,t,n={})=>{if(e===t)return!0;e=new Is(e,n),t=new Is(t,n);let r=!1;e:for(const i of e.set){for(const a of t.set){const o=HE(i,a,n);if(r=r||o!==null,o)continue e}if(r)return!1}return!0},HE=(e,t,n)=>{if(e===t)return!0;if(e.length===1&&e[0].semver===Wi){if(t.length===1&&t[0].semver===Wi)return!0;n.includePrerelease?e=[new kr(">=0.0.0-0")]:e=[new kr(">=0.0.0")]}if(t.length===1&&t[0].semver===Wi){if(n.includePrerelease)return!0;t=[new kr(">=0.0.0")]}const r=new Set;let i,a;for(const y of e)y.operator===">"||y.operator===">="?i=Rs(i,y,n):y.operator==="<"||y.operator==="<="?a=Ds(a,y,n):r.add(y.semver);if(r.size>1)return null;let o;if(i&&a){if(o=Qa(i.semver,a.semver,n),o>0)return null;if(o===0&&(i.operator!==">="||a.operator!=="<="))return null}for(const y of r){if(i&&!Nn(y,String(i),n)||a&&!Nn(y,String(a),n))return null;for(const w of t)if(!Nn(y,String(w),n))return!1;return!0}let s,l,p,f,c=a&&!n.includePrerelease&&a.semver.prerelease.length?a.semver:!1,m=i&&!n.includePrerelease&&i.semver.prerelease.length?i.semver:!1;c&&c.prerelease.length===1&&a.operator==="<"&&c.prerelease[0]===0&&(c=!1);for(const y of t){if(f=f||y.operator===">"||y.operator===">=",p=p||y.operator==="<"||y.operator==="<=",i){if(m&&y.semver.prerelease&&y.semver.prerelease.length&&y.semver.major===m.major&&y.semver.minor===m.minor&&y.semver.patch===m.patch&&(m=!1),y.operator===">"||y.operator===">="){if(s=Rs(i,y,n),s===y&&s!==i)return!1}else if(i.operator===">="&&!Nn(i.semver,String(y),n))return!1}if(a){if(c&&y.semver.prerelease&&y.semver.prerelease.length&&y.semver.major===c.major&&y.semver.minor===c.minor&&y.semver.patch===c.patch&&(c=!1),y.operator==="<"||y.operator==="<="){if(l=Ds(a,y,n),l===y&&l!==a)return!1}else if(a.operator==="<="&&!Nn(a.semver,String(y),n))return!1}if(!y.operator&&(a||i)&&o!==0)return!1}return!(i&&p&&!a&&o!==0||a&&f&&!i&&o!==0||m||c)},Rs=(e,t,n)=>{if(!e)return t;const r=Qa(e.semver,t.semver,n);return r>0?e:r<0||t.operator===">"&&e.operator===">="?t:e},Ds=(e,t,n)=>{if(!e)return t;const r=Qa(e.semver,t.semver,n);return r<0?e:r>0||t.operator==="<"&&e.operator==="<="?t:e};var jE=qE;const Xi=mt.exports;var ic={re:Xi.re,src:Xi.src,tokens:Xi.t,SEMVER_SPEC_VERSION:li.SEMVER_SPEC_VERSION,SemVer:be,compareIdentifiers:_a.compareIdentifiers,rcompareIdentifiers:_a.rcompareIdentifiers,parse:En,valid:b0,clean:I0,inc:D0,diff:k0,major:q0,minor:G0,patch:W0,prerelease:K0,compare:Ge,rcompare:Z0,compareLoose:ny,compareBuild:Wa,sort:oy,rsort:uy,gt:fi,lt:Xa,eq:Ya,neq:ec,gte:za,lte:Ka,cmp:tc,coerce:Iy,Comparator:di,Range:Ve,satisfies:hi,toComparators:lE,maxSatisfying:dE,minSatisfying:gE,minVersion:vE,validRange:TE,outside:Ja,gtr:DE,ltr:xE,intersects:UE,simplifyRange:BE,subset:jE},hn={},Aa={exports:{}};(function(e,t){var n=200,r="__lodash_hash_undefined__",i=1,a=2,o=9007199254740991,s="[object Arguments]",l="[object Array]",p="[object AsyncFunction]",f="[object Boolean]",c="[object Date]",m="[object Error]",y="[object Function]",w="[object GeneratorFunction]",A="[object Map]",S="[object Number]",C="[object Null]",$="[object Object]",L="[object Promise]",R="[object Proxy]",se="[object RegExp]",V="[object Set]",q="[object String]",ue="[object Symbol]",g="[object Undefined]",F="[object WeakMap]",P="[object ArrayBuffer]",I="[object DataView]",Y="[object Float32Array]",X="[object Float64Array]",M="[object Int8Array]",j="[object Int16Array]",O="[object Int32Array]",ne="[object Uint8Array]",B="[object Uint8ClampedArray]",Mt="[object Uint16Array]",ze="[object Uint32Array]",vn=/[\\^$.*+?()[\]{}|]/g,$i=/^\[object .+?Constructor\]$/,lr=/^(?:0|[1-9]\d*)$/,H={};H[Y]=H[X]=H[M]=H[j]=H[O]=H[ne]=H[B]=H[Mt]=H[ze]=!0,H[s]=H[l]=H[P]=H[f]=H[I]=H[c]=H[m]=H[y]=H[A]=H[S]=H[$]=H[se]=H[V]=H[q]=H[F]=!1;var ur=typeof He=="object"&&He&&He.Object===Object&&He,d=typeof self=="object"&&self&&self.Object===Object&&self,u=ur||d||Function("return this")(),_=t&&!t.nodeType&&t,v=_&&!0&&e&&!e.nodeType&&e,U=v&&v.exports===_,z=U&&ur.process,re=function(){try{return z&&z.binding&&z.binding("util")}catch{}}(),he=re&&re.isTypedArray;function Fe(h,E){for(var T=-1,b=h==null?0:h.length,W=0,D=[];++T<b;){var ee=h[T];E(ee,T,h)&&(D[W++]=ee)}return D}function rt(h,E){for(var T=-1,b=E.length,W=h.length;++T<b;)h[W+T]=E[T];return h}function le(h,E){for(var T=-1,b=h==null?0:h.length;++T<b;)if(E(h[T],T,h))return!0;return!1}function Ue(h,E){for(var T=-1,b=Array(h);++T<h;)b[T]=E(T);return b}function Ci(h){return function(E){return h(E)}}function cr(h,E){return h.has(E)}function wn(h,E){return h==null?void 0:h[E]}function fr(h){var E=-1,T=Array(h.size);return h.forEach(function(b,W){T[++E]=[W,b]}),T}function gc(h,E){return function(T){return h(E(T))}}function yc(h){var E=-1,T=Array(h.size);return h.forEach(function(b){T[++E]=b}),T}var Ec=Array.prototype,vc=Function.prototype,dr=Object.prototype,bi=u["__core-js_shared__"],eo=vc.toString,Ye=dr.hasOwnProperty,to=function(){var h=/[^.]+$/.exec(bi&&bi.keys&&bi.keys.IE_PROTO||"");return h?"Symbol(src)_1."+h:""}(),no=dr.toString,wc=RegExp("^"+eo.call(Ye).replace(vn,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ro=U?u.Buffer:void 0,hr=u.Symbol,io=u.Uint8Array,ao=dr.propertyIsEnumerable,_c=Ec.splice,Et=hr?hr.toStringTag:void 0,oo=Object.getOwnPropertySymbols,Tc=ro?ro.isBuffer:void 0,Ac=gc(Object.keys,Object),Oi=Bt(u,"DataView"),_n=Bt(u,"Map"),Ni=Bt(u,"Promise"),Ii=Bt(u,"Set"),Ri=Bt(u,"WeakMap"),Tn=Bt(Object,"create"),Sc=_t(Oi),$c=_t(_n),Cc=_t(Ni),bc=_t(Ii),Oc=_t(Ri),so=hr?hr.prototype:void 0,Di=so?so.valueOf:void 0;function vt(h){var E=-1,T=h==null?0:h.length;for(this.clear();++E<T;){var b=h[E];this.set(b[0],b[1])}}function Nc(){this.__data__=Tn?Tn(null):{},this.size=0}function Ic(h){var E=this.has(h)&&delete this.__data__[h];return this.size-=E?1:0,E}function Rc(h){var E=this.__data__;if(Tn){var T=E[h];return T===r?void 0:T}return Ye.call(E,h)?E[h]:void 0}function Dc(h){var E=this.__data__;return Tn?E[h]!==void 0:Ye.call(E,h)}function Pc(h,E){var T=this.__data__;return this.size+=this.has(h)?0:1,T[h]=Tn&&E===void 0?r:E,this}vt.prototype.clear=Nc,vt.prototype.delete=Ic,vt.prototype.get=Rc,vt.prototype.has=Dc,vt.prototype.set=Pc;function Ke(h){var E=-1,T=h==null?0:h.length;for(this.clear();++E<T;){var b=h[E];this.set(b[0],b[1])}}function Fc(){this.__data__=[],this.size=0}function xc(h){var E=this.__data__,T=mr(E,h);if(T<0)return!1;var b=E.length-1;return T==b?E.pop():_c.call(E,T,1),--this.size,!0}function Lc(h){var E=this.__data__,T=mr(E,h);return T<0?void 0:E[T][1]}function Uc(h){return mr(this.__data__,h)>-1}function kc(h,E){var T=this.__data__,b=mr(T,h);return b<0?(++this.size,T.push([h,E])):T[b][1]=E,this}Ke.prototype.clear=Fc,Ke.prototype.delete=xc,Ke.prototype.get=Lc,Ke.prototype.has=Uc,Ke.prototype.set=kc;function wt(h){var E=-1,T=h==null?0:h.length;for(this.clear();++E<T;){var b=h[E];this.set(b[0],b[1])}}function Mc(){this.size=0,this.__data__={hash:new vt,map:new(_n||Ke),string:new vt}}function Bc(h){var E=gr(this,h).delete(h);return this.size-=E?1:0,E}function qc(h){return gr(this,h).get(h)}function Hc(h){return gr(this,h).has(h)}function jc(h,E){var T=gr(this,h),b=T.size;return T.set(h,E),this.size+=T.size==b?0:1,this}wt.prototype.clear=Mc,wt.prototype.delete=Bc,wt.prototype.get=qc,wt.prototype.has=Hc,wt.prototype.set=jc;function pr(h){var E=-1,T=h==null?0:h.length;for(this.__data__=new wt;++E<T;)this.add(h[E])}function Gc(h){return this.__data__.set(h,r),this}function Vc(h){return this.__data__.has(h)}pr.prototype.add=pr.prototype.push=Gc,pr.prototype.has=Vc;function it(h){var E=this.__data__=new Ke(h);this.size=E.size}function Yc(){this.__data__=new Ke,this.size=0}function Wc(h){var E=this.__data__,T=E.delete(h);return this.size=E.size,T}function Xc(h){return this.__data__.get(h)}function zc(h){return this.__data__.has(h)}function Kc(h,E){var T=this.__data__;if(T instanceof Ke){var b=T.__data__;if(!_n||b.length<n-1)return b.push([h,E]),this.size=++T.size,this;T=this.__data__=new wt(b)}return T.set(h,E),this.size=T.size,this}it.prototype.clear=Yc,it.prototype.delete=Wc,it.prototype.get=Xc,it.prototype.has=zc,it.prototype.set=Kc;function Jc(h,E){var T=yr(h),b=!T&&hf(h),W=!T&&!b&&Pi(h),D=!T&&!b&&!W&&yo(h),ee=T||b||W||D,ce=ee?Ue(h.length,String):[],pe=ce.length;for(var K in h)(E||Ye.call(h,K))&&!(ee&&(K=="length"||W&&(K=="offset"||K=="parent")||D&&(K=="buffer"||K=="byteLength"||K=="byteOffset")||lf(K,pe)))&&ce.push(K);return ce}function mr(h,E){for(var T=h.length;T--;)if(ho(h[T][0],E))return T;return-1}function Qc(h,E,T){var b=E(h);return yr(h)?b:rt(b,T(h))}function An(h){return h==null?h===void 0?g:C:Et&&Et in Object(h)?of(h):df(h)}function lo(h){return Sn(h)&&An(h)==s}function uo(h,E,T,b,W){return h===E?!0:h==null||E==null||!Sn(h)&&!Sn(E)?h!==h&&E!==E:Zc(h,E,T,b,uo,W)}function Zc(h,E,T,b,W,D){var ee=yr(h),ce=yr(E),pe=ee?l:at(h),K=ce?l:at(E);pe=pe==s?$:pe,K=K==s?$:K;var Pe=pe==$,ke=K==$,Ee=pe==K;if(Ee&&Pi(h)){if(!Pi(E))return!1;ee=!0,Pe=!1}if(Ee&&!Pe)return D||(D=new it),ee||yo(h)?co(h,E,T,b,W,D):rf(h,E,pe,T,b,W,D);if(!(T&i)){var xe=Pe&&Ye.call(h,"__wrapped__"),Le=ke&&Ye.call(E,"__wrapped__");if(xe||Le){var ot=xe?h.value():h,Je=Le?E.value():E;return D||(D=new it),W(ot,Je,T,b,D)}}return Ee?(D||(D=new it),af(h,E,T,b,W,D)):!1}function ef(h){if(!go(h)||cf(h))return!1;var E=po(h)?wc:$i;return E.test(_t(h))}function tf(h){return Sn(h)&&mo(h.length)&&!!H[An(h)]}function nf(h){if(!ff(h))return Ac(h);var E=[];for(var T in Object(h))Ye.call(h,T)&&T!="constructor"&&E.push(T);return E}function co(h,E,T,b,W,D){var ee=T&i,ce=h.length,pe=E.length;if(ce!=pe&&!(ee&&pe>ce))return!1;var K=D.get(h);if(K&&D.get(E))return K==E;var Pe=-1,ke=!0,Ee=T&a?new pr:void 0;for(D.set(h,E),D.set(E,h);++Pe<ce;){var xe=h[Pe],Le=E[Pe];if(b)var ot=ee?b(Le,xe,Pe,E,h,D):b(xe,Le,Pe,h,E,D);if(ot!==void 0){if(ot)continue;ke=!1;break}if(Ee){if(!le(E,function(Je,Tt){if(!cr(Ee,Tt)&&(xe===Je||W(xe,Je,T,b,D)))return Ee.push(Tt)})){ke=!1;break}}else if(!(xe===Le||W(xe,Le,T,b,D))){ke=!1;break}}return D.delete(h),D.delete(E),ke}function rf(h,E,T,b,W,D,ee){switch(T){case I:if(h.byteLength!=E.byteLength||h.byteOffset!=E.byteOffset)return!1;h=h.buffer,E=E.buffer;case P:return!(h.byteLength!=E.byteLength||!D(new io(h),new io(E)));case f:case c:case S:return ho(+h,+E);case m:return h.name==E.name&&h.message==E.message;case se:case q:return h==E+"";case A:var ce=fr;case V:var pe=b&i;if(ce||(ce=yc),h.size!=E.size&&!pe)return!1;var K=ee.get(h);if(K)return K==E;b|=a,ee.set(h,E);var Pe=co(ce(h),ce(E),b,W,D,ee);return ee.delete(h),Pe;case ue:if(Di)return Di.call(h)==Di.call(E)}return!1}function af(h,E,T,b,W,D){var ee=T&i,ce=fo(h),pe=ce.length,K=fo(E),Pe=K.length;if(pe!=Pe&&!ee)return!1;for(var ke=pe;ke--;){var Ee=ce[ke];if(!(ee?Ee in E:Ye.call(E,Ee)))return!1}var xe=D.get(h);if(xe&&D.get(E))return xe==E;var Le=!0;D.set(h,E),D.set(E,h);for(var ot=ee;++ke<pe;){Ee=ce[ke];var Je=h[Ee],Tt=E[Ee];if(b)var Eo=ee?b(Tt,Je,Ee,E,h,D):b(Je,Tt,Ee,h,E,D);if(!(Eo===void 0?Je===Tt||W(Je,Tt,T,b,D):Eo)){Le=!1;break}ot||(ot=Ee=="constructor")}if(Le&&!ot){var Er=h.constructor,vr=E.constructor;Er!=vr&&"constructor"in h&&"constructor"in E&&!(typeof Er=="function"&&Er instanceof Er&&typeof vr=="function"&&vr instanceof vr)&&(Le=!1)}return D.delete(h),D.delete(E),Le}function fo(h){return Qc(h,gf,sf)}function gr(h,E){var T=h.__data__;return uf(E)?T[typeof E=="string"?"string":"hash"]:T.map}function Bt(h,E){var T=wn(h,E);return ef(T)?T:void 0}function of(h){var E=Ye.call(h,Et),T=h[Et];try{h[Et]=void 0;var b=!0}catch{}var W=no.call(h);return b&&(E?h[Et]=T:delete h[Et]),W}var sf=oo?function(h){return h==null?[]:(h=Object(h),Fe(oo(h),function(E){return ao.call(h,E)}))}:yf,at=An;(Oi&&at(new Oi(new ArrayBuffer(1)))!=I||_n&&at(new _n)!=A||Ni&&at(Ni.resolve())!=L||Ii&&at(new Ii)!=V||Ri&&at(new Ri)!=F)&&(at=function(h){var E=An(h),T=E==$?h.constructor:void 0,b=T?_t(T):"";if(b)switch(b){case Sc:return I;case $c:return A;case Cc:return L;case bc:return V;case Oc:return F}return E});function lf(h,E){return E=E??o,!!E&&(typeof h=="number"||lr.test(h))&&h>-1&&h%1==0&&h<E}function uf(h){var E=typeof h;return E=="string"||E=="number"||E=="symbol"||E=="boolean"?h!=="__proto__":h===null}function cf(h){return!!to&&to in h}function ff(h){var E=h&&h.constructor,T=typeof E=="function"&&E.prototype||dr;return h===T}function df(h){return no.call(h)}function _t(h){if(h!=null){try{return eo.call(h)}catch{}try{return h+""}catch{}}return""}function ho(h,E){return h===E||h!==h&&E!==E}var hf=lo(function(){return arguments}())?lo:function(h){return Sn(h)&&Ye.call(h,"callee")&&!ao.call(h,"callee")},yr=Array.isArray;function pf(h){return h!=null&&mo(h.length)&&!po(h)}var Pi=Tc||Ef;function mf(h,E){return uo(h,E)}function po(h){if(!go(h))return!1;var E=An(h);return E==y||E==w||E==p||E==R}function mo(h){return typeof h=="number"&&h>-1&&h%1==0&&h<=o}function go(h){var E=typeof h;return h!=null&&(E=="object"||E=="function")}function Sn(h){return h!=null&&typeof h=="object"}var yo=he?Ci(he):tf;function gf(h){return pf(h)?Jc(h):nf(h)}function yf(){return[]}function Ef(){return!1}e.exports=mf})(Aa,Aa.exports);Object.defineProperty(hn,"__esModule",{value:!0});hn.createTempUpdateFile=hn.DownloadedUpdateHelper=void 0;const GE=Qr.default,VE=yt.default,Ps=Aa.exports,At=kt,Bn=oe.default;class YE{constructor(t){this.cacheDir=t,this._file=null,this._packageFile=null,this.versionInfo=null,this.fileInfo=null,this._downloadedFileInfo=null}get downloadedFileInfo(){return this._downloadedFileInfo}get file(){return this._file}get packageFile(){return this._packageFile}get cacheDirForPendingUpdate(){return Bn.join(this.cacheDir,"pending")}async validateDownloadedPath(t,n,r,i){if(this.versionInfo!=null&&this.file===t&&this.fileInfo!=null)return Ps(this.versionInfo,n)&&Ps(this.fileInfo.info,r.info)&&await At.pathExists(t)?t:null;const a=await this.getValidCachedUpdateFile(r,i);return a===null?null:(i.info(`Update has already been downloaded to ${t}).`),this._file=a,a)}async setDownloadedFile(t,n,r,i,a,o){this._file=t,this._packageFile=n,this.versionInfo=r,this.fileInfo=i,this._downloadedFileInfo={fileName:a,sha512:i.info.sha512,isAdminRightsRequired:i.info.isAdminRightsRequired===!0},o&&await At.outputJson(this.getUpdateInfoFile(),this._downloadedFileInfo)}async clear(){this._file=null,this._packageFile=null,this.versionInfo=null,this.fileInfo=null,await this.cleanCacheDirForPendingUpdate()}async cleanCacheDirForPendingUpdate(){try{await At.emptyDir(this.cacheDirForPendingUpdate)}catch{}}async getValidCachedUpdateFile(t,n){var r;const i=this.getUpdateInfoFile();if(!await At.pathExists(i))return null;let o;try{o=await At.readJson(i)}catch(f){let c="No cached update info available";return f.code!=="ENOENT"&&(await this.cleanCacheDirForPendingUpdate(),c+=` (error on read: ${f.message})`),n.info(c),null}if(!((r=(o==null?void 0:o.fileName)!==null)!==null&&r!==void 0?r:!1))return n.warn("Cached update info is corrupted: no fileName, directory for cached update will be cleaned"),await this.cleanCacheDirForPendingUpdate(),null;if(t.info.sha512!==o.sha512)return n.info(`Cached update sha512 checksum doesn't match the latest available update. New update must be downloaded. Cached: ${o.sha512}, expected: ${t.info.sha512}. Directory for cached update will be cleaned`),await this.cleanCacheDirForPendingUpdate(),null;const l=Bn.join(this.cacheDirForPendingUpdate,o.fileName);if(!await At.pathExists(l))return n.info("Cached update file doesn't exist"),null;const p=await WE(l);return t.info.sha512!==p?(n.warn(`Sha512 checksum doesn't match the latest available update. New update must be downloaded. Cached: ${p}, expected: ${t.info.sha512}`),await this.cleanCacheDirForPendingUpdate(),null):(this._downloadedFileInfo=o,l)}getUpdateInfoFile(){return Bn.join(this.cacheDirForPendingUpdate,"update-info.json")}}hn.DownloadedUpdateHelper=YE;function WE(e,t="sha512",n="base64",r){return new Promise((i,a)=>{const o=GE.createHash(t);o.on("error",a).setEncoding(n),VE.createReadStream(e,{...r,highWaterMark:1024*1024}).on("error",a).on("end",()=>{o.end(),i(o.read())}).pipe(o,{end:!1})})}async function XE(e,t,n){let r=0,i=Bn.join(t,e);for(let a=0;a<3;a++)try{return await At.unlink(i),i}catch(o){if(o.code==="ENOENT")return i;n.warn(`Error on remove temp update file: ${o}`),i=Bn.join(t,`${r++}-${e}`)}return i}hn.createTempUpdateFile=XE;var pi={},mi={};Object.defineProperty(mi,"__esModule",{value:!0});mi.getAppCacheDir=void 0;const zi=oe.default,zE=dl.default;function KE(){const e=zE.homedir();let t;return process.platform==="win32"?t=process.env.LOCALAPPDATA||zi.join(e,"AppData","Local"):process.platform==="darwin"?t=zi.join(e,"Library","Application Support","Caches"):t=process.env.XDG_CACHE_HOME||zi.join(e,".cache"),t}mi.getAppCacheDir=KE;Object.defineProperty(pi,"__esModule",{value:!0});pi.ElectronAppAdapter=void 0;const Fs=oe.default,JE=mi;class QE{constructor(t=nn.default.app){this.app=t}whenReady(){return this.app.whenReady()}get version(){return this.app.getVersion()}get name(){return this.app.getName()}get isPackaged(){return this.app.isPackaged===!0}get appUpdateConfigPath(){return this.isPackaged?Fs.join(process.resourcesPath,"app-update.yml"):Fs.join(this.app.getAppPath(),"dev-app-update.yml")}get userDataPath(){return this.app.getPath("userData")}get baseCachePath(){return JE.getAppCacheDir()}quit(){this.app.quit()}onQuit(t){this.app.once("quit",(n,r)=>t(r))}}pi.ElectronAppAdapter=QE;var ac={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.ElectronHttpExecutor=e.getNetSession=e.NET_SESSION_NAME=void 0;const t=te;e.NET_SESSION_NAME="electron-updater";function n(){return nn.default.session.fromPartition(e.NET_SESSION_NAME,{cache:!1})}e.getNetSession=n;class r extends t.HttpExecutor{constructor(a){super(),this.proxyLoginCallback=a,this.cachedSession=null}async download(a,o,s){return await s.cancellationToken.createPromise((l,p,f)=>{const c={headers:s.headers||void 0,redirect:"manual"};t.configureRequestUrl(a,c),t.configureRequestOptions(c),this.doDownload(c,{destination:o,options:s,onCancel:f,callback:m=>{m==null?l(o):p(m)},responseHandler:null},0)})}createRequest(a,o){a.headers&&a.headers.Host&&(a.host=a.headers.Host,delete a.headers.Host),this.cachedSession==null&&(this.cachedSession=n());const s=nn.default.net.request({...a,session:this.cachedSession});return s.on("response",o),this.proxyLoginCallback!=null&&s.on("login",this.proxyLoginCallback),s}addRedirectHandlers(a,o,s,l,p){a.on("redirect",(f,c,m)=>{a.abort(),l>this.maxRedirects?s(this.createMaxRedirectError()):p(t.HttpExecutor.prepareRedirectUrlOptions(m,o))})}}e.ElectronHttpExecutor=r})(ac);var ir={},ge={},ZE=1/0,ev="[object Symbol]",oc=/[\\^$.*+?()[\]{}|]/g,tv=RegExp(oc.source),nv=typeof He=="object"&&He&&He.Object===Object&&He,rv=typeof self=="object"&&self&&self.Object===Object&&self,iv=nv||rv||Function("return this")(),av=Object.prototype,ov=av.toString,xs=iv.Symbol,Ls=xs?xs.prototype:void 0,Us=Ls?Ls.toString:void 0;function sv(e){if(typeof e=="string")return e;if(uv(e))return Us?Us.call(e):"";var t=e+"";return t=="0"&&1/e==-ZE?"-0":t}function lv(e){return!!e&&typeof e=="object"}function uv(e){return typeof e=="symbol"||lv(e)&&ov.call(e)==ev}function cv(e){return e==null?"":sv(e)}function fv(e){return e=cv(e),e&&tv.test(e)?e.replace(oc,"\\$&"):e}var dv=fv;Object.defineProperty(ge,"__esModule",{value:!0});ge.blockmapFiles=ge.getChannelFilename=ge.newUrlFromBase=ge.newBaseUrl=void 0;const sc=xt.default,hv=dv;function pv(e){const t=new sc.URL(e);return t.pathname.endsWith("/")||(t.pathname+="/"),t}ge.newBaseUrl=pv;function Sa(e,t,n=!1){const r=new sc.URL(e,t),i=t.search;return i!=null&&i.length!==0?r.search=i:n&&(r.search=`noCache=${Date.now().toString(32)}`),r}ge.newUrlFromBase=Sa;function mv(e){return`${e}.yml`}ge.getChannelFilename=mv;function gv(e,t,n){const r=Sa(`${e.pathname}.blockmap`,e);return[Sa(`${e.pathname.replace(new RegExp(hv(n),"g"),t)}.blockmap`,e),r]}ge.blockmapFiles=gv;var ie={};Object.defineProperty(ie,"__esModule",{value:!0});ie.resolveFiles=ie.getFileList=ie.parseUpdateInfo=ie.findFile=ie.Provider=void 0;const gt=te,yv=ye,ks=ge;class Ev{constructor(t){this.runtimeOptions=t,this.requestHeaders=null,this.executor=t.executor}get isUseMultipleRangeRequest(){return this.runtimeOptions.isUseMultipleRangeRequest!==!1}getChannelFilePrefix(){if(this.runtimeOptions.platform==="linux"){const t=process.env.TEST_UPDATER_ARCH||process.arch,n=t==="x64"?"":`-${t}`;return"-linux"+n}else return this.runtimeOptions.platform==="darwin"?"-mac":""}getDefaultChannelName(){return this.getCustomChannelName("latest")}getCustomChannelName(t){return`${t}${this.getChannelFilePrefix()}`}get fileExtraDownloadHeaders(){return null}setRequestHeaders(t){this.requestHeaders=t}httpRequest(t,n,r){return this.executor.request(this.createRequestOptions(t,n),r)}createRequestOptions(t,n){const r={};return this.requestHeaders==null?n!=null&&(r.headers=n):r.headers=n==null?this.requestHeaders:{...this.requestHeaders,...n},gt.configureRequestUrl(t,r),r}}ie.Provider=Ev;function vv(e,t,n){if(e.length===0)throw gt.newError("No files provided","ERR_UPDATER_NO_FILES_PROVIDED");const r=e.find(i=>i.url.pathname.toLowerCase().endsWith(`.${t}`));return r??(n==null?e[0]:e.find(i=>!n.some(a=>i.url.pathname.toLowerCase().endsWith(`.${a}`))))}ie.findFile=vv;function wv(e,t,n){if(e==null)throw gt.newError(`Cannot parse update info from ${t} in the latest release artifacts (${n}): rawData: null`,"ERR_UPDATER_INVALID_UPDATE_INFO");let r;try{r=yv.load(e)}catch(i){throw gt.newError(`Cannot parse update info from ${t} in the latest release artifacts (${n}): ${i.stack||i.message}, rawData: ${e}`,"ERR_UPDATER_INVALID_UPDATE_INFO")}return r}ie.parseUpdateInfo=wv;function lc(e){const t=e.files;if(t!=null&&t.length>0)return t;if(e.path!=null)return[{url:e.path,sha2:e.sha2,sha512:e.sha512}];throw gt.newError(`No files provided: ${gt.safeStringifyJson(e)}`,"ERR_UPDATER_NO_FILES_PROVIDED")}ie.getFileList=lc;function _v(e,t,n=r=>r){const i=lc(e).map(s=>{if(s.sha2==null&&s.sha512==null)throw gt.newError(`Update info doesn't contain nor sha256 neither sha512 checksum: ${gt.safeStringifyJson(s)}`,"ERR_UPDATER_NO_CHECKSUM");return{url:ks.newUrlFromBase(n(s.url),t),info:s}}),a=e.packages,o=a==null?null:a[process.arch]||a.ia32;return o!=null&&(i[0].packageInfo={...o,path:ks.newUrlFromBase(n(o.path),t).href}),i}ie.resolveFiles=_v;Object.defineProperty(ir,"__esModule",{value:!0});ir.GenericProvider=void 0;const Ms=te,Ki=ge,Ji=ie;class Tv extends Ji.Provider{constructor(t,n,r){super(r),this.configuration=t,this.updater=n,this.baseUrl=Ki.newBaseUrl(this.configuration.url)}get channel(){const t=this.updater.channel||this.configuration.channel;return t==null?this.getDefaultChannelName():this.getCustomChannelName(t)}async getLatestVersion(){const t=Ki.getChannelFilename(this.channel),n=Ki.newUrlFromBase(t,this.baseUrl,this.updater.isAddNoCacheQuery);for(let r=0;;r++)try{return Ji.parseUpdateInfo(await this.httpRequest(n),t,n)}catch(i){if(i instanceof Ms.HttpError&&i.statusCode===404)throw Ms.newError(`Cannot find channel "${t}" update info: ${i.stack||i.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");if(i.code==="ECONNREFUSED"&&r<3){await new Promise((a,o)=>{try{setTimeout(a,1e3*r)}catch(s){o(s)}});continue}throw i}}resolveFiles(t){return Ji.resolveFiles(t,this.baseUrl)}}ir.GenericProvider=Tv;var pn={},gi={},yi={};Object.defineProperty(yi,"__esModule",{value:!0});yi.BintrayClient=void 0;const Bs=J;class Av{constructor(t,n,r,i){if(this.httpExecutor=n,this.cancellationToken=r,this.requestHeaders=null,t.owner==null)throw new Error("owner is not specified");if(t.package==null)throw new Error("package is not specified");this.repo=t.repo||"generic",this.packageName=t.package,this.owner=t.owner,this.user=t.user||t.owner,this.component=t.component||null,this.distribution=t.distribution||"stable",this.auth=i==null?null:`Basic ${Buffer.from(`${this.user}:${i}`).toString("base64")}`,this.basePath=`/packages/${this.owner}/${this.repo}/${this.packageName}`}setRequestHeaders(t){this.requestHeaders=t}bintrayRequest(t,n,r=null,i,a){return Bs.parseJson(this.httpExecutor.request(Bs.configureRequestOptions({hostname:"api.bintray.com",path:t,headers:this.requestHeaders||void 0},n,a),i,r))}getVersion(t){return this.bintrayRequest(`${this.basePath}/versions/${t}`,this.auth,null,this.cancellationToken)}getVersionFiles(t){return this.bintrayRequest(`${this.basePath}/versions/${t}/files`,this.auth,null,this.cancellationToken)}createVersion(t){return this.bintrayRequest(`${this.basePath}/versions`,this.auth,{name:t},this.cancellationToken)}deleteVersion(t){return this.bintrayRequest(`${this.basePath}/versions/${t}`,this.auth,null,this.cancellationToken,"DELETE")}}yi.BintrayClient=Av;Object.defineProperty(gi,"__esModule",{value:!0});gi.BintrayProvider=void 0;const Qi=te,Sv=yi,$v=xt.default,qs=ge,Zi=ie;class Cv extends Zi.Provider{constructor(t,n){super(n),this.client=new Sv.BintrayClient(t,n.executor,new Qi.CancellationToken),this.baseUrl=qs.newBaseUrl(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}`)}setRequestHeaders(t){super.setRequestHeaders(t),this.client.setRequestHeaders(t)}async getLatestVersion(){try{const t=await this.client.getVersion("_latest"),n=qs.getChannelFilename(this.getDefaultChannelName()),r=await this.client.getVersionFiles(t.name),i=r.find(o=>o.name.endsWith(`_${n}`)||o.name.endsWith(`-${n}`));if(i==null)throw Qi.newError(`Cannot find channel file "${n}", existing files:
${r.map(o=>JSON.stringify(o,null,2)).join(`,
`)}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");const a=new $v.URL(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}/${i.name}`);return Zi.parseUpdateInfo(await this.httpRequest(a),n,a)}catch(t){throw"statusCode"in t&&t.statusCode===404?Qi.newError(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${t.stack||t.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND"):t}}resolveFiles(t){return Zi.resolveFiles(t,this.baseUrl)}}gi.BintrayProvider=Cv;var Ei={};Object.defineProperty(Ei,"__esModule",{value:!0});Ei.BitbucketProvider=void 0;const Hs=te,ea=ge,ta=ie;class bv extends ta.Provider{constructor(t,n,r){super({...r,isUseMultipleRangeRequest:!1}),this.configuration=t,this.updater=n;const{owner:i,slug:a}=t;this.baseUrl=ea.newBaseUrl(`https://api.bitbucket.org/2.0/repositories/${i}/${a}/downloads`)}get channel(){return this.updater.channel||this.configuration.channel||"latest"}async getLatestVersion(){const t=new Hs.CancellationToken,n=ea.getChannelFilename(this.getCustomChannelName(this.channel)),r=ea.newUrlFromBase(n,this.baseUrl,this.updater.isAddNoCacheQuery);try{const i=await this.httpRequest(r,void 0,t);return ta.parseUpdateInfo(i,n,r)}catch(i){throw Hs.newError(`Unable to find latest version on ${this.toString()}, please ensure release exists: ${i.stack||i.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}resolveFiles(t){return ta.resolveFiles(t,this.baseUrl)}toString(){const{owner:t,slug:n}=this.configuration;return`Bitbucket (owner: ${t}, slug: ${n}, channel: ${this.channel})`}}Ei.BitbucketProvider=bv;var tt={};Object.defineProperty(tt,"__esModule",{value:!0});tt.computeReleaseNotes=tt.GitHubProvider=tt.BaseGitHubProvider=void 0;const Ze=te,js=ic,Ov=xt.default,Qt=ge,$a=ie,Gs=/\/tag\/([^/]+)$/;class uc extends $a.Provider{constructor(t,n,r){super({...r,isUseMultipleRangeRequest:!1}),this.options=t,this.baseUrl=Qt.newBaseUrl(Ze.githubUrl(t,n));const i=n==="github.com"?"api.github.com":n;this.baseApiUrl=Qt.newBaseUrl(Ze.githubUrl(t,i))}computeGithubBasePath(t){const n=this.options.host;return n!=null&&n!=="github.com"&&n!=="api.github.com"?`/api/v3${t}`:t}}tt.BaseGitHubProvider=uc;class Nv extends uc{constructor(t,n,r){super(t,"github.com",r),this.options=t,this.updater=n}async getLatestVersion(){const t=new Ze.CancellationToken,n=await this.httpRequest(Qt.newUrlFromBase(`${this.basePath}.atom`,this.baseUrl),{accept:"application/xml, application/atom+xml, text/xml, */*"},t),r=Ze.parseXml(n);let i=r.element("entry",!1,"No published versions on GitHub"),a;try{if(this.updater.allowPrerelease)a=Gs.exec(i.element("link").attribute("href"))[1];else{a=await this.getLatestTagName(t);for(const c of r.getElements("entry"))if(Gs.exec(c.element("link").attribute("href"))[1]===a){i=c;break}}}catch(c){throw Ze.newError(`Cannot parse releases feed: ${c.stack||c.message},
XML:
${n}`,"ERR_UPDATER_INVALID_RELEASE_FEED")}if(a==null)throw Ze.newError("No published versions on GitHub","ERR_UPDATER_NO_PUBLISHED_VERSIONS");const o=Qt.getChannelFilename(this.getDefaultChannelName()),s=Qt.newUrlFromBase(this.getBaseDownloadPath(a,o),this.baseUrl),l=this.createRequestOptions(s);let p;try{p=await this.executor.request(l,t)}catch(c){throw!this.updater.allowPrerelease&&c instanceof Ze.HttpError&&c.statusCode===404?Ze.newError(`Cannot find ${o} in the latest release artifacts (${s}): ${c.stack||c.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND"):c}const f=$a.parseUpdateInfo(p,o,s);return f.releaseName==null&&(f.releaseName=i.elementValueOrEmpty("title")),f.releaseNotes==null&&(f.releaseNotes=cc(this.updater.currentVersion,this.updater.fullChangelog,r,i)),{tag:a,...f}}async getLatestTagName(t){const n=this.options,r=n.host==null||n.host==="github.com"?Qt.newUrlFromBase(`${this.basePath}/latest`,this.baseUrl):new Ov.URL(`${this.computeGithubBasePath(`/repos/${n.owner}/${n.repo}/releases`)}/latest`,this.baseApiUrl);try{const i=await this.httpRequest(r,{Accept:"application/json"},t);return i==null?null:JSON.parse(i).tag_name}catch(i){throw Ze.newError(`Unable to find latest version on GitHub (${r}), please ensure a production release exists: ${i.stack||i.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}get basePath(){return`/${this.options.owner}/${this.options.repo}/releases`}resolveFiles(t){return $a.resolveFiles(t,this.baseUrl,n=>this.getBaseDownloadPath(t.tag,n.replace(/ /g,"-")))}getBaseDownloadPath(t,n){return`${this.basePath}/download/${t}/${n}`}}tt.GitHubProvider=Nv;function Vs(e){const t=e.elementValueOrEmpty("content");return t==="No content."?"":t}function cc(e,t,n,r){if(!t)return Vs(r);const i=[];for(const a of n.getElements("entry")){const o=/\/tag\/v?([^/]+)$/.exec(a.element("link").attribute("href"))[1];js.lt(e,o)&&i.push({version:o,note:Vs(a)})}return i.sort((a,o)=>js.rcompare(a.version,o.version))}tt.computeReleaseNotes=cc;var vi={};Object.defineProperty(vi,"__esModule",{value:!0});vi.KeygenProvider=void 0;const Ys=te,na=ge,ra=ie;class Iv extends ra.Provider{constructor(t,n,r){super({...r,isUseMultipleRangeRequest:!1}),this.configuration=t,this.updater=n,this.baseUrl=na.newBaseUrl(`https://api.keygen.sh/v1/accounts/${this.configuration.account}/artifacts`)}get channel(){return this.updater.channel||this.configuration.channel||"stable"}async getLatestVersion(){const t=new Ys.CancellationToken,n=na.getChannelFilename(this.getCustomChannelName(this.channel)),r=na.newUrlFromBase(n,this.baseUrl,this.updater.isAddNoCacheQuery);try{const i=await this.httpRequest(r,{Accept:"application/vnd.api+json"},t);return ra.parseUpdateInfo(i,n,r)}catch(i){throw Ys.newError(`Unable to find latest version on ${this.toString()}, please ensure release exists: ${i.stack||i.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}resolveFiles(t){return ra.resolveFiles(t,this.baseUrl)}toString(){const{account:t,product:n,platform:r}=this.configuration;return`Keygen (account: ${t}, product: ${n}, platform: ${r}, channel: ${this.channel})`}}vi.KeygenProvider=Iv;var wi={};Object.defineProperty(wi,"__esModule",{value:!0});wi.PrivateGitHubProvider=void 0;const Vt=te,Rv=ye,Dv=oe.default,Ws=xt.default,Xs=ge,Pv=tt,Fv=ie;class xv extends Pv.BaseGitHubProvider{constructor(t,n,r,i){super(t,"api.github.com",i),this.updater=n,this.token=r}createRequestOptions(t,n){const r=super.createRequestOptions(t,n);return r.redirect="manual",r}async getLatestVersion(){const t=new Vt.CancellationToken,n=Xs.getChannelFilename(this.getDefaultChannelName()),r=await this.getLatestVersionInfo(t),i=r.assets.find(s=>s.name===n);if(i==null)throw Vt.newError(`Cannot find ${n} in the release ${r.html_url||r.name}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");const a=new Ws.URL(i.url);let o;try{o=Rv.load(await this.httpRequest(a,this.configureHeaders("application/octet-stream"),t))}catch(s){throw s instanceof Vt.HttpError&&s.statusCode===404?Vt.newError(`Cannot find ${n} in the latest release artifacts (${a}): ${s.stack||s.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND"):s}return o.assets=r.assets,o}get fileExtraDownloadHeaders(){return this.configureHeaders("application/octet-stream")}configureHeaders(t){return{accept:t,authorization:`token ${this.token}`}}async getLatestVersionInfo(t){const n=this.updater.allowPrerelease;let r=this.basePath;n||(r=`${r}/latest`);const i=Xs.newUrlFromBase(r,this.baseUrl);try{const a=JSON.parse(await this.httpRequest(i,this.configureHeaders("application/vnd.github.v3+json"),t));return n?a.find(o=>o.prerelease)||a[0]:a}catch(a){throw Vt.newError(`Unable to find latest version on GitHub (${i}), please ensure a production release exists: ${a.stack||a.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}get basePath(){return this.computeGithubBasePath(`/repos/${this.options.owner}/${this.options.repo}/releases`)}resolveFiles(t){return Fv.getFileList(t).map(n=>{const r=Dv.posix.basename(n.url).replace(/ /g,"-"),i=t.assets.find(a=>a!=null&&a.name===r);if(i==null)throw Vt.newError(`Cannot find asset "${r}" in: ${JSON.stringify(t.assets,null,2)}`,"ERR_UPDATER_ASSET_NOT_FOUND");return{url:new Ws.URL(i.url),info:n}})}}wi.PrivateGitHubProvider=xv;Object.defineProperty(pn,"__esModule",{value:!0});pn.createClient=pn.isUrlProbablySupportMultiRangeRequests=void 0;const Nr=te,Lv=gi,Uv=Ei,zs=ir,kv=tt,Mv=vi,Bv=wi;function fc(e){return!e.includes("s3.amazonaws.com")}pn.isUrlProbablySupportMultiRangeRequests=fc;function qv(e,t,n){if(typeof e=="string")throw Nr.newError("Please pass PublishConfiguration object","ERR_UPDATER_INVALID_PROVIDER_CONFIGURATION");const r=e.provider;switch(r){case"github":{const i=e,a=(i.private?process.env.GH_TOKEN||process.env.GITHUB_TOKEN:null)||i.token;return a==null?new kv.GitHubProvider(i,t,n):new Bv.PrivateGitHubProvider(i,t,a,n)}case"bitbucket":return new Uv.BitbucketProvider(e,t,n);case"keygen":return new Mv.KeygenProvider(e,t,n);case"s3":case"spaces":return new zs.GenericProvider({provider:"generic",url:Nr.getS3LikeProviderBaseUrl(e),channel:e.channel||null},t,{...n,isUseMultipleRangeRequest:!1});case"generic":{const i=e;return new zs.GenericProvider(i,t,{...n,isUseMultipleRangeRequest:i.useMultipleRangeRequest!==!1&&fc(i.url)})}case"bintray":return new Lv.BintrayProvider(e,n);case"custom":{const i=e,a=i.updateProvider;if(!a)throw Nr.newError("Custom provider not specified","ERR_UPDATER_INVALID_PROVIDER_CONFIGURATION");return new a(i,t,n)}default:throw Nr.newError(`Unsupported provider: ${r}`,"ERR_UPDATER_UNSUPPORTED_PROVIDER")}}pn.createClient=qv;Object.defineProperty(ht,"__esModule",{value:!0});ht.NoOpLogger=ht.AppUpdater=void 0;const Oe=te,Hv=Qr.default,jv=ul.default,Gv=kt,In=kf.default,Vv=ye,ia=si,Yt=oe.default,zt=ic,Ks=hn,Yv=pi,Js=ac,Wv=ir,Ir=gn,aa=pn;class Za extends jv.EventEmitter{constructor(t,n){super(),this.autoDownload=!0,this.autoInstallOnAppQuit=!0,this.allowPrerelease=!1,this.fullChangelog=!1,this.allowDowngrade=!1,this._channel=null,this.downloadedUpdateHelper=null,this.requestHeaders=null,this._logger=console,this.signals=new Ir.UpdaterSignal(this),this._appUpdateConfigPath=null,this.clientPromise=null,this.stagingUserIdPromise=new ia.Lazy(()=>this.getOrCreateStagingUserId()),this.configOnDisk=new ia.Lazy(()=>this.loadUpdateConfig()),this.checkForUpdatesPromise=null,this.updateInfoAndProvider=null,this._testOnlyOptions=null,this.on("error",a=>{this._logger.error(`Error: ${a.stack||a.message}`)}),n==null?(this.app=new Yv.ElectronAppAdapter,this.httpExecutor=new Js.ElectronHttpExecutor((a,o)=>this.emit("login",a,o))):(this.app=n,this.httpExecutor=null);const r=this.app.version,i=zt.parse(r);if(i==null)throw Oe.newError(`App version is not a valid semver version: "${r}"`,"ERR_UPDATER_INVALID_VERSION");this.currentVersion=i,this.allowPrerelease=Xv(i),t!=null&&(this.setFeedURL(t),typeof t!="string"&&t.requestHeaders&&(this.requestHeaders=t.requestHeaders))}get channel(){return this._channel}set channel(t){if(this._channel!=null){if(typeof t!="string")throw Oe.newError(`Channel must be a string, but got: ${t}`,"ERR_UPDATER_INVALID_CHANNEL");if(t.length===0)throw Oe.newError("Channel must be not an empty string","ERR_UPDATER_INVALID_CHANNEL")}this._channel=t,this.allowDowngrade=!0}addAuthHeader(t){this.requestHeaders=Object.assign({},this.requestHeaders,{authorization:t})}get netSession(){return Js.getNetSession()}get logger(){return this._logger}set logger(t){this._logger=t??new dc}set updateConfigPath(t){this.clientPromise=null,this._appUpdateConfigPath=t,this.configOnDisk=new ia.Lazy(()=>this.loadUpdateConfig())}getFeedURL(){return"Deprecated. Do not use it."}setFeedURL(t){const n=this.createProviderRuntimeOptions();let r;typeof t=="string"?r=new Wv.GenericProvider({provider:"generic",url:t},this,{...n,isUseMultipleRangeRequest:aa.isUrlProbablySupportMultiRangeRequests(t)}):r=aa.createClient(t,this,n),this.clientPromise=Promise.resolve(r)}checkForUpdates(){let t=this.checkForUpdatesPromise;if(t!=null)return this._logger.info("Checking for update (already in progress)"),t;const n=()=>this.checkForUpdatesPromise=null;return this._logger.info("Checking for update"),t=this.doCheckForUpdates().then(r=>(n(),r)).catch(r=>{throw n(),this.emit("error",r,`Cannot check for updates: ${(r.stack||r).toString()}`),r}),this.checkForUpdatesPromise=t,t}isUpdaterActive(){return this.app.isPackaged?!0:(this._logger.info("Skip checkForUpdatesAndNotify because application is not packed"),!1)}checkForUpdatesAndNotify(t){return this.isUpdaterActive()?this.checkForUpdates().then(n=>{const r=n.downloadPromise;return r==null?(this._logger.debug!=null&&this._logger.debug("checkForUpdatesAndNotify called, downloadPromise is null"),n):(r.then(()=>{const i=Za.formatDownloadNotification(n.updateInfo.version,this.app.name,t);new nn.default.Notification(i).show()}),n)}):Promise.resolve(null)}static formatDownloadNotification(t,n,r){return r==null&&(r={title:"A new update is ready to install",body:"{appName} version {version} has been downloaded and will be automatically installed on exit"}),r={title:r.title.replace("{appName}",n).replace("{version}",t),body:r.body.replace("{appName}",n).replace("{version}",t)},r}async isStagingMatch(t){const n=t.stagingPercentage;let r=n;if(r==null)return!0;if(r=parseInt(r,10),isNaN(r))return this._logger.warn(`Staging percentage is NaN: ${n}`),!0;r=r/100;const i=await this.stagingUserIdPromise.value,o=Oe.UUID.parse(i).readUInt32BE(12)/4294967295;return this._logger.info(`Staging percentage: ${r}, percentage: ${o}, user id: ${i}`),o<r}computeFinalHeaders(t){return this.requestHeaders!=null&&Object.assign(t,this.requestHeaders),t}async isUpdateAvailable(t){const n=zt.parse(t.version);if(n==null)throw Oe.newError(`This file could not be downloaded, or the latest version (from update server) does not have a valid semver version: "${t.version}"`,"ERR_UPDATER_INVALID_VERSION");const r=this.currentVersion;if(zt.eq(n,r)||!await this.isStagingMatch(t))return!1;const a=zt.gt(n,r),o=zt.lt(n,r);return a?!0:this.allowDowngrade&&o}async getUpdateInfoAndProvider(){await this.app.whenReady(),this.clientPromise==null&&(this.clientPromise=this.configOnDisk.value.then(r=>aa.createClient(r,this,this.createProviderRuntimeOptions())));const t=await this.clientPromise,n=await this.stagingUserIdPromise.value;return t.setRequestHeaders(this.computeFinalHeaders({"x-user-staging-id":n})),{info:await t.getLatestVersion(),provider:t}}createProviderRuntimeOptions(){return{isUseMultipleRangeRequest:!0,platform:this._testOnlyOptions==null?process.platform:this._testOnlyOptions.platform,executor:this.httpExecutor}}async doCheckForUpdates(){this.emit("checking-for-update");const t=await this.getUpdateInfoAndProvider(),n=t.info;if(!await this.isUpdateAvailable(n))return this._logger.info(`Update for version ${this.currentVersion} is not available (latest version: ${n.version}, downgrade is ${this.allowDowngrade?"allowed":"disallowed"}).`),this.emit("update-not-available",n),{versionInfo:n,updateInfo:n};this.updateInfoAndProvider=t,this.onUpdateAvailable(n);const r=new Oe.CancellationToken;return{versionInfo:n,updateInfo:n,cancellationToken:r,downloadPromise:this.autoDownload?this.downloadUpdate(r):null}}onUpdateAvailable(t){this._logger.info(`Found version ${t.version} (url: ${Oe.asArray(t.files).map(n=>n.url).join(", ")})`),this.emit("update-available",t)}downloadUpdate(t=new Oe.CancellationToken){const n=this.updateInfoAndProvider;if(n==null){const i=new Error("Please check update first");return this.dispatchError(i),Promise.reject(i)}this._logger.info(`Downloading update from ${Oe.asArray(n.info.files).map(i=>i.url).join(", ")}`);const r=i=>{if(!(i instanceof Oe.CancellationError))try{this.dispatchError(i)}catch(a){this._logger.warn(`Cannot dispatch error event: ${a.stack||a}`)}return i};try{return this.doDownloadUpdate({updateInfoAndProvider:n,requestHeaders:this.computeRequestHeaders(n.provider),cancellationToken:t}).catch(i=>{throw r(i)})}catch(i){return Promise.reject(r(i))}}dispatchError(t){this.emit("error",t,(t.stack||t).toString())}dispatchUpdateDownloaded(t){this.emit(Ir.UPDATE_DOWNLOADED,t)}async loadUpdateConfig(){return this._appUpdateConfigPath==null&&(this._appUpdateConfigPath=this.app.appUpdateConfigPath),Vv.load(await In.readFile(this._appUpdateConfigPath,"utf-8"))}computeRequestHeaders(t){const n=t.fileExtraDownloadHeaders;if(n!=null){const r=this.requestHeaders;return r==null?n:{...n,...r}}return this.computeFinalHeaders({accept:"*/*"})}async getOrCreateStagingUserId(){const t=Yt.join(this.app.userDataPath,".updaterId");try{const r=await In.readFile(t,"utf-8");if(Oe.UUID.check(r))return r;this._logger.warn(`Staging user id file exists, but content was invalid: ${r}`)}catch(r){r.code!=="ENOENT"&&this._logger.warn(`Couldn't read staging user ID, creating a blank one: ${r}`)}const n=Oe.UUID.v5(Hv.randomBytes(4096),Oe.UUID.OID);this._logger.info(`Generated new staging user ID: ${n}`);try{await Gv.outputFile(t,n)}catch(r){this._logger.warn(`Couldn't write out staging user ID: ${r}`)}return n}get isAddNoCacheQuery(){const t=this.requestHeaders;if(t==null)return!0;for(const n of Object.keys(t)){const r=n.toLowerCase();if(r==="authorization"||r==="private-token")return!1}return!0}async getOrCreateDownloadHelper(){let t=this.downloadedUpdateHelper;if(t==null){const n=(await this.configOnDisk.value).updaterCacheDirName,r=this._logger;n==null&&r.error("updaterCacheDirName is not specified in app-update.yml Was app build using at least electron-builder 20.34.0?");const i=Yt.join(this.app.baseCachePath,n||this.app.name);r.debug!=null&&r.debug(`updater cache dir: ${i}`),t=new Ks.DownloadedUpdateHelper(i),this.downloadedUpdateHelper=t}return t}async executeDownload(t){const n=t.fileInfo,r={headers:t.downloadUpdateOptions.requestHeaders,cancellationToken:t.downloadUpdateOptions.cancellationToken,sha2:n.info.sha2,sha512:n.info.sha512};this.listenerCount(Ir.DOWNLOAD_PROGRESS)>0&&(r.onProgress=$=>this.emit(Ir.DOWNLOAD_PROGRESS,$));const i=t.downloadUpdateOptions.updateInfoAndProvider.info,a=i.version,o=n.packageInfo;function s(){const $=decodeURIComponent(t.fileInfo.url.pathname);return $.endsWith(`.${t.fileExtension}`)?Yt.posix.basename($):`update.${t.fileExtension}`}const l=await this.getOrCreateDownloadHelper(),p=l.cacheDirForPendingUpdate;await In.mkdir(p,{recursive:!0});const f=s();let c=Yt.join(p,f);const m=o==null?null:Yt.join(p,`package-${a}${Yt.extname(o.path)||".7z"}`),y=async $=>(await l.setDownloadedFile(c,m,i,n,f,$),await t.done({...i,downloadedFile:c}),m==null?[c]:[c,m]),w=this._logger,A=await l.validateDownloadedPath(c,i,n,w);if(A!=null)return c=A,await y(!1);const S=async()=>(await l.clear().catch(()=>{}),await In.unlink(c).catch(()=>{})),C=await Ks.createTempUpdateFile(`temp-${f}`,p,w);try{await t.task(C,r,m,S),await In.rename(C,c)}catch($){throw await S(),$ instanceof Oe.CancellationError&&(w.info("cancelled"),this.emit("update-cancelled",i)),$}return w.info(`New version ${a} has been downloaded to ${c}`),await y(!0)}}ht.AppUpdater=Za;function Xv(e){const t=zt.prerelease(e);return t!=null&&t.length>0}class dc{info(t){}warn(t){}error(t){}}ht.NoOpLogger=dc;var Kn={},ar={};Object.defineProperty(ar,"__esModule",{value:!0});ar.BaseUpdater=void 0;const zv=ht;class Kv extends zv.AppUpdater{constructor(t,n){super(t,n),this.quitAndInstallCalled=!1,this.quitHandlerAdded=!1}quitAndInstall(t=!1,n=!1){this._logger.info("Install on explicit quitAndInstall"),this.install(t,t?n:!0)?setImmediate(()=>{nn.default.autoUpdater.emit("before-quit-for-update"),this.app.quit()}):this.quitAndInstallCalled=!1}executeDownload(t){return super.executeDownload({...t,done:n=>(this.dispatchUpdateDownloaded(n),this.addQuitHandler(),Promise.resolve())})}install(t,n){if(this.quitAndInstallCalled)return this._logger.warn("install call ignored: quitAndInstallCalled is set to true"),!1;const r=this.downloadedUpdateHelper,i=r==null?null:r.file,a=r==null?null:r.downloadedFileInfo;if(i==null||a==null)return this.dispatchError(new Error("No valid update available, can't quit and install")),!1;this.quitAndInstallCalled=!0;try{return this._logger.info(`Install: isSilent: ${t}, isForceRunAfter: ${n}`),this.doInstall({installerPath:i,isSilent:t,isForceRunAfter:n,isAdminRightsRequired:a.isAdminRightsRequired})}catch(o){return this.dispatchError(o),!1}}addQuitHandler(){this.quitHandlerAdded||!this.autoInstallOnAppQuit||(this.quitHandlerAdded=!0,this.app.onQuit(t=>{if(this.quitAndInstallCalled){this._logger.info("Update installer has already been triggered. Quitting application.");return}if(!this.autoInstallOnAppQuit){this._logger.info("Update will not be installed on quit because autoInstallOnAppQuit is set to false.");return}if(t!==0){this._logger.info(`Update will be not installed on quit because application is quitting with exit code ${t}`);return}this._logger.info("Auto install update on quit"),this.install(!0,!1)}))}}ar.BaseUpdater=Kv;var or={},sr={},Ft={},_i={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.computeOperations=e.OperationKind=void 0;var t;(function(s){s[s.COPY=0]="COPY",s[s.DOWNLOAD=1]="DOWNLOAD"})(t=e.OperationKind||(e.OperationKind={}));function n(s,l,p){const f=o(s.files),c=o(l.files);let m=null;const y=l.files[0],w=[],A=y.name,S=f.get(A);if(S==null)throw new Error(`no file ${A} in old blockmap`);const C=c.get(A);let $=0;const{checksumToOffset:L,checksumToOldSize:R}=a(f.get(A),S.offset,p);let se=y.offset;for(let V=0;V<C.checksums.length;se+=C.sizes[V],V++){const q=C.sizes[V],ue=C.checksums[V];let g=L.get(ue);g!=null&&R.get(ue)!==q&&(p.warn(`Checksum ("${ue}") matches, but size differs (old: ${R.get(ue)}, new: ${q})`),g=void 0),g===void 0?($++,m!=null&&m.kind===t.DOWNLOAD&&m.end===se?m.end+=q:(m={kind:t.DOWNLOAD,start:se,end:se+q},i(m,w,ue,V))):m!=null&&m.kind===t.COPY&&m.end===g?m.end+=q:(m={kind:t.COPY,start:g,end:g+q},i(m,w,ue,V))}return $>0&&p.info(`File${y.name==="file"?"":" "+y.name} has ${$} changed blocks`),w}e.computeOperations=n;const r=process.env.DIFFERENTIAL_DOWNLOAD_PLAN_BUILDER_VALIDATE_RANGES==="true";function i(s,l,p,f){if(r&&l.length!==0){const c=l[l.length-1];if(c.kind===s.kind&&s.start<c.end&&s.start>c.start){const m=[c.start,c.end,s.start,s.end].reduce((y,w)=>y<w?y:w);throw new Error(`operation (block index: ${f}, checksum: ${p}, kind: ${t[s.kind]}) overlaps previous operation (checksum: ${p}):
abs: ${c.start} until ${c.end} and ${s.start} until ${s.end}
rel: ${c.start-m} until ${c.end-m} and ${s.start-m} until ${s.end-m}`)}}l.push(s)}function a(s,l,p){const f=new Map,c=new Map;let m=l;for(let y=0;y<s.checksums.length;y++){const w=s.checksums[y],A=s.sizes[y],S=c.get(w);if(S===void 0)f.set(w,m),c.set(w,A);else if(p.debug!=null){const C=S===A?"(same size)":`(size: ${S}, this size: ${A})`;p.debug(`${w} duplicated in blockmap ${C}, it doesn't lead to broken differential downloader, just corresponding block will be skipped)`)}m+=A}return{checksumToOffset:f,checksumToOldSize:c}}function o(s){const l=new Map;for(const p of s)l.set(p.name,p);return l}})(_i);Object.defineProperty(Ft,"__esModule",{value:!0});Ft.DataSplitter=Ft.copyData=void 0;const Rr=te,Jv=yt.default,Qv=Zn.default,Zv=_i,Qs=Buffer.from(`\r
\r
`);var lt;(function(e){e[e.INIT=0]="INIT",e[e.HEADER=1]="HEADER",e[e.BODY=2]="BODY"})(lt||(lt={}));function hc(e,t,n,r,i){const a=Jv.createReadStream("",{fd:n,autoClose:!1,start:e.start,end:e.end-1});a.on("error",r),a.once("end",i),a.pipe(t,{end:!1})}Ft.copyData=hc;class ew extends Qv.Writable{constructor(t,n,r,i,a,o){super(),this.out=t,this.options=n,this.partIndexToTaskIndex=r,this.partIndexToLength=a,this.finishHandler=o,this.partIndex=-1,this.headerListBuffer=null,this.readState=lt.INIT,this.ignoreByteCount=0,this.remainingPartDataCount=0,this.actualPartLength=0,this.boundaryLength=i.length+4,this.ignoreByteCount=this.boundaryLength-2}get isFinished(){return this.partIndex===this.partIndexToLength.length}_write(t,n,r){if(this.isFinished){console.error(`Trailing ignored data: ${t.length} bytes`);return}this.handleData(t).then(r).catch(r)}async handleData(t){let n=0;if(this.ignoreByteCount!==0&&this.remainingPartDataCount!==0)throw Rr.newError("Internal error","ERR_DATA_SPLITTER_BYTE_COUNT_MISMATCH");if(this.ignoreByteCount>0){const r=Math.min(this.ignoreByteCount,t.length);this.ignoreByteCount-=r,n=r}else if(this.remainingPartDataCount>0){const r=Math.min(this.remainingPartDataCount,t.length);this.remainingPartDataCount-=r,await this.processPartData(t,0,r),n=r}if(n!==t.length){if(this.readState===lt.HEADER){const r=this.searchHeaderListEnd(t,n);if(r===-1)return;n=r,this.readState=lt.BODY,this.headerListBuffer=null}for(;;){if(this.readState===lt.BODY)this.readState=lt.INIT;else{this.partIndex++;let o=this.partIndexToTaskIndex.get(this.partIndex);if(o==null)if(this.isFinished)o=this.options.end;else throw Rr.newError("taskIndex is null","ERR_DATA_SPLITTER_TASK_INDEX_IS_NULL");const s=this.partIndex===0?this.options.start:this.partIndexToTaskIndex.get(this.partIndex-1)+1;if(s<o)await this.copyExistingData(s,o);else if(s>o)throw Rr.newError("prevTaskIndex must be < taskIndex","ERR_DATA_SPLITTER_TASK_INDEX_ASSERT_FAILED");if(this.isFinished){this.onPartEnd(),this.finishHandler();return}if(n=this.searchHeaderListEnd(t,n),n===-1){this.readState=lt.HEADER;return}}const r=this.partIndexToLength[this.partIndex],i=n+r,a=Math.min(i,t.length);if(await this.processPartStarted(t,n,a),this.remainingPartDataCount=r-(a-n),this.remainingPartDataCount>0)return;if(n=i+this.boundaryLength,n>=t.length){this.ignoreByteCount=this.boundaryLength-(t.length-i);return}}}}copyExistingData(t,n){return new Promise((r,i)=>{const a=()=>{if(t===n){r();return}const o=this.options.tasks[t];if(o.kind!==Zv.OperationKind.COPY){i(new Error("Task kind must be COPY"));return}hc(o,this.out,this.options.oldFileFd,i,()=>{t++,a()})};a()})}searchHeaderListEnd(t,n){const r=t.indexOf(Qs,n);if(r!==-1)return r+Qs.length;const i=n===0?t:t.slice(n);return this.headerListBuffer==null?this.headerListBuffer=i:this.headerListBuffer=Buffer.concat([this.headerListBuffer,i]),-1}onPartEnd(){const t=this.partIndexToLength[this.partIndex-1];if(this.actualPartLength!==t)throw Rr.newError(`Expected length: ${t} differs from actual: ${this.actualPartLength}`,"ERR_DATA_SPLITTER_LENGTH_MISMATCH");this.actualPartLength=0}processPartStarted(t,n,r){return this.partIndex!==0&&this.onPartEnd(),this.processPartData(t,n,r)}processPartData(t,n,r){this.actualPartLength+=r-n;const i=this.out;return i.write(n===0&&t.length===r?t:t.slice(n,r))?Promise.resolve():new Promise((a,o)=>{i.on("error",o),i.once("drain",()=>{i.removeListener("error",o),a()})})}}Ft.DataSplitter=ew;var mn={};Object.defineProperty(mn,"__esModule",{value:!0});mn.checkIsRangesSupported=mn.executeTasksUsingMultipleRangeRequests=void 0;const Ca=te,Zs=Ft,el=_i;function tw(e,t,n,r,i){const a=o=>{if(o>=t.length){e.fileMetadataBuffer!=null&&n.write(e.fileMetadataBuffer),n.end();return}const s=o+1e3;nw(e,{tasks:t,start:o,end:Math.min(t.length,s),oldFileFd:r},n,()=>a(s),i)};return a}mn.executeTasksUsingMultipleRangeRequests=tw;function nw(e,t,n,r,i){let a="bytes=",o=0;const s=new Map,l=[];for(let c=t.start;c<t.end;c++){const m=t.tasks[c];m.kind===el.OperationKind.DOWNLOAD&&(a+=`${m.start}-${m.end-1}, `,s.set(o,c),o++,l.push(m.end-m.start))}if(o<=1){const c=m=>{if(m>=t.end){r();return}const y=t.tasks[m++];if(y.kind===el.OperationKind.COPY)Zs.copyData(y,n,t.oldFileFd,i,()=>c(m));else{const w=e.createRequestOptions();w.headers.Range=`bytes=${y.start}-${y.end-1}`;const A=e.httpExecutor.createRequest(w,S=>{!ba(S,i)||(S.pipe(n,{end:!1}),S.once("end",()=>c(m)))});e.httpExecutor.addErrorAndTimeoutHandlers(A,i),A.end()}};c(t.start);return}const p=e.createRequestOptions();p.headers.Range=a.substring(0,a.length-2);const f=e.httpExecutor.createRequest(p,c=>{if(!ba(c,i))return;const m=Ca.safeGetHeader(c,"content-type"),y=/^multipart\/.+?(?:; boundary=(?:(?:"(.+)")|(?:([^\s]+))))$/i.exec(m);if(y==null){i(new Error(`Content-Type "multipart/byteranges" is expected, but got "${m}"`));return}const w=new Zs.DataSplitter(n,t,s,y[1]||y[2],l,r);w.on("error",i),c.pipe(w),c.on("end",()=>{setTimeout(()=>{f.abort(),i(new Error("Response ends without calling any handlers"))},1e4)})});e.httpExecutor.addErrorAndTimeoutHandlers(f,i),f.end()}function ba(e,t){if(e.statusCode>=400)return t(Ca.createHttpError(e)),!1;if(e.statusCode!==206){const n=Ca.safeGetHeader(e,"accept-ranges");if(n==null||n==="none")return t(new Error(`Server doesn't support Accept-Ranges (response code ${e.statusCode})`)),!1}return!0}mn.checkIsRangesSupported=ba;var Ti={};Object.defineProperty(Ti,"__esModule",{value:!0});Ti.ProgressDifferentialDownloadCallbackTransform=void 0;const rw=Zn.default;var Zt;(function(e){e[e.COPY=0]="COPY",e[e.DOWNLOAD=1]="DOWNLOAD"})(Zt||(Zt={}));class iw extends rw.Transform{constructor(t,n,r){super(),this.progressDifferentialDownloadInfo=t,this.cancellationToken=n,this.onProgress=r,this.start=Date.now(),this.transferred=0,this.delta=0,this.expectedBytes=0,this.index=0,this.operationType=Zt.COPY,this.nextUpdate=this.start+1e3}_transform(t,n,r){if(this.cancellationToken.cancelled){r(new Error("cancelled"),null);return}if(this.operationType==Zt.COPY){r(null,t);return}this.transferred+=t.length,this.delta+=t.length;const i=Date.now();i>=this.nextUpdate&&this.transferred!==this.expectedBytes&&this.transferred!==this.progressDifferentialDownloadInfo.grandTotal&&(this.nextUpdate=i+1e3,this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.progressDifferentialDownloadInfo.grandTotal*100,bytesPerSecond:Math.round(this.transferred/((i-this.start)/1e3))}),this.delta=0),r(null,t)}beginFileCopy(){this.operationType=Zt.COPY}beginRangeDownload(){this.operationType=Zt.DOWNLOAD,this.expectedBytes+=this.progressDifferentialDownloadInfo.expectedByteCounts[this.index++]}endRangeDownload(){this.transferred!==this.progressDifferentialDownloadInfo.grandTotal&&this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.progressDifferentialDownloadInfo.grandTotal*100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))})}_flush(t){if(this.cancellationToken.cancelled){t(new Error("cancelled"));return}this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))}),this.delta=0,this.transferred=0,t(null)}}Ti.ProgressDifferentialDownloadCallbackTransform=iw;Object.defineProperty(sr,"__esModule",{value:!0});sr.DifferentialDownloader=void 0;const Rn=te,oa=kt,aw=yt.default,ow=Ft,sw=xt.default,Dr=_i,tl=mn,lw=Ti;class uw{constructor(t,n,r){this.blockAwareFileInfo=t,this.httpExecutor=n,this.options=r,this.fileMetadataBuffer=null,this.logger=r.logger}createRequestOptions(){const t={headers:{...this.options.requestHeaders,accept:"*/*"}};return Rn.configureRequestUrl(this.options.newUrl,t),Rn.configureRequestOptions(t),t}doDownload(t,n){if(t.version!==n.version)throw new Error(`version is different (${t.version} - ${n.version}), full download is required`);const r=this.logger,i=Dr.computeOperations(t,n,r);r.debug!=null&&r.debug(JSON.stringify(i,null,2));let a=0,o=0;for(const l of i){const p=l.end-l.start;l.kind===Dr.OperationKind.DOWNLOAD?a+=p:o+=p}const s=this.blockAwareFileInfo.size;if(a+o+(this.fileMetadataBuffer==null?0:this.fileMetadataBuffer.length)!==s)throw new Error(`Internal error, size mismatch: downloadSize: ${a}, copySize: ${o}, newSize: ${s}`);return r.info(`Full: ${nl(s)}, To download: ${nl(a)} (${Math.round(a/(s/100))}%)`),this.downloadFile(i)}downloadFile(t){const n=[],r=()=>Promise.all(n.map(i=>oa.close(i.descriptor).catch(a=>{this.logger.error(`cannot close file "${i.path}": ${a}`)})));return this.doDownloadFile(t,n).then(r).catch(i=>r().catch(a=>{try{this.logger.error(`cannot close files: ${a}`)}catch(o){try{console.error(o)}catch{}}throw i}).then(()=>{throw i}))}async doDownloadFile(t,n){const r=await oa.open(this.options.oldFile,"r");n.push({descriptor:r,path:this.options.oldFile});const i=await oa.open(this.options.newFile,"w");n.push({descriptor:i,path:this.options.newFile});const a=aw.createWriteStream(this.options.newFile,{fd:i});await new Promise((o,s)=>{const l=[];let p;if(!this.options.isUseMultipleRangeRequest&&this.options.onProgress){const C=[];let $=0;for(const R of t)R.kind===Dr.OperationKind.DOWNLOAD&&(C.push(R.end-R.start),$+=R.end-R.start);const L={expectedByteCounts:C,grandTotal:$};p=new lw.ProgressDifferentialDownloadCallbackTransform(L,this.options.cancellationToken,this.options.onProgress),l.push(p)}const f=new Rn.DigestTransform(this.blockAwareFileInfo.sha512);f.isValidateOnEnd=!1,l.push(f),a.on("finish",()=>{a.close(()=>{n.splice(1,1);try{f.validate()}catch(C){s(C);return}o(void 0)})}),l.push(a);let c=null;for(const C of l)C.on("error",s),c==null?c=C:c=c.pipe(C);const m=l[0];let y;if(this.options.isUseMultipleRangeRequest){y=tl.executeTasksUsingMultipleRangeRequests(this,t,m,r,s),y(0);return}let w=0,A=null;this.logger.info(`Differential download: ${this.options.newUrl}`);const S=this.createRequestOptions();S.redirect="manual",y=C=>{var $,L;if(C>=t.length){this.fileMetadataBuffer!=null&&m.write(this.fileMetadataBuffer),m.end();return}const R=t[C++];if(R.kind===Dr.OperationKind.COPY){p&&p.beginFileCopy(),ow.copyData(R,m,r,s,()=>y(C));return}const se=`bytes=${R.start}-${R.end-1}`;S.headers.range=se,(L=($=this.logger)===null||$===void 0?void 0:$.debug)===null||L===void 0||L.call($,`download range: ${se}`),p&&p.beginRangeDownload();const V=this.httpExecutor.createRequest(S,q=>{q.statusCode>=400&&s(Rn.createHttpError(q)),q.pipe(m,{end:!1}),q.once("end",()=>{p&&p.endRangeDownload(),++w===100?(w=0,setTimeout(()=>y(C),1e3)):y(C)})});V.on("redirect",(q,ue,g)=>{this.logger.info(`Redirect to ${cw(g)}`),A=g,Rn.configureRequestUrl(new sw.URL(A),S),V.followRedirect()}),this.httpExecutor.addErrorAndTimeoutHandlers(V,s),V.end()},y(0)})}async readRemoteBytes(t,n){const r=Buffer.allocUnsafe(n+1-t),i=this.createRequestOptions();i.headers.range=`bytes=${t}-${n}`;let a=0;if(await this.request(i,o=>{o.copy(r,a),a+=o.length}),a!==r.length)throw new Error(`Received data length ${a} is not equal to expected ${r.length}`);return r}request(t,n){return new Promise((r,i)=>{const a=this.httpExecutor.createRequest(t,o=>{!tl.checkIsRangesSupported(o,i)||(o.on("data",n),o.on("end",()=>r()))});this.httpExecutor.addErrorAndTimeoutHandlers(a,i),a.end()})}}sr.DifferentialDownloader=uw;function nl(e,t=" KB"){return new Intl.NumberFormat("en").format((e/1024).toFixed(2))+t}function cw(e){const t=e.indexOf("?");return t<0?e:e.substring(0,t)}Object.defineProperty(or,"__esModule",{value:!0});or.FileWithEmbeddedBlockMapDifferentialDownloader=void 0;const Wt=kt,fw=sr,dw=hl.default;class hw extends fw.DifferentialDownloader{async download(){const t=this.blockAwareFileInfo,n=t.size,r=n-(t.blockMapSize+4);this.fileMetadataBuffer=await this.readRemoteBytes(r,n-1);const i=pc(this.fileMetadataBuffer.slice(0,this.fileMetadataBuffer.length-4));await this.doDownload(await pw(this.options.oldFile),i)}}or.FileWithEmbeddedBlockMapDifferentialDownloader=hw;function pc(e){return JSON.parse(dw.inflateRawSync(e).toString())}async function pw(e){const t=await Wt.open(e,"r");try{const n=(await Wt.fstat(t)).size,r=Buffer.allocUnsafe(4);await Wt.read(t,r,0,r.length,n-r.length);const i=Buffer.allocUnsafe(r.readUInt32BE(0));return await Wt.read(t,i,0,i.length,n-r.length-i.length),await Wt.close(t),pc(i)}catch(n){throw await Wt.close(t),n}}Object.defineProperty(Kn,"__esModule",{value:!0});Kn.AppImageUpdater=void 0;const rl=te,sa=Zr.default,mw=kt,gw=yt.default,Dn=oe.default,yw=ar,Ew=or,il=gn,vw=ie;class ww extends yw.BaseUpdater{constructor(t,n){super(t,n)}isUpdaterActive(){return process.env.APPIMAGE==null?(process.env.SNAP==null?this._logger.warn("APPIMAGE env is not defined, current application is not an AppImage"):this._logger.info("SNAP env is defined, updater is disabled"),!1):super.isUpdaterActive()}doDownloadUpdate(t){const n=t.updateInfoAndProvider.provider,r=vw.findFile(n.resolveFiles(t.updateInfoAndProvider.info),"AppImage");return this.executeDownload({fileExtension:"AppImage",fileInfo:r,downloadUpdateOptions:t,task:async(i,a)=>{const o=process.env.APPIMAGE;if(o==null)throw rl.newError("APPIMAGE env is not defined","ERR_UPDATER_OLD_FILE_NOT_FOUND");let s=!1;try{const l={newUrl:r.url,oldFile:o,logger:this._logger,newFile:i,isUseMultipleRangeRequest:n.isUseMultipleRangeRequest,requestHeaders:t.requestHeaders,cancellationToken:t.cancellationToken};this.listenerCount(il.DOWNLOAD_PROGRESS)>0&&(l.onProgress=p=>this.emit(il.DOWNLOAD_PROGRESS,p)),await new Ew.FileWithEmbeddedBlockMapDifferentialDownloader(r.info,this.httpExecutor,l).download()}catch(l){this._logger.error(`Cannot download differentially, fallback to full download: ${l.stack||l}`),s=process.platform==="linux"}s&&await this.httpExecutor.download(r.url,i,a),await mw.chmod(i,493)}})}doInstall(t){const n=process.env.APPIMAGE;if(n==null)throw rl.newError("APPIMAGE env is not defined","ERR_UPDATER_OLD_FILE_NOT_FOUND");gw.unlinkSync(n);let r;const i=Dn.basename(n);Dn.basename(t.installerPath)===i||!/\d+\.\d+\.\d+/.test(i)?r=n:r=Dn.join(Dn.dirname(n),Dn.basename(t.installerPath)),sa.execFileSync("mv",["-f",t.installerPath,r]),r!==n&&this.emit("appimage-filename-updated",r);const a={...process.env,APPIMAGE_SILENT_INSTALL:"true"};return t.isForceRunAfter?sa.spawn(r,[],{detached:!0,stdio:"ignore",env:a}).unref():(a.APPIMAGE_EXIT_AFTER_INSTALL="true",sa.execFileSync(r,[],{env:a})),!0}}Kn.AppImageUpdater=ww;var Jn={};Object.defineProperty(Jn,"__esModule",{value:!0});Jn.MacUpdater=void 0;const al=te,_w=kt,Tw=yt.default,Aw=Mf.default,Sw=ht,$w=ie,ol=Zr.default;class Cw extends Sw.AppUpdater{constructor(t,n){super(t,n),this.nativeUpdater=nn.default.autoUpdater,this.squirrelDownloadedUpdate=!1,this.nativeUpdater.on("error",r=>{this._logger.warn(r),this.emit("error",r)}),this.nativeUpdater.on("update-downloaded",()=>{this.squirrelDownloadedUpdate=!0})}debug(t){this._logger.debug!=null&&this._logger.debug(t)}async doDownloadUpdate(t){let n=t.updateInfoAndProvider.provider.resolveFiles(t.updateInfoAndProvider.info);const r=this._logger,i="sysctl.proc_translated";let a=!1;try{this.debug("Checking for macOS Rosetta environment"),a=ol.execFileSync("sysctl",[i],{encoding:"utf8"}).includes(`${i}: 1`),r.info(`Checked for macOS Rosetta environment (isRosetta=${a})`)}catch(p){r.warn(`sysctl shell command to check for macOS Rosetta environment failed: ${p}`)}let o=!1;try{this.debug("Checking for arm64 in uname");const f=ol.execFileSync("uname",["-a"],{encoding:"utf8"}).includes("ARM");r.info(`Checked 'uname -a': arm64=${f}`),o=o||f}catch(p){r.warn(`uname shell command to check for arm64 failed: ${p}`)}o=o||process.arch==="arm64"||a;const s=p=>{var f;return p.url.pathname.includes("arm64")||((f=p.info.url)===null||f===void 0?void 0:f.includes("arm64"))};o&&n.some(s)?n=n.filter(p=>o===s(p)):n=n.filter(p=>!s(p));const l=$w.findFile(n,"zip",["pkg","dmg"]);if(l==null)throw al.newError(`ZIP file not provided: ${al.safeStringifyJson(n)}`,"ERR_UPDATER_ZIP_FILE_NOT_FOUND");return this.executeDownload({fileExtension:"zip",fileInfo:l,downloadUpdateOptions:t,task:(p,f)=>this.httpExecutor.download(l.url,p,f),done:p=>this.updateDownloaded(l,p)})}async updateDownloaded(t,n){var r;const i=n.downloadedFile,a=(r=t.info.size)!==null&&r!==void 0?r:(await _w.stat(i)).size,o=this._logger,s=`fileToProxy=${t.url.href}`;this.debug(`Creating proxy server for native Squirrel.Mac (${s})`);const l=Aw.createServer();this.debug(`Proxy server for native Squirrel.Mac is created (${s})`),l.on("close",()=>{o.info(`Proxy server for native Squirrel.Mac is closed (${s})`)});function p(){return`http://127.0.0.1:${l.address().port}`}return await new Promise((f,c)=>{const m=`/${Date.now().toString(16)}-${Math.floor(Math.random()*9999).toString(16)}.zip`;l.on("request",(y,w)=>{const A=y.url;if(o.info(`${A} requested`),A==="/"){const $=Buffer.from(`{ "url": "${p()}${m}" }`);w.writeHead(200,{"Content-Type":"application/json","Content-Length":$.length}),w.end($);return}if(!A.startsWith(m)){o.warn(`${A} requested, but not supported`),w.writeHead(404),w.end();return}o.info(`${m} requested by Squirrel.Mac, pipe ${i}`);let S=!1;w.on("finish",()=>{try{setImmediate(()=>l.close())}finally{S||(this.nativeUpdater.removeListener("error",c),f([]))}});const C=Tw.createReadStream(i);C.on("error",$=>{try{w.end()}catch(L){o.warn(`cannot end response: ${L}`)}S=!0,this.nativeUpdater.removeListener("error",c),c(new Error(`Cannot pipe "${i}": ${$}`))}),w.writeHead(200,{"Content-Type":"application/zip","Content-Length":a}),C.pipe(w)}),this.debug(`Proxy server for native Squirrel.Mac is starting to listen (${s})`),l.listen(0,"127.0.0.1",()=>{this.debug(`Proxy server for native Squirrel.Mac is listening (address=${p()}, ${s})`),this.nativeUpdater.setFeedURL({url:p(),headers:{"Cache-Control":"no-cache"}}),this.dispatchUpdateDownloaded(n),this.autoInstallOnAppQuit?(this.nativeUpdater.once("error",c),this.nativeUpdater.checkForUpdates()):f([])})})}quitAndInstall(){this.squirrelDownloadedUpdate?this.nativeUpdater.quitAndInstall():(this.nativeUpdater.on("update-downloaded",()=>{this.nativeUpdater.quitAndInstall()}),this.autoInstallOnAppQuit||this.nativeUpdater.checkForUpdates())}}Jn.MacUpdater=Cw;var Qn={},Ai={};Object.defineProperty(Ai,"__esModule",{value:!0});Ai.GenericDifferentialDownloader=void 0;const bw=sr;class Ow extends bw.DifferentialDownloader{download(t,n){return this.doDownload(t,n)}}Ai.GenericDifferentialDownloader=Ow;var Si={};Object.defineProperty(Si,"__esModule",{value:!0});Si.verifySignature=void 0;const Nw=te,mc=Zr.default,Iw=dl.default;function Rw(e,t,n){return new Promise(r=>{const i=t.replace(/'/g,"''").replace(/`/g,"``");mc.execFile("powershell.exe",["-NoProfile","-NonInteractive","-InputFormat","None","-Command",`Get-AuthenticodeSignature '${i}' | ConvertTo-Json -Compress | ForEach-Object { [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($_)) }`],{timeout:20*1e3},(a,o,s)=>{try{if(a!=null||s){Pw(n,a,s),r(null);return}const l=Dw(Buffer.from(o,"base64").toString("utf-8"));if(l.Status===0){const f=Nw.parseDn(l.SignerCertificate.Subject).get("CN");if(e.includes(f)){r(null);return}}const p=`publisherNames: ${e.join(" | ")}, raw info: `+JSON.stringify(l,(f,c)=>f==="RawData"?void 0:c,2);n.warn(`Sign verification failed, installer signed with incorrect certificate: ${p}`),r(p)}catch{n.warn(`Cannot execute Get-AuthenticodeSignature: ${a}. Ignoring signature validation due to unknown error.`),r(null);return}})})}Si.verifySignature=Rw;function Dw(e){const t=JSON.parse(e);delete t.PrivateKey,delete t.IsOSBinary,delete t.SignatureType;const n=t.SignerCertificate;return n!=null&&(delete n.Archived,delete n.Extensions,delete n.Handle,delete n.HasPrivateKey,delete n.SubjectName),delete t.Path,t}function Pw(e,t,n){if(Fw()){e.warn(`Cannot execute Get-AuthenticodeSignature: ${t||n}. Ignoring signature validation due to unsupported powershell version. Please upgrade to powershell 3 or higher.`);return}try{mc.execFileSync("powershell.exe",["-NoProfile","-NonInteractive","-Command","ConvertTo-Json test"],{timeout:10*1e3})}catch(r){e.warn(`Cannot execute ConvertTo-Json: ${r.message}. Ignoring signature validation due to unsupported powershell version. Please upgrade to powershell 3 or higher.`);return}if(t!=null)throw t;if(n){e.warn(`Cannot execute Get-AuthenticodeSignature, stderr: ${n}. Ignoring signature validation due to unknown stderr.`);return}}function Fw(){const e=Iw.release();return e.startsWith("6.")&&!e.startsWith("6.3")}Object.defineProperty(Qn,"__esModule",{value:!0});Qn.NsisUpdater=void 0;const la=te,xw=Zr.default,ua=oe.default,Lw=ar,Uw=or,kw=Ai,Pr=gn,Mw=ge,Bw=ie,qw=kt,Hw=Si,sl=xt.default,jw=hl.default;class Gw extends Lw.BaseUpdater{constructor(t,n){super(t,n)}doDownloadUpdate(t){const n=t.updateInfoAndProvider.provider,r=Bw.findFile(n.resolveFiles(t.updateInfoAndProvider.info),"exe");return this.executeDownload({fileExtension:"exe",downloadUpdateOptions:t,fileInfo:r,task:async(i,a,o,s)=>{const l=r.packageInfo,p=l!=null&&o!=null;(p||await this.differentialDownloadInstaller(r,t,i,n))&&await this.httpExecutor.download(r.url,i,a);const f=await this.verifySignature(i);if(f!=null)throw await s(),la.newError(`New version ${t.updateInfoAndProvider.info.version} is not signed by the application owner: ${f}`,"ERR_UPDATER_INVALID_SIGNATURE");if(p&&await this.differentialDownloadWebPackage(t,l,o,n))try{await this.httpExecutor.download(new sl.URL(l.path),o,{headers:t.requestHeaders,cancellationToken:t.cancellationToken,sha512:l.sha512})}catch(c){try{await qw.unlink(o)}catch{}throw c}}})}async verifySignature(t){let n;try{if(n=(await this.configOnDisk.value).publisherName,n==null)return null}catch(r){if(r.code==="ENOENT")return null;throw r}return await Hw.verifySignature(Array.isArray(n)?n:[n],t,this._logger)}doInstall(t){const n=["--updated"];t.isSilent&&n.push("/S"),t.isForceRunAfter&&n.push("--force-run");const r=this.downloadedUpdateHelper==null?null:this.downloadedUpdateHelper.packageFile;r!=null&&n.push(`--package-file=${r}`);const i=()=>{ll(ua.join(process.resourcesPath,"elevate.exe"),[t.installerPath].concat(n)).catch(a=>this.dispatchError(a))};return t.isAdminRightsRequired?(this._logger.info("isAdminRightsRequired is set to true, run installer using elevate.exe"),i(),!0):(ll(t.installerPath,n).catch(a=>{const o=a.code;this._logger.info(`Cannot run installer: error code: ${o}, error message: "${a.message}", will be executed again using elevate if EACCES"`),o==="UNKNOWN"||o==="EACCES"?i():this.dispatchError(a)}),!0)}async differentialDownloadInstaller(t,n,r,i){try{if(this._testOnlyOptions!=null&&!this._testOnlyOptions.isUseDifferentialDownload)return!0;const a=Mw.blockmapFiles(t.url,this.app.version,n.updateInfoAndProvider.info.version);this._logger.info(`Download block maps (old: "${a[0]}", new: ${a[1]})`);const o=async p=>{const f=await this.httpExecutor.downloadToBuffer(p,{headers:n.requestHeaders,cancellationToken:n.cancellationToken});if(f==null||f.length===0)throw new Error(`Blockmap "${p.href}" is empty`);try{return JSON.parse(jw.gunzipSync(f).toString())}catch(c){throw new Error(`Cannot parse blockmap "${p.href}", error: ${c}`)}},s={newUrl:t.url,oldFile:ua.join(this.downloadedUpdateHelper.cacheDir,la.CURRENT_APP_INSTALLER_FILE_NAME),logger:this._logger,newFile:r,isUseMultipleRangeRequest:i.isUseMultipleRangeRequest,requestHeaders:n.requestHeaders,cancellationToken:n.cancellationToken};this.listenerCount(Pr.DOWNLOAD_PROGRESS)>0&&(s.onProgress=p=>this.emit(Pr.DOWNLOAD_PROGRESS,p));const l=await Promise.all(a.map(p=>o(p)));return await new kw.GenericDifferentialDownloader(t.info,this.httpExecutor,s).download(l[0],l[1]),!1}catch(a){if(this._logger.error(`Cannot download differentially, fallback to full download: ${a.stack||a}`),this._testOnlyOptions!=null)throw a;return!0}}async differentialDownloadWebPackage(t,n,r,i){if(n.blockMapSize==null)return!0;try{const a={newUrl:new sl.URL(n.path),oldFile:ua.join(this.downloadedUpdateHelper.cacheDir,la.CURRENT_APP_PACKAGE_FILE_NAME),logger:this._logger,newFile:r,requestHeaders:this.requestHeaders,isUseMultipleRangeRequest:i.isUseMultipleRangeRequest,cancellationToken:t.cancellationToken};this.listenerCount(Pr.DOWNLOAD_PROGRESS)>0&&(a.onProgress=o=>this.emit(Pr.DOWNLOAD_PROGRESS,o)),await new Uw.FileWithEmbeddedBlockMapDifferentialDownloader(n,this.httpExecutor,a).download()}catch(a){return this._logger.error(`Cannot download differentially, fallback to full download: ${a.stack||a}`),process.platform==="win32"}return!1}}Qn.NsisUpdater=Gw;async function ll(e,t){return new Promise((n,r)=>{try{const i=xw.spawn(e,t,{detached:!0,stdio:"ignore"});i.on("error",a=>{r(a)}),i.unref(),i.pid!==void 0&&n(!0)}catch(i){r(i)}})}(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.UpdaterSignal=e.UPDATE_DOWNLOADED=e.DOWNLOAD_PROGRESS=e.NsisUpdater=e.MacUpdater=e.AppImageUpdater=e.Provider=e.CancellationToken=e.NoOpLogger=e.AppUpdater=void 0;const t=te;Object.defineProperty(e,"CancellationToken",{enumerable:!0,get:function(){return t.CancellationToken}});var n=ht;Object.defineProperty(e,"AppUpdater",{enumerable:!0,get:function(){return n.AppUpdater}}),Object.defineProperty(e,"NoOpLogger",{enumerable:!0,get:function(){return n.NoOpLogger}});var r=ie;Object.defineProperty(e,"Provider",{enumerable:!0,get:function(){return r.Provider}});var i=Kn;Object.defineProperty(e,"AppImageUpdater",{enumerable:!0,get:function(){return i.AppImageUpdater}});var a=Jn;Object.defineProperty(e,"MacUpdater",{enumerable:!0,get:function(){return a.MacUpdater}});var o=Qn;Object.defineProperty(e,"NsisUpdater",{enumerable:!0,get:function(){return o.NsisUpdater}});let s;function l(){return process.platform==="win32"?s=new Qn.NsisUpdater:process.platform==="darwin"?s=new Jn.MacUpdater:s=new Kn.AppImageUpdater,s}Object.defineProperty(e,"autoUpdater",{enumerable:!0,get:()=>s||l()}),e.DOWNLOAD_PROGRESS="download-progress",e.UPDATE_DOWNLOADED="update-downloaded";class p{constructor(m){this.emitter=m}login(m){f(this.emitter,"login",m)}progress(m){f(this.emitter,e.DOWNLOAD_PROGRESS,m)}updateDownloaded(m){f(this.emitter,e.UPDATE_DOWNLOADED,m)}updateCancelled(m){f(this.emitter,"update-cancelled",m)}}e.UpdaterSignal=p;function f(c,m,y){c.on(m,y)}})(gn);var Vw=Bf(gn),Yw=xf({__proto__:null,default:Vw},[gn]);exports.main=Yw;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
